/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@pgrabovets/json-view/dist/jsonview.js":
/*!*************************************************************!*\
  !*** ./node_modules/@pgrabovets/json-view/dist/jsonview.js ***!
  \*************************************************************/
/***/ ((module) => {

!function(e,n){ true?module.exports=n():0}(self,(()=>(()=>{"use strict";var e={425:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(650),o=t.n(r),i=t(196),a=t.n(i)()(o());a.push([e.id,'.json-container{font-family:"Open Sans";font-size:16px;background-color:#fff;color:gray;box-sizing:border-box}.json-container .line{margin:4px 0;display:flex;justify-content:flex-start}.json-container .caret-icon{width:18px;text-align:center;cursor:pointer}.json-container .empty-icon{width:18px}.json-container .json-type{margin-right:4px;margin-left:4px}.json-container .json-key{color:#444;margin-right:4px;margin-left:4px}.json-container .json-index{margin-right:4px;margin-left:4px}.json-container .json-value{margin-left:8px}.json-container .json-number{color:#f9ae58}.json-container .json-boolean{color:#ec5f66}.json-container .json-string{color:#86b25c}.json-container .json-size{margin-right:4px;margin-left:4px}.json-container .hidden{display:none}.json-container .fas{display:inline-block;border-style:solid;width:0;height:0}.json-container .fa-caret-down{border-width:6px 5px 0 5px;border-color:gray rgba(0,0,0,0)}.json-container .fa-caret-right{border-width:5px 0 5px 6px;border-color:rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,0) gray}',""]);const s=a},196:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},650:e=>{e.exports=function(e){return e[1]}},62:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var p=t(u),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(f);else{var v=o(f,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:v,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},566:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},911:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},107:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},552:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},227:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nc=void 0;var r={};return(()=>{t.r(r),t.d(r,{collapse:()=>A,create:()=>S,default:()=>H,destroy:()=>L,expand:()=>D,render:()=>w,renderJSON:()=>k,toggleNode:()=>N,traverse:()=>C});var e=t(62),n=t.n(e),o=t(552),i=t.n(o),a=t(566),s=t.n(a),c=t(107),l=t.n(c),d=t(911),u=t.n(d),p=t(227),f=t.n(p),v=t(425),y={};function h(e){return Array.isArray(e)?"array":null===e?"null":typeof e}function m(e){return document.createElement(e)}y.styleTagTransform=f(),y.setAttributes=l(),y.insert=s().bind(null,"head"),y.domAPI=i(),y.insertStyleElement=u(),n()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;const g={HIDDEN:"hidden",CARET_ICON:"caret-icon",CARET_RIGHT:"fa-caret-right",CARET_DOWN:"fa-caret-down",ICON:"fas"};function x(e){e.children.forEach((e=>{e.el.classList.add(g.HIDDEN),e.isExpanded&&x(e)}))}function j(e){e.children.forEach((e=>{e.el.classList.remove(g.HIDDEN),e.isExpanded&&j(e)}))}function b(e){if(e.children.length>0){const n=e.el.querySelector("."+g.ICON);n&&n.classList.replace(g.CARET_RIGHT,g.CARET_DOWN)}}function E(e){if(e.children.length>0){const n=e.el.querySelector("."+g.ICON);n&&n.classList.replace(g.CARET_DOWN,g.CARET_RIGHT)}}function N(e){e.isExpanded?(e.isExpanded=!1,E(e),x(e)):(e.isExpanded=!0,b(e),j(e))}function C(e,n){n(e),e.children.length>0&&e.children.forEach((e=>{C(e,n)}))}function T(e={}){let n=e.hasOwnProperty("value")?e.value:null;return(e=>"object"===h(e)&&0===Object.keys(e).length)(n)&&(n="{}"),{key:e.key||null,parent:e.parent||null,value:n,isExpanded:e.isExpanded||!1,type:e.type||null,children:e.children||[],el:e.el||null,depth:e.depth||0,dispose:null}}function I(e,n){if("object"==typeof e)for(let t in e){const r=T({value:e[t],key:t,depth:n.depth+1,type:h(e[t]),parent:n});n.children.push(r),I(e[t],r)}}function O(e){return"string"==typeof e?JSON.parse(e):e}function S(e){const n=O(e),t=T({value:n,key:h(n),type:h(n)});return I(n,t),t}function k(e,n){const t=S(O(e));return w(t,n),t}function w(e,n){const t=function(){const e=m("div");return e.className="json-container",e}();C(e,(function(e){e.el=function(e){let n=m("div");const t=e=>{const n=e.children.length;return"array"===e.type?`[${n}]`:"object"===e.type?`{${n}}`:null};if(e.children.length>0){n.innerHTML=function(e={}){const{key:n,size:t}=e;return`\n    <div class="line">\n      <div class="caret-icon"><i class="fas fa-caret-right"></i></div>\n      <div class="json-key">${n}</div>\n      <div class="json-size">${t}</div>\n    </div>\n  `}({key:e.key,size:t(e)});const r=n.querySelector("."+g.CARET_ICON);e.dispose=function(e,n,t){return e.addEventListener(n,t),()=>e.removeEventListener(n,t)}(r,"click",(()=>N(e)))}else n.innerHTML=function(e={}){const{key:n,value:t,type:r}=e;return`\n    <div class="line">\n      <div class="empty-icon"></div>\n      <div class="json-key">${n}</div>\n      <div class="json-separator">:</div>\n      <div class="json-value json-${r}">${t}</div>\n    </div>\n  `}({key:e.key,value:e.value,type:"{}"===e.value?"object":typeof e.value});const r=n.children[0];return null!==e.parent&&r.classList.add(g.HIDDEN),r.style="margin-left: "+18*e.depth+"px;",r}(e),t.appendChild(e.el)})),n.appendChild(t)}function D(e){C(e,(function(e){e.el.classList.remove(g.HIDDEN),e.isExpanded=!0,b(e)}))}function A(e){C(e,(function(n){n.isExpanded=!1,n.depth>e.depth&&n.el.classList.add(g.HIDDEN),E(n)}))}function L(e){var n;C(e,(e=>{e.dispose&&e.dispose()})),(n=e.el.parentNode).parentNode.removeChild(n)}const H={toggleNode:N,render:w,create:S,renderJSON:k,expand:D,collapse:A,traverse:C,destroy:L}})(),r})()));

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./src/ts/create-card.ts":
/*!*******************************!*\
  !*** ./src/ts/create-card.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   contractToCard: () => (/* binding */ contractToCard),
/* harmony export */   userToCard: () => (/* binding */ userToCard)
/* harmony export */ });
function round(num) {
    return Math.round(num * 1000) / 1000;
}
// Given an object out of window.pState, we'll return HTML that represents the current state of the object to go in the card.
function userToCard(user) {
    return `
        <div class="card user-card">
            <div class="card-label">USER</div>
            <div class="card-body">
                <h5 class="card-title">${user.id}</h5>
                <h6 class="card-subtitle">${user.balance}M</h6>
            </div>
        </div>
    `;
}
function contractToCard(c) {
    return `
        <div class="card contract-card">
            <div class="card-label">${c.outcomeType} CONTRACT</div>
            <div class="card-body">
                <h5 class="card-title">${c.id}</h5>
                <h6 class="card-subtitle">${round(c.p)}M</h6>
                <table class="table">
                    <tbody>
                        <tr>
                            <td>YES pool</td>
                            <td>${round(c.pool.YES)}</td>
                        </tr>
                        <tr>
                            <td>NO pool</td>
                            <td>${round(c.pool.NO)}</td>
                        </tr>
                    </tbody>
            </div>
        </div>
    `;
}


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/answer.ts":
/*!**************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/answer.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MAX_ANSWERS: () => (/* binding */ MAX_ANSWERS),
/* harmony export */   MAX_ANSWER_LENGTH: () => (/* binding */ MAX_ANSWER_LENGTH)
/* harmony export */ });
const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/answer.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/answer.ts';
const MAX_ANSWER_LENGTH = 240;
const MAX_ANSWERS = 100;


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/antes.ts":
/*!*************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/antes.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEV_HOUSE_LIQUIDITY_PROVIDER_ID: () => (/* binding */ DEV_HOUSE_LIQUIDITY_PROVIDER_ID),
/* harmony export */   HOUSE_LIQUIDITY_PROVIDER_ID: () => (/* binding */ HOUSE_LIQUIDITY_PROVIDER_ID),
/* harmony export */   UNIQUE_BETTOR_LIQUIDITY_AMOUNT: () => (/* binding */ UNIQUE_BETTOR_LIQUIDITY_AMOUNT),
/* harmony export */   _getCpmmInitialLiquidity: () => (/* binding */ _getCpmmInitialLiquidity),
/* harmony export */   _getMultipleChoiceAntes: () => (/* binding */ _getMultipleChoiceAntes),
/* harmony export */   getCpmmInitialLiquidity: () => (/* binding */ getCpmmInitialLiquidity),
/* harmony export */   getMultipleChoiceAntes: () => (/* binding */ getMultipleChoiceAntes)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _fees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fees */ "./src/ts/lib/manifold/common/src/fees.ts");
/* harmony import */ var _util_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/object */ "./src/ts/lib/manifold/common/src/util/object.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/antes.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/antes.ts';


const HOUSE_LIQUIDITY_PROVIDER_ID = 'IPTOzEqrpkWmEzh6hwvAyY9PqFb2'; // @ManifoldMarkets' id
const DEV_HOUSE_LIQUIDITY_PROVIDER_ID = '94YYTk1AFWfbWMpfYcvnnwI1veP2'; // @ManifoldMarkets' id
const UNIQUE_BETTOR_LIQUIDITY_AMOUNT = 20;
/*WRAPPED*/ function _getCpmmInitialLiquidity(provider, contract, anteId, amount) {
    const { createdTime, mechanism } = contract;
    const pool = mechanism === 'cpmm-1' ? { YES: 0, NO: 0 } : undefined;
    const lp = (0,_util_object__WEBPACK_IMPORTED_MODULE_2__.removeUndefinedProps)({
        id: anteId,
        userId: provider.id,
        contractId: contract.id,
        createdTime,
        isAnte: true,
        amount: amount,
        liquidity: amount,
        pool,
    });
    return lp;
}
/*LOG2   */ const getCpmmInitialLiquidity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmInitialLiquidity()', github_file_url, 22), _getCpmmInitialLiquidity);
/*WRAPPED*/ function _getMultipleChoiceAntes(creator, contract, answers, betDocIds) {
    const { totalBets, totalShares } = contract;
    const amount = totalBets['0'];
    const shares = totalShares['0'];
    const p = 1 / answers.length;
    const { createdTime } = contract;
    const bets = answers.map((answer, i) => ({
        id: betDocIds[i],
        userId: creator.id,
        contractId: contract.id,
        amount,
        shares,
        outcome: i.toString(),
        probBefore: p,
        probAfter: p,
        createdTime,
        isAnte: true,
        isRedemption: false,
        isChallenge: false,
        fees: _fees__WEBPACK_IMPORTED_MODULE_1__.noFees,
        visibility: contract.visibility,
    }));
    const { username, name, avatarUrl } = creator;
    const answerObjects = answers.map((answer, i) => ({
        id: i.toString(),
        number: i,
        contractId: contract.id,
        createdTime,
        userId: creator.id,
        username,
        name,
        avatarUrl,
        text: answer,
    }));
    return { bets, answerObjects };
}
/*LOG2   */ const getMultipleChoiceAntes = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getMultipleChoiceAntes()', github_file_url, 47), _getMultipleChoiceAntes);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/api/create-market.ts":
/*!*************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/api/create-market.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _createMarketHelper: () => (/* binding */ _createMarketHelper),
/* harmony export */   _createmarket: () => (/* binding */ _createmarket),
/* harmony export */   createMarketHelper: () => (/* binding */ createMarketHelper),
/* harmony export */   createmarket: () => (/* binding */ createmarket)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _answer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../answer */ "./src/ts/lib/manifold/common/src/answer.ts");
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zod */ "./node_modules/zod/lib/index.mjs");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./src/ts/lib/manifold/common/src/api/helpers.ts");
/* harmony import */ var _antes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../antes */ "./src/ts/lib/manifold/common/src/antes.ts");
/* harmony import */ var _contract__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contract */ "./src/ts/lib/manifold/common/src/contract.ts");
/* harmony import */ var _economy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../economy */ "./src/ts/lib/manifold/common/src/economy.ts");
/* harmony import */ var _new_contract__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../new-contract */ "./src/ts/lib/manifold/common/src/new-contract.ts");
/* harmony import */ var _pseudo_numeric__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../pseudo-numeric */ "./src/ts/lib/manifold/common/src/pseudo-numeric.ts");
/* harmony import */ var _user__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../user */ "./src/ts/lib/manifold/common/src/user.ts");
/* harmony import */ var _stonk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../stonk */ "./src/ts/lib/manifold/common/src/stonk.ts");
/* harmony import */ var _util_slugify__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/slugify */ "./src/ts/lib/manifold/common/src/util/slugify.ts");
const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/backend/api/src/create-market.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/backend/api/src/create-market.ts';
const github_path = 'backend/api/src/create-market.ts';












/*WRAPPED*/ function _createmarket(body, userId) {
    const contract = createMarketHelper(body, userId);
    return contract;
}
/*LOG2   */ const createmarket = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('createmarket()', github_file_url, 51), _createmarket);
/*WRAPPED*/ function _createMarketHelper(body, userId) {
    const { question, description, descriptionHtml, descriptionMarkdown, descriptionJson, closeTime: closeTimeRaw, outcomeType, groupIds, visibility, extraLiquidity, isTwitchContract, utcOffset, min, max, initialProb, isLogScale, answers, addAnswersMode, shouldAnswersSumToOne, totalBounty, loverUserId1, loverUserId2, } = validateMarketBody(body);
    const user = window.pState.getUser(userId);
    if (!user)
        window.logger.throw("APIError", "(401) Your account was not found");
    const hasOtherAnswer = addAnswersMode !== 'DISABLED' && shouldAnswersSumToOne;
    const numAnswers = (answers?.length ?? 0) + (hasOtherAnswer ? 1 : 0);
    const ante = (totalBounty ?? (0,_economy__WEBPACK_IMPORTED_MODULE_5__.getAnte)(outcomeType, numAnswers)) + (extraLiquidity ?? 0);
    if (ante < 1)
        window.logger.throw('APIError', '(400) Ante must be at least 1');
    const closeTime = getCloseTimestamp(closeTimeRaw, question, outcomeType, utcOffset);
    if (user.isBannedFromPosting)
        window.logger.throw("APIError", "(403) You are banned");
    const { amountSuppliedByUser, amountSuppliedByHouse } = (0,_user__WEBPACK_IMPORTED_MODULE_8__.marketCreationCosts)(user, ante);
    if (ante > (0,_user__WEBPACK_IMPORTED_MODULE_8__.getAvailableBalancePerQuestion)(user))
        window.logger.throw("APIError", `(403) Balance must be at least ${amountSuppliedByUser}.`);
    const contract = (0,_new_contract__WEBPACK_IMPORTED_MODULE_6__.getNewContract)(window.pState.getNextContractId(), (0,_util_slugify__WEBPACK_IMPORTED_MODULE_10__.slugify)(question), user, question, outcomeType, description ?? "", initialProb ?? 0, ante, closeTime, visibility, isTwitchContract, min ?? 0, max ?? 0, isLogScale ?? false, answers ?? [], addAnswersMode, shouldAnswersSumToOne, loverUserId1, loverUserId2);
    const houseId = _antes__WEBPACK_IMPORTED_MODULE_3__.HOUSE_LIQUIDITY_PROVIDER_ID;
    runCreateMarketTxn(contract, ante, user);
    window.logger.log(`created contract "${contract.id}" for`, user.username);
    window.logger.log('on', question);
    window.logger.log('with ante', ante);
    generateAntes(user, contract, outcomeType, ante);
    return contract;
}
/*LOG2   */ const createMarketHelper = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('createMarketHelper()', github_file_url, 55), _createMarketHelper);
/*WRAPPED*/ const _runCreateMarketTxn = async (contract, ante, user) => {
    const { amountSuppliedByUser, amountSuppliedByHouse } = (0,_user__WEBPACK_IMPORTED_MODULE_8__.marketCreationCosts)(user, ante);
    if (contract.outcomeType !== 'BOUNTIED_QUESTION') {
        if (amountSuppliedByHouse > 0) {
            // trans.update(houseDoc.ref, {
            //   balance: FieldValue.increment(-amountSuppliedByHouse),
            //   totalDeposits: FieldValue.increment(-amountSuppliedByHouse),
            // })
            window.pState.bank.balance -= amountSuppliedByHouse;
            window.logger.log(`Decreasing house balance by ${amountSuppliedByHouse} to ${window.pState.bank.balance}`);
            // window.pState.bank.totalDeposits -= amountSuppliedByHouse TODO what would totalDeposits even mean for the bank?
        }
        if (amountSuppliedByUser > 0) {
            // TODO TXN
            user.balance -= amountSuppliedByUser;
            window.logger.log(`Decreasing ${user.username}'s balance by ${amountSuppliedByUser} to ${user.balance}`);
            user.totalDeposits -= amountSuppliedByUser;
            window.logger.log(`Decreasing ${user.username}'s totalDeposits by ${amountSuppliedByUser} to ${user.totalDeposits}`);
        }
    }
    else {
        // Even if their debit is 0, it seems important that the user posts the bounty
        // await runPostBountyTxn(
        //   trans,
        //   {
        //     fromId: user.id,
        //     fromType: 'USER',
        //     toId: contract.id,
        //     toType: 'CONTRACT',
        //     amount: amountSuppliedByUser,
        //     token: 'M$',
        //     category: 'BOUNTY_POSTED',
        //   },
        //   contractRef,
        //   userDocRef
        // )
        // window.pState.runNewTransaction({
        //     fromId: user.id,
        //     fromType: 'USER',
        //     toId: contract.id,
        //     toType: 'CONTRACT',
        //     amount: amountSuppliedByUser,
        //     token: 'M$',
        //     category: 'BOUNTY_POSTED',
        // })
        // if (amountSuppliedByHouse > 0 && houseDoc)
        //   await runPostBountyTxn(
        //     trans,
        //     {
        //       fromId: houseDoc.id,
        //       fromType: 'USER',
        //       toId: contract.id,
        //       toType: 'CONTRACT',
        //       amount: amountSuppliedByHouse,
        //       token: 'M$',
        //       category: 'BOUNTY_ADDED',
        //     },
        //     contractRef,
        //     houseDoc.ref
        //   )
    }
    if (amountSuppliedByHouse > 0) {
        // trans.update(userDocRef, {
        //   freeQuestionsCreated: FieldValue.increment(1),
        // })
        user.freeQuestionsCreated += 1;
        window.logger.log(`House supplied funds. This is ${user.username}'s free question #${user.freeQuestionsCreated}`);
    }
    return contract;
};
/*LOG2   */ const runCreateMarketTxn = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('runCreateMarketTxn()', github_file_url, 213), _runCreateMarketTxn);
/*WRAPPED*/ function _getCloseTimestamp(closeTime, question, outcomeType, utcOffset) {
    return closeTime
        ? typeof closeTime === 'number'
            ? closeTime
            : closeTime.getTime()
        : _contract__WEBPACK_IMPORTED_MODULE_4__.NO_CLOSE_TIME_TYPES.includes(outcomeType)
            ? undefined
            : Date.now() + 7 * 24 * 60 * 60 * 1000;
}
/*LOG2   */ const getCloseTimestamp = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCloseTimestamp()', github_file_url, 305), _getCloseTimestamp);
/*WRAPPED*/ function _validateMarketBody(body) {
    const { question, description, descriptionHtml, descriptionMarkdown, descriptionJson, closeTime, outcomeType, groupIds, visibility = 'public', isTwitchContract, utcOffset, loverUserId1, loverUserId2, } = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.validate)(bodySchema, body);
    let min, max, initialProb, isLogScale, answers, addAnswersMode, shouldAnswersSumToOne, totalBounty, extraLiquidity;
    if (outcomeType === 'PSEUDO_NUMERIC') {
        let initialValue;
        ({ min, max, initialValue, isLogScale, extraLiquidity } = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.validate)(numericSchema, body));
        if (max - min <= 0.01 || initialValue <= min || initialValue >= max) {
            window.logger.log('APIError', '(400) Invalid range.');
            throw new Error('APIError (400) Invalid range.');
        }
        initialProb = (0,_pseudo_numeric__WEBPACK_IMPORTED_MODULE_7__.getPseudoProbability)(initialValue, min, max, isLogScale) * 100;
        if (initialProb < 1 || initialProb > 99)
            if (outcomeType === 'PSEUDO_NUMERIC')
                window.logger.throw('APIError', `(400) Initial value is too ${initialProb < 1 ? 'low' : 'high'}`);
            else
                window.logger.throw('APIError', '(400) Invalid initial probability.');
    }
    if (outcomeType === 'STONK') {
        initialProb = _stonk__WEBPACK_IMPORTED_MODULE_9__.STONK_INITIAL_PROB;
    }
    if (outcomeType === 'BINARY') {
        ;
        ({ initialProb, extraLiquidity } = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.validate)(binarySchema, body));
    }
    if (outcomeType === 'MULTIPLE_CHOICE') {
        ;
        ({ answers, addAnswersMode, shouldAnswersSumToOne, extraLiquidity } =
            (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.validate)(multipleChoiceSchema, body));
        if (answers.length < 2 && addAnswersMode === 'DISABLED')
            window.logger.throw('APIError', '(400) Multiple choice markets must have at least 2 answers if adding answers is disabled.');
    }
    if (outcomeType === 'BOUNTIED_QUESTION') {
        window.logger.throw('PlaygroundError', 'Bountied questions are not supported in the playground');
    }
    if (outcomeType === 'POLL') {
        ;
        ({ answers } = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.validate)(pollSchema, body));
    }
    return {
        question,
        description,
        descriptionHtml,
        descriptionMarkdown,
        descriptionJson,
        closeTime,
        outcomeType,
        groupIds,
        visibility,
        extraLiquidity,
        isTwitchContract,
        utcOffset,
        min,
        max,
        initialProb,
        isLogScale,
        answers,
        addAnswersMode,
        shouldAnswersSumToOne,
        totalBounty,
        loverUserId1,
        loverUserId2,
    };
}
/*LOG2   */ const validateMarketBody = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('validateMarketBody()', github_file_url, 342), _validateMarketBody);
/*WRAPPED*/ async function _generateAntes(user, contract, outcomeType, ante) {
    if (outcomeType === 'BINARY' ||
        outcomeType === 'PSEUDO_NUMERIC' ||
        outcomeType === 'STONK' ||
        outcomeType === 'MULTIPLE_CHOICE') {
        const lp = (0,_antes__WEBPACK_IMPORTED_MODULE_3__.getCpmmInitialLiquidity)(user, contract, 'myAnteId', //TODO
        ante);
    }
}
/*LOG2   */ const generateAntes = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('generateAntes()', github_file_url, 499), _generateAntes);
const bodySchema = zod__WEBPACK_IMPORTED_MODULE_11__.z.object({
    question: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().min(1).max(_contract__WEBPACK_IMPORTED_MODULE_4__.MAX_QUESTION_LENGTH),
    description: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().optional(),
    descriptionHtml: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().optional(),
    descriptionMarkdown: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().optional(),
    descriptionJson: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().optional(),
    closeTime: zod__WEBPACK_IMPORTED_MODULE_11__.z
        .union([zod__WEBPACK_IMPORTED_MODULE_11__.z.date(), zod__WEBPACK_IMPORTED_MODULE_11__.z.number()])
        .refine((date) => (typeof date === 'number' ? date : date.getTime()) > Date.now(), 'Close time must be in the future.')
        .optional(),
    outcomeType: zod__WEBPACK_IMPORTED_MODULE_11__.z.enum(_contract__WEBPACK_IMPORTED_MODULE_4__.CREATEABLE_OUTCOME_TYPES),
    groupIds: zod__WEBPACK_IMPORTED_MODULE_11__.z.array(zod__WEBPACK_IMPORTED_MODULE_11__.z.string().min(1)).optional(),
    visibility: zod__WEBPACK_IMPORTED_MODULE_11__.z.enum(_contract__WEBPACK_IMPORTED_MODULE_4__.VISIBILITIES).optional(),
    isTwitchContract: zod__WEBPACK_IMPORTED_MODULE_11__.z.boolean().optional(),
    utcOffset: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().optional(),
    loverUserId1: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().optional(),
    loverUserId2: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().optional(),
});
const binarySchema = zod__WEBPACK_IMPORTED_MODULE_11__.z.object({
    initialProb: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().min(1).max(99),
    extraLiquidity: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().min(1).optional(),
});
const numericSchema = zod__WEBPACK_IMPORTED_MODULE_11__.z.object({
    min: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().safe(),
    max: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().safe(),
    initialValue: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().safe(),
    isLogScale: zod__WEBPACK_IMPORTED_MODULE_11__.z.boolean().optional(),
    extraLiquidity: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().min(1).optional(),
});
const multipleChoiceSchema = zod__WEBPACK_IMPORTED_MODULE_11__.z.object({
    answers: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().trim().min(1).array().max(_answer__WEBPACK_IMPORTED_MODULE_1__.MAX_ANSWERS),
    addAnswersMode: zod__WEBPACK_IMPORTED_MODULE_11__.z
        .enum(['DISABLED', 'ONLY_CREATOR', 'ANYONE'])
        .optional()
        .default('DISABLED'),
    shouldAnswersSumToOne: zod__WEBPACK_IMPORTED_MODULE_11__.z.boolean().optional(),
    extraLiquidity: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().min(1).optional(),
});
const bountiedQuestionSchema = zod__WEBPACK_IMPORTED_MODULE_11__.z.object({
    totalBounty: zod__WEBPACK_IMPORTED_MODULE_11__.z.number().min(1),
});
const pollSchema = zod__WEBPACK_IMPORTED_MODULE_11__.z.object({
    answers: zod__WEBPACK_IMPORTED_MODULE_11__.z.string().trim().min(1).array().min(2).max(_answer__WEBPACK_IMPORTED_MODULE_1__.MAX_ANSWERS),
});


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/api/helpers.ts":
/*!*******************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/api/helpers.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _validate: () => (/* binding */ _validate),
/* harmony export */   validate: () => (/* binding */ validate)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/backend/api/src/helpers.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/backend/api/src/helpers.ts';
/*WRAPPED*/ const _validate = (schema, val) => {
    const result = schema.safeParse(val);
    if (!result.success) {
        const issues = result.error.issues.map((i) => {
            return {
                field: i.path.join('.') || null,
                error: i.message,
            };
        });
        window.logger.log('data validation issues', issues);
        window.logger.log('APIError', '(400) Error validating request');
        throw new Error('APIError (400) Error validating request');
    }
    else {
        return result.data;
    }
};
/*LOG2   */ const validate = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('validate()', github_file_url, 85), _validate);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/api/place-bet.ts":
/*!*********************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/api/place-bet.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _getUnfilledBetsAndUserBalances: () => (/* binding */ _getUnfilledBetsAndUserBalances),
/* harmony export */   _placeBetMain: () => (/* binding */ _placeBetMain),
/* harmony export */   _placebet: () => (/* binding */ _placebet),
/* harmony export */   _updateMakers: () => (/* binding */ _updateMakers),
/* harmony export */   getUnfilledBetsAndUserBalances: () => (/* binding */ getUnfilledBetsAndUserBalances),
/* harmony export */   placeBetMain: () => (/* binding */ placeBetMain),
/* harmony export */   placebet: () => (/* binding */ placebet),
/* harmony export */   updateMakers: () => (/* binding */ updateMakers)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zod */ "./node_modules/zod/lib/index.mjs");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _contract__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contract */ "./src/ts/lib/manifold/common/src/contract.ts");
/* harmony import */ var _new_bet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../new-bet */ "./src/ts/lib/manifold/common/src/new-bet.ts");
/* harmony import */ var _util_object__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/object */ "./src/ts/lib/manifold/common/src/util/object.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/math */ "./src/ts/lib/manifold/common/src/util/math.ts");
/* harmony import */ var _redeem_shares__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./redeem-shares */ "./src/ts/lib/manifold/common/src/api/redeem-shares.ts");
/* harmony import */ var _calculate_cpmm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../calculate-cpmm */ "./src/ts/lib/manifold/common/src/calculate-cpmm.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers */ "./src/ts/lib/manifold/common/src/api/helpers.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/backend/api/src/place-bet.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/backend/api/src/place-bet.ts';









// don't use strict() because we want to allow market-type-specific fields
const bodySchema = zod__WEBPACK_IMPORTED_MODULE_9__.z.object({
    contractId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
    amount: zod__WEBPACK_IMPORTED_MODULE_9__.z.number().gte(1),
    replyToCommentId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().optional(),
});
const binarySchema = zod__WEBPACK_IMPORTED_MODULE_9__.z.object({
    outcome: zod__WEBPACK_IMPORTED_MODULE_9__.z.enum(['YES', 'NO']),
    limitProb: zod__WEBPACK_IMPORTED_MODULE_9__.z.number().gte(0).lte(1).optional(),
    expiresAt: zod__WEBPACK_IMPORTED_MODULE_9__.z.number().optional(),
});
const multipleChoiceSchema = zod__WEBPACK_IMPORTED_MODULE_9__.z.object({
    answerId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
    // Used for new multiple choice contracts (cpmm-multi-1).
    outcome: zod__WEBPACK_IMPORTED_MODULE_9__.z.enum(['YES', 'NO']).optional(),
    limitProb: zod__WEBPACK_IMPORTED_MODULE_9__.z.number().gte(0).lte(1).optional(),
    expiresAt: zod__WEBPACK_IMPORTED_MODULE_9__.z.number().optional(),
});
const numericSchema = zod__WEBPACK_IMPORTED_MODULE_9__.z.object({
    outcome: zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
    value: zod__WEBPACK_IMPORTED_MODULE_9__.z.number(),
});
/*WRAPPED*/ function _placebet(body, uid, isApi) {
    const bet = placeBetMain(body, uid, isApi);
    return bet;
}
/*LOG2   */ const placebet = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('placebet()', github_file_url, 58), _placebet);
/*WRAPPED*/ const _placeBetMain = (body, uid, isApi) => {
    const { amount, contractId, replyToCommentId } = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.validate)(bodySchema, body);
    // Create and run function to get result
    const result = (() => {
        const contract = window.pState.getContract(contractId);
        const user = window.pState.getUser(uid);
        // const userDoc = firestore.doc(`users/${uid}`)
        // const [contractSnap, userSnap] = await trans.getAll(contractDoc, userDoc)
        if (!contract)
            window.logger.throw('APIError', `(404) Contract ${contractId} not found.`);
        if (!user)
            window.logger.throw('APIError', `(404) User ${uid} not found.`);
        if (user.balance < amount)
            window.logger.throw('APIError', `(403) Insufficient balance ${user.balance} to place bet of ${amount}.`);
        window.logger.log(`Loaded user ${user.id} betting M${amount} on slug ${contract.slug} with contract id: ${contract.id}.`);
        const { closeTime, outcomeType, mechanism, collectedFees, volume } = contract;
        if (closeTime && Date.now() > closeTime)
            window.logger.throw('APIError', '(403) Trading is closed.');
        const { newBet, otherBetResults, newPool, newTotalShares, newTotalBets, newTotalLiquidity, newP, makers, ordersToCancel, } = (() => {
            if ((outcomeType == 'BINARY' ||
                outcomeType === 'PSEUDO_NUMERIC' ||
                outcomeType === 'STONK') &&
                mechanism == 'cpmm-1') {
                // eslint-disable-next-line prefer-const
                let { outcome, limitProb, expiresAt } = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.validate)(binarySchema, body);
                if (expiresAt && expiresAt < Date.now())
                    window.logger.throw('APIError', '(404) Bet cannot expire in the past.');
                if (limitProb !== undefined && outcomeType === 'BINARY') {
                    const isRounded = (0,_util_math__WEBPACK_IMPORTED_MODULE_5__.floatingEqual)(Math.round(limitProb * 100), limitProb * 100);
                    if (!isRounded)
                        window.logger.throw('APIError', '(400) limitProb must be in increments of 0.01 (i.e. whole percentage points)');
                    limitProb = Math.round(limitProb * 100) / 100;
                }
                window.logger.log(`Checking for limit orders in placebet for user ${uid} on contract id ${contractId}.`);
                const { unfilledBets, balanceByUserId } = getUnfilledBetsAndUserBalances(contract);
                return (0,_new_bet__WEBPACK_IMPORTED_MODULE_3__.getBinaryCpmmBetInfo)(contract, outcome, amount, limitProb, unfilledBets, balanceByUserId, user, expiresAt);
            }
            else if ((outcomeType == 'FREE_RESPONSE' || outcomeType === 'MULTIPLE_CHOICE') &&
                mechanism == 'dpm-2') {
                const { answerId } = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.validate)(multipleChoiceSchema, body);
                // const answerDoc = contractDoc.collection('answers').doc(answerId)
                // const answerSnap = await trans.get(answerDoc)
                const answer = contract.answers.find((a) => a.id === answerId);
                if (!answer)
                    window.logger.throw('APIError', `(404) Answer ${answerId} not found.`);
                return (0,_new_bet__WEBPACK_IMPORTED_MODULE_3__.getNewMultiBetInfo)(answerId, amount, contract);
            }
            else if (outcomeType === 'MULTIPLE_CHOICE' &&
                mechanism == 'cpmm-multi-1') {
                const { shouldAnswersSumToOne } = contract;
                const { answerId, outcome = 'YES', limitProb, expiresAt, } = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.validate)(multipleChoiceSchema, body);
                if (expiresAt && expiresAt < Date.now())
                    window.logger.throw('APIError', '(404) Bet cannot expire in the past.');
                // const answersSnap = await trans.get(
                //   contractDoc.collection('answersCpmm')
                // )
                // const answers = answersSnap.docs.map((doc) => doc.data() as Answer)
                const answers = contract.answers;
                const answer = answers.find((a) => a.id === answerId);
                if (!answer)
                    window.logger.throw('APIError', '(404) Answer not found');
                if (shouldAnswersSumToOne && answers.length < 2)
                    window.logger.throw('APIError', '(403) Cannot bet until at least two answers are added.');
                let roundedLimitProb = limitProb;
                if (limitProb !== undefined) {
                    const isRounded = (0,_util_math__WEBPACK_IMPORTED_MODULE_5__.floatingEqual)(Math.round(limitProb * 100), limitProb * 100);
                    if (!isRounded)
                        window.logger.throw('APIError', '(400) limitProb must be in increments of 0.01 (i.e. whole percentage points)');
                    roundedLimitProb = Math.round(limitProb * 100) / 100;
                }
                const { unfilledBets, balanceByUserId } = getUnfilledBetsAndUserBalances(contract, 
                // Fetch all limit orders if answers should sum to one.
                shouldAnswersSumToOne ? undefined : answerId);
                return (0,_new_bet__WEBPACK_IMPORTED_MODULE_3__.getNewMultiCpmmBetInfo)(contract, answers, answer, outcome, amount, roundedLimitProb, unfilledBets, balanceByUserId, expiresAt);
            }
            else {
                window.logger.throw('APIError', '(500) Contract type/mechanism not supported (or is no longer)');
            }
            throw new Error('Unreachable');
        })();
        window.logger.log(`Calculated new bet information for ${user.username} - auth ${uid}.`);
        if (mechanism == 'cpmm-1' &&
            (!newP ||
                !isFinite(newP) ||
                Math.min(...Object.values(newPool ?? {})) < _contract__WEBPACK_IMPORTED_MODULE_2__.CPMM_MIN_POOL_QTY)) {
            window.logger.throw('APIError', '(403) Trade too large for current liquidity pool.');
        }
        if (contract.loverUserId1 && newPool && newP) {
            const prob = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_7__.getCpmmProbability)(newPool, newP);
            if (prob < 0.01) {
                window.logger.throw('APIError', '(403) Cannot bet lower than 1% probability in relationship markets.');
            }
        }
        // const betDoc = contractDoc.collection('bets').doc()
        // trans.create(
        //   betDoc,
        //   removeUndefinedProps({
        //     id: betDoc.id,
        //     userId: user.id,
        //     userAvatarUrl: user.avatarUrl,
        //     userUsername: user.username,
        //     userName: user.name,
        //     isApi,
        //     replyToCommentId,
        //     ...newBet,
        //   })
        // )
        const placedBet = window.pState.addBet({
            id: undefined,
            userId: user.id,
            userAvatarUrl: user.avatarUrl,
            userUsername: user.username,
            userName: user.name,
            isApi,
            replyToCommentId,
            ...newBet,
        });
        window.logger.log(`Created new bet document for ${user.username} - auth ${uid}.`, placedBet);
        if (makers) {
            updateMakers(makers, contract, placedBet.id);
        }
        if (ordersToCancel) {
            for (const bet of ordersToCancel) {
                // trans.update(contractDoc.collection('bets').doc(bet.id), {
                //   isCancelled: true,
                // })
                window.logger.log(`Cancelled limit order ${bet.id} for ${user.username} - auth ${uid}.`);
                bet.isCancelled = true;
            }
        }
        // trans.update(userDoc, { balance: FieldValue.increment(-newBet.amount) })
        user.balance -= newBet.amount;
        window.logger.log(`Updated user ${user.username} balance from ${user.balance + newBet.amount} to ${user.balance} (${-newBet.amount})`);
        if (newBet.amount !== 0) {
            if (newBet.answerId) {
                const multiContract = contract;
                // Multi-cpmm-1 contract
                // trans.update(
                //   contractDoc,
                //   removeUndefinedProps({
                //     volume: volume + newBet.amount,
                //   })
                // )
                multiContract.volume += newBet.amount;
                if (newPool) {
                    const { YES: poolYes, NO: poolNo } = newPool;
                    const prob = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_7__.getCpmmProbability)(newPool, 0.5);
                    // trans.update(
                    //   contractDoc.collection('answersCpmm').doc(newBet.answerId),
                    //   removeUndefinedProps({
                    //     poolYes,
                    //     poolNo,
                    //     prob,
                    //   })
                    // )
                    const answer = multiContract.answers.find((a) => a.id === newBet.answerId);
                    if (!answer)
                        window.logger.throw('APIError', '(404) Answer not found');
                    answer.poolYes = poolYes;
                    answer.poolNo = poolYes;
                    answer.prob = prob;
                }
            }
            else {
                const anyContract = contract; // Adding fields that could be part of the DPM or CPMM contracts
                // trans.update(
                //   contractDoc,
                //   removeUndefinedProps({
                //     pool: newPool,
                //     p: newP,
                //     totalShares: newTotalShares,
                //     totalBets: newTotalBets,
                //     totalLiquidity: newTotalLiquidity,
                //     collectedFees: addObjects(newBet.fees, collectedFees),
                //     volume: volume + newBet.amount,
                //   })
                // )
                anyContract.pool = newPool;
                anyContract.p = newP;
                anyContract.totalShares = newTotalShares;
                anyContract.totalBets = newTotalBets;
                anyContract.totalLiquidity = newTotalLiquidity;
                anyContract.collectedFees = (0,_util_object__WEBPACK_IMPORTED_MODULE_4__.addObjects)(newBet.fees, collectedFees);
                anyContract.volume = volume + newBet.amount;
            }
            if (otherBetResults) {
                for (const result of otherBetResults) {
                    const { answer, bet, cpmmState, makers, ordersToCancel } = result;
                    const { probBefore, probAfter } = bet;
                    const smallEnoughToIgnore = probBefore < 0.001 &&
                        probAfter < 0.001 &&
                        Math.abs(probAfter - probBefore) < 0.00001;
                    if (!smallEnoughToIgnore || Math.random() < 0.01) {
                        // const betDoc = contractDoc.collection('bets').doc()
                        // trans.create(betDoc, {
                        //   id: betDoc.id,
                        //   userId: user.id,
                        //   userAvatarUrl: user.avatarUrl,
                        //   userUsername: user.username,
                        //   userName: user.name,
                        //   isApi,
                        //   ...bet,
                        // })
                        window.pState.addBet({
                            id: undefined,
                            userId: user.id,
                            userAvatarUrl: user.avatarUrl,
                            userUsername: user.username,
                            userName: user.name,
                            isApi,
                            ...bet,
                        });
                        const { YES: poolYes, NO: poolNo } = cpmmState.pool;
                        const prob = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_7__.getCpmmProbability)(cpmmState.pool, 0.5);
                        // trans.update(
                        //   contractDoc.collection('answersCpmm').doc(answer.id),
                        //   removeUndefinedProps({
                        //     poolYes,
                        //     poolNo,
                        //     prob,
                        //   })
                        // )
                        answer.poolYes = poolYes;
                        answer.poolNo = poolNo;
                        answer.prob = prob;
                    }
                    updateMakers(makers, contract, placedBet.id);
                    for (const bet of ordersToCancel) {
                        // trans.update(contractDoc.collection('bets').doc(bet.id), {
                        //   isCancelled: true,
                        // })
                        bet.isCancelled = true;
                        window.logger.log(`Cancelled limit order ${bet.id} for ${bet.userId} `);
                    }
                }
            }
            window.logger.log(`Updated contract ${contract.id} properties`);
        }
        return { newBet, contract, makers, ordersToCancel, user };
    })();
    window.logger.log(`Main transaction finished - auth ${uid}.`);
    const { newBet, contract, makers, ordersToCancel, user } = result;
    const { mechanism } = contract;
    if ((mechanism === 'cpmm-1' || mechanism === 'cpmm-multi-1') &&
        newBet.amount !== 0) {
        const userIds = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.uniq)([
            uid,
            ...(makers ?? []).map((maker) => maker.bet.userId),
        ]);
        userIds.map((userId) => (0,_redeem_shares__WEBPACK_IMPORTED_MODULE_6__.redeemShares)(userId, contract));
        window.logger.log(`Share redemption transaction finished - auth ${uid}.`);
    }
    if (ordersToCancel) {
        ordersToCancel.map((order) => {
            // TODO
            throw new Error('TODO: Not implemented, is it needed?');
            // createLimitBetCanceledNotification(
            //   user,
            //   order.userId,
            //   order,
            //   makers?.find((m) => m.bet.id === order.id)?.amount ?? 0,
            //   contract
            // )
        });
    }
    return { ...newBet };
};
/*LOG2   */ const placeBetMain = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('placeBetMain()', github_file_url, 64), _placeBetMain);
// const getUnfilledBetsQuery = (
//   contractDoc: DocumentReference,
//   answerId?: string
// ) => {
//   const q = contractDoc
//     .collection('bets')
//     .where('isFilled', '==', false)
//     .where('isCancelled', '==', false) as Query<LimitBet>
//   if (answerId) {
//     return q.where('answerId', '==', answerId)
//   }
//   return q
// }
/*WRAPPED*/ const _getUnfilledBetsAndUserBalances = (contract, answerId) => {
    // const unfilledBets = await trans.get(
    //   getUnfilledBetsQuery(contractDoc, answerId)
    // )
    let unfilledBets = window.pState.getUnfilledBetsByContractId(contract.id);
    if (answerId !== undefined) {
        unfilledBets = unfilledBets.filter((bet) => bet.answerId === answerId);
    }
    // Get balance of all users with open limit orders.
    // const userDocs =
    //   userIds.length === 0
    //     ? []
    //     : await trans.getAll(
    //         ...userIds.map((userId) => firestore.doc(`users/${userId}`))
    //       )
    const userIds = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.uniq)(unfilledBets.map((bet) => bet.userId));
    // const users = filterDefined(userDocs.map((doc) => doc.data() as User))
    const users = userIds.map((userId) => window.pState.getUser(userId));
    const balanceByUserId = Object.fromEntries(users.map((user) => [user.id, user.balance]));
    return { unfilledBets, balanceByUserId };
};
/*LOG2   */ const getUnfilledBetsAndUserBalances = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getUnfilledBetsAndUserBalances()', github_file_url, 412), _getUnfilledBetsAndUserBalances);
/*WRAPPED*/ const _updateMakers = (makers, contract, takerBetId) => {
    const makersByBet = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(makers, (maker) => maker.bet.id);
    for (const makers of Object.values(makersByBet)) {
        const bet = makers[0].bet;
        const newFills = makers.map((maker) => {
            const { amount, shares, timestamp } = maker;
            return { amount, shares, matchedBetId: takerBetId, timestamp };
        });
        const fills = [...bet.fills, ...newFills];
        const totalShares = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(fills, 'shares');
        const totalAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(fills, 'amount');
        const isFilled = (0,_util_math__WEBPACK_IMPORTED_MODULE_5__.floatingEqual)(totalAmount, bet.orderAmount);
        // trans.update(contractDoc.collection('bets').doc(bet.id), {
        //   fills,
        //   isFilled,
        //   amount: totalAmount,
        //   shares: totalShares,
        // })
        bet.fills = fills;
        bet.isFilled = isFilled;
        bet.amount = totalAmount;
        bet.shares = totalShares;
        window.logger.log('Updated a maker\'s limit order', bet);
    }
    // Deduct balance of makers.
    const spentByUser = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)((0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(makers, (maker) => maker.bet.userId), (makers) => (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(makers, (maker) => maker.amount));
    for (const [userId, spent] of Object.entries(spentByUser)) {
        // const userDoc = firestore.collection('users').doc(userId)
        // trans.update(userDoc, { balance: FieldValue.increment(-spent) })
        window.pState.getUser(userId).balance -= spent;
        window.logger.log(`Updated user ${userId} balance from ${window.pState.getUser(userId).balance + spent} to ${window.pState.getUser(userId).balance} (${-spent})`);
    }
};
/*LOG2   */ const updateMakers = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('updateMakers()', github_file_url, 444), _updateMakers);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/api/redeem-shares.ts":
/*!*************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/api/redeem-shares.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _redeemShares: () => (/* binding */ _redeemShares),
/* harmony export */   redeemShares: () => (/* binding */ redeemShares)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _redeem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../redeem */ "./src/ts/lib/manifold/common/src/redeem.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/math */ "./src/ts/lib/manifold/common/src/util/math.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/backend/api/src/redeem-shares.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/backend/api/src/redeem-shares.ts';



/*WRAPPED*/ const _redeemShares = async (userId, contract) => {
    const { id: contractId } = contract;
    const bets = window.pState.getBetsByContractId(contractId).filter(bet => bet.userId === userId);
    const betsByAnswerId = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(bets, (bet) => bet.answerId);
    let totalAmount = 0;
    for (const [answerId, bets] of Object.entries(betsByAnswerId)) {
        const { shares, loanPayment, netAmount } = (0,_redeem__WEBPACK_IMPORTED_MODULE_2__.getBinaryRedeemableAmount)(bets);
        if ((0,_util_math__WEBPACK_IMPORTED_MODULE_3__.floatingEqual)(shares, 0)) {
            continue;
        }
        if (!isFinite(netAmount)) {
            window.logger.throw('Error 400', `Invalid redemption amount ${netAmount}, no clue what happened here.`);
        }
        totalAmount += netAmount;
        const lastProb = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.maxBy)(bets, (b) => b.createdTime)?.probAfter;
        const [yesBet, noBet] = (0,_redeem__WEBPACK_IMPORTED_MODULE_2__.getRedemptionBets)(contract, shares, loanPayment, lastProb, answerId);
        // const yesDoc = betsColl.doc()
        // const noDoc = betsColl.doc()
        // trans.create(yesDoc, { id: yesDoc.id, userId, ...yesBet })
        // trans.create(noDoc, { id: noDoc.id, userId, ...noBet })
        window.logger.log(`${userId} redeemed ${shares} shares for ${netAmount}`);
    }
    // const userDoc = firestore.collection('users').doc(userId)
    // trans.update(userDoc, { balance: FieldValue.increment(totalAmount) })
    window.pState.getUser(userId).balance += totalAmount;
    window.logger.log(`Increased ${userId}'s balance by ${totalAmount}`);
    return { status: 'success' };
};
/*LOG2   */ const redeemShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('redeemShares()', github_file_url, 11), _redeemShares);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/calculate-cpmm-arbitrage.ts":
/*!********************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/calculate-cpmm-arbitrage.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _buyNoSharesUntilAnswersSumToOne: () => (/* binding */ _buyNoSharesUntilAnswersSumToOne),
/* harmony export */   _calculateCpmmMultiArbitrageBet: () => (/* binding */ _calculateCpmmMultiArbitrageBet),
/* harmony export */   _calculateCpmmMultiArbitrageSellNo: () => (/* binding */ _calculateCpmmMultiArbitrageSellNo),
/* harmony export */   _calculateCpmmMultiArbitrageSellYes: () => (/* binding */ _calculateCpmmMultiArbitrageSellYes),
/* harmony export */   buyNoSharesUntilAnswersSumToOne: () => (/* binding */ buyNoSharesUntilAnswersSumToOne),
/* harmony export */   calculateCpmmMultiArbitrageBet: () => (/* binding */ calculateCpmmMultiArbitrageBet),
/* harmony export */   calculateCpmmMultiArbitrageSellNo: () => (/* binding */ calculateCpmmMultiArbitrageSellNo),
/* harmony export */   calculateCpmmMultiArbitrageSellYes: () => (/* binding */ calculateCpmmMultiArbitrageSellYes)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculate-cpmm */ "./src/ts/lib/manifold/common/src/calculate-cpmm.ts");
/* harmony import */ var _util_algos__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/algos */ "./src/ts/lib/manifold/common/src/util/algos.ts");
/* harmony import */ var _new_bet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./new-bet */ "./src/ts/lib/manifold/common/src/new-bet.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/math */ "./src/ts/lib/manifold/common/src/util/math.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/calculate-cpmm-arbitrage.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/calculate-cpmm-arbitrage.ts';





const DEBUG = false;
/*WRAPPED*/ function _calculateCpmmMultiArbitrageBet(answers, answerToBuy, outcome, betAmount, limitProb, unfilledBets, balanceByUserId) {
    const result = outcome === 'YES'
        ? calculateCpmmMultiArbitrageBetYes(answers, answerToBuy, betAmount, limitProb, unfilledBets, balanceByUserId)
        : calculateCpmmMultiArbitrageBetNo(answers, answerToBuy, betAmount, limitProb, unfilledBets, balanceByUserId);
    if ((0,_util_math__WEBPACK_IMPORTED_MODULE_5__.floatingEqual)((0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(result.newBetResult.takers, 'amount'), 0)) {
        // No trades matched.
        const { outcome, answer } = result.newBetResult;
        return {
            newBetResult: {
                outcome,
                answer,
                takers: [],
                makers: [],
                ordersToCancel: [],
                cpmmState: { pool: { YES: answer.poolYes, NO: answer.poolNo }, p: 0.5 },
            },
            otherBetResults: [],
        };
    }
    return result;
}
/*LOG2   */ const calculateCpmmMultiArbitrageBet = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmMultiArbitrageBet()', github_file_url, 14), _calculateCpmmMultiArbitrageBet);
/*WRAPPED*/ function _calculateCpmmMultiArbitrageBetYes(answers, answerToBuy, betAmount, limitProb, unfilledBets, balanceByUserId) {
    const startTime = Date.now();
    const unfilledBetsByAnswer = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(unfilledBets, (bet) => bet.answerId);
    const noSharePriceSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(answers.filter((a) => a.id !== answerToBuy.id).map((a) => 1 - a.prob));
    // If you spend all of amount on NO shares at current price. Subtract out from the price the redemption mana.
    const maxNoShares = betAmount / (noSharePriceSum - answers.length + 2);
    const noShares = (0,_util_algos__WEBPACK_IMPORTED_MODULE_3__.binarySearch)(0, maxNoShares, (noShares) => {
        const result = buyNoSharesInOtherAnswersThenYesInAnswer(answers, answerToBuy, unfilledBetsByAnswer, balanceByUserId, betAmount, limitProb, noShares);
        if (!result) {
            return 1;
        }
        const newPools = [
            ...result.noBetResults.map((r) => r.cpmmState.pool),
            result.yesBetResult.cpmmState.pool,
        ];
        const diff = 1 - (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5));
        return diff;
    });
    const result = buyNoSharesInOtherAnswersThenYesInAnswer(answers, answerToBuy, unfilledBetsByAnswer, balanceByUserId, betAmount, limitProb, noShares);
    if (!result) {
        throw new Error('Invariant failed in calculateCpmmMultiArbitrageBetYes');
    }
    const { noBetResults, yesBetResult } = result;
    if (DEBUG) {
        const endTime = Date.now();
        const newPools = [
            ...noBetResults.map((r) => r.cpmmState.pool),
            yesBetResult.cpmmState.pool,
        ];
        console.log('time', endTime - startTime, 'ms');
        console.log('bet amount', betAmount, 'no bet amounts', noBetResults.map((r) => r.takers.map((t) => t.amount)), 'yes bet amount', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'amount'));
        console.log('getBinaryBuyYes before', answers.map((a) => a.prob), answers.map((a) => `${a.poolYes}, ${a.poolNo}`), 'answerToBuy', answerToBuy);
        console.log('getBinaryBuyYes after', newPools, newPools.map((pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'prob total', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'pool shares', newPools.map((pool) => `${pool.YES}, ${pool.NO}`), 'no shares', noShares, 'yes shares', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'shares'));
    }
    const newBetResult = { ...yesBetResult, outcome: 'YES' };
    const otherBetResults = noBetResults.map((r) => ({ ...r, outcome: 'NO' }));
    return { newBetResult, otherBetResults };
}
/*LOG2   */ const calculateCpmmMultiArbitrageBetYes = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmMultiArbitrageBetYes()', github_file_url, 59), _calculateCpmmMultiArbitrageBetYes);
/*WRAPPED*/ const _buyNoSharesInOtherAnswersThenYesInAnswer = (answers, answerToBuy, unfilledBetsByAnswer, balanceByUserId, betAmount, limitProb, noShares) => {
    const otherAnswers = answers.filter((a) => a.id !== answerToBuy.id);
    const noAmounts = otherAnswers.map(({ id, poolYes, poolNo }) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, noShares, 'NO', unfilledBetsByAnswer[id] ?? [], balanceByUserId));
    const totalNoAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(noAmounts);
    const noBetResults = noAmounts.map((noAmount, i) => {
        const answer = otherAnswers[i];
        const pool = { YES: answer.poolYes, NO: answer.poolNo };
        return {
            ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'NO', noAmount, undefined, unfilledBetsByAnswer[answer.id] ?? [], balanceByUserId),
            answer,
        };
    });
    // Identity: No shares in all other answers is equal to noShares * (n-2) mana + yes shares in answerToBuy (quantity: noShares)
    const redeemedAmount = noShares * (answers.length - 2);
    const netNoAmount = totalNoAmount - redeemedAmount;
    const yesBetAmount = betAmount - netNoAmount;
    if (yesBetAmount < 0) {
        return undefined;
    }
    for (const noBetResult of noBetResults) {
        const redemptionFill = {
            matchedBetId: null,
            amount: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'amount'),
            shares: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'shares'),
            timestamp: Date.now(),
        };
        noBetResult.takers.push(redemptionFill);
    }
    const pool = { YES: answerToBuy.poolYes, NO: answerToBuy.poolNo };
    const yesBetResult = {
        ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'YES', yesBetAmount, limitProb, unfilledBetsByAnswer[answerToBuy.id] ?? [], balanceByUserId),
        answer: answerToBuy,
    };
    // Redeem NO shares in other answers to YES shares in this answer.
    const redemptionFill = {
        matchedBetId: null,
        amount: netNoAmount,
        shares: noShares,
        timestamp: Date.now(),
    };
    yesBetResult.takers.push(redemptionFill);
    return { noBetResults, yesBetResult };
};
/*LOG2   */ const buyNoSharesInOtherAnswersThenYesInAnswer = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('buyNoSharesInOtherAnswersThenYesInAnswer()', github_file_url, 158), _buyNoSharesInOtherAnswersThenYesInAnswer);
/*WRAPPED*/ function _calculateCpmmMultiArbitrageBetNo(answers, answerToBuy, betAmount, limitProb, unfilledBets, balanceByUserId) {
    const startTime = Date.now();
    const unfilledBetsByAnswer = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(unfilledBets, (bet) => bet.answerId);
    const yesSharePriceSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(answers.filter((a) => a.id !== answerToBuy.id), 'prob');
    const maxYesShares = betAmount / yesSharePriceSum;
    const yesShares = (0,_util_algos__WEBPACK_IMPORTED_MODULE_3__.binarySearch)(0, maxYesShares, (yesShares) => {
        const result = buyYesSharesInOtherAnswersThenNoInAnswer(answers, answerToBuy, unfilledBetsByAnswer, balanceByUserId, betAmount, limitProb, yesShares);
        if (!result)
            return 1;
        const { yesBetResults, noBetResult } = result;
        const newPools = [
            ...yesBetResults.map((r) => r.cpmmState.pool),
            noBetResult.cpmmState.pool,
        ];
        const diff = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)) - 1;
        return diff;
    });
    const result = buyYesSharesInOtherAnswersThenNoInAnswer(answers, answerToBuy, unfilledBetsByAnswer, balanceByUserId, betAmount, limitProb, yesShares);
    if (!result) {
        throw new Error('Invariant failed in calculateCpmmMultiArbitrageBetNo');
    }
    const { yesBetResults, noBetResult } = result;
    if (DEBUG) {
        const endTime = Date.now();
        const newPools = [
            ...yesBetResults.map((r) => r.cpmmState.pool),
            noBetResult.cpmmState.pool,
        ];
        console.log('time', endTime - startTime, 'ms');
        console.log('bet amount', betAmount, 'yes bet amounts', yesBetResults.map((r) => r.takers.map((t) => t.amount)), 'no bet amount', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'amount'));
        console.log('getBinaryBuyYes before', answers.map((a) => a.prob), answers.map((a) => `${a.poolYes}, ${a.poolNo}`), 'answerToBuy', answerToBuy);
        console.log('getBinaryBuyNo after', newPools, newPools.map((pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'prob total', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'pool shares', newPools.map((pool) => `${pool.YES}, ${pool.NO}`), 'yes shares', yesShares, 'no shares', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'shares'));
    }
    const newBetResult = { ...noBetResult, outcome: 'NO' };
    const otherBetResults = yesBetResults.map((r) => ({ ...r, outcome: 'YES' }));
    return { newBetResult, otherBetResults };
}
/*LOG2   */ const calculateCpmmMultiArbitrageBetNo = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmMultiArbitrageBetNo()', github_file_url, 238), _calculateCpmmMultiArbitrageBetNo);
/*WRAPPED*/ const _buyYesSharesInOtherAnswersThenNoInAnswer = (answers, answerToBuy, unfilledBetsByAnswer, balanceByUserId, betAmount, limitProb, yesShares) => {
    const otherAnswers = answers.filter((a) => a.id !== answerToBuy.id);
    const yesAmounts = otherAnswers.map(({ id, poolYes, poolNo }) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, yesShares, 'YES', unfilledBetsByAnswer[id] ?? [], balanceByUserId));
    const totalYesAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(yesAmounts);
    const yesBetResults = yesAmounts.map((yesAmount, i) => {
        const answer = otherAnswers[i];
        const { poolYes, poolNo } = answer;
        return {
            ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, 'YES', yesAmount, undefined, unfilledBetsByAnswer[answer.id] ?? [], balanceByUserId),
            answer,
        };
    });
    const noBetAmount = betAmount - totalYesAmount;
    if (noBetAmount < 0) {
        return undefined;
    }
    for (const yesBetResult of yesBetResults) {
        const redemptionFill = {
            matchedBetId: null,
            amount: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'amount'),
            shares: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'shares'),
            timestamp: Date.now(),
        };
        yesBetResult.takers.push(redemptionFill);
    }
    const pool = { YES: answerToBuy.poolYes, NO: answerToBuy.poolNo };
    const noBetResult = {
        ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'NO', noBetAmount, limitProb, unfilledBetsByAnswer[answerToBuy.id] ?? [], balanceByUserId),
        answer: answerToBuy,
    };
    // Redeem YES shares in other answers to NO shares in this answer.
    const redemptionFill = {
        matchedBetId: null,
        amount: totalYesAmount,
        shares: yesShares,
        timestamp: Date.now(),
    };
    noBetResult.takers.push(redemptionFill);
    return { yesBetResults, noBetResult };
};
/*LOG2   */ const buyYesSharesInOtherAnswersThenNoInAnswer = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('buyYesSharesInOtherAnswersThenNoInAnswer()', github_file_url, 335), _buyYesSharesInOtherAnswersThenNoInAnswer);
/*WRAPPED*/ const _buyNoSharesUntilAnswersSumToOne = (answers, unfilledBets, balanceByUserId) => {
    const unfilledBetsByAnswer = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(unfilledBets, (bet) => bet.answerId);
    let maxNoShares = 10;
    do {
        const result = buyNoSharesInAnswers(answers, unfilledBetsByAnswer, balanceByUserId, maxNoShares);
        const newPools = result.noBetResults.map((r) => r.cpmmState.pool);
        const probSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5));
        if (probSum < 1)
            break;
        maxNoShares *= 10;
    } while (true);
    const noShares = (0,_util_algos__WEBPACK_IMPORTED_MODULE_3__.binarySearch)(0, maxNoShares, (noShares) => {
        const result = buyNoSharesInAnswers(answers, unfilledBetsByAnswer, balanceByUserId, noShares);
        const newPools = result.noBetResults.map((r) => r.cpmmState.pool);
        const diff = 1 - (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5));
        return diff;
    });
    return buyNoSharesInAnswers(answers, unfilledBetsByAnswer, balanceByUserId, noShares);
};
/*LOG2   */ const buyNoSharesUntilAnswersSumToOne = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('buyNoSharesUntilAnswersSumToOne()', github_file_url, 411), _buyNoSharesUntilAnswersSumToOne);
/*WRAPPED*/ const _buyNoSharesInAnswers = (answers, unfilledBetsByAnswer, balanceByUserId, noShares) => {
    const noAmounts = answers.map(({ id, poolYes, poolNo }) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, noShares, 'NO', unfilledBetsByAnswer[id] ?? [], balanceByUserId));
    const totalNoAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(noAmounts);
    const noBetResults = noAmounts.map((noAmount, i) => {
        const answer = answers[i];
        const pool = { YES: answer.poolYes, NO: answer.poolNo };
        return {
            ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'NO', noAmount, undefined, unfilledBetsByAnswer[answer.id] ?? [], balanceByUserId),
            answer,
        };
    });
    // Identity: No shares in all other answers is equal to noShares * (n-1) mana
    const redeemedAmount = noShares * (answers.length - 1);
    const extraMana = redeemedAmount - totalNoAmount;
    for (const noBetResult of noBetResults) {
        const redemptionFill = {
            matchedBetId: null,
            amount: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'amount'),
            shares: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'shares'),
            timestamp: Date.now(),
        };
        noBetResult.takers.push(redemptionFill);
    }
    return { noBetResults, extraMana };
};
/*LOG2   */ const buyNoSharesInAnswers = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('buyNoSharesInAnswers()', github_file_url, 452), _buyNoSharesInAnswers);
/*WRAPPED*/ function _calculateCpmmMultiArbitrageSellNo(answers, answerToSell, noShares, limitProb, unfilledBets, balanceByUserId) {
    const startTime = Date.now();
    const unfilledBetsByAnswer = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(unfilledBets, (bet) => bet.answerId);
    const { id, poolYes, poolNo } = answerToSell;
    const pool = { YES: poolYes, NO: poolNo };
    const answersWithoutAnswerToSell = answers.filter((a) => a.id !== answerToSell.id);
    // Strategy: We have noShares, and need that many yes shares to complete the sell.
    // We buy some yes shares in the answer directly, and the rest is from converting No shares of all the other answers.
    // The proportion of each is dependent on what leaves the final probability sum at 1.
    // Which is what this binary search is discovering.
    const yesShares = (0,_util_algos__WEBPACK_IMPORTED_MODULE_3__.binarySearch)(0, noShares, (yesShares) => {
        const noSharesInOtherAnswers = noShares - yesShares;
        const yesAmount = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool, p: 0.5 }, yesShares, 'YES', unfilledBetsByAnswer[id] ?? [], balanceByUserId);
        const noAmounts = answersWithoutAnswerToSell.map(({ id, poolYes, poolNo }) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, noSharesInOtherAnswers, 'NO', unfilledBetsByAnswer[id] ?? [], balanceByUserId));
        const yesResult = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'YES', yesAmount, limitProb, unfilledBetsByAnswer[id] ?? [], balanceByUserId);
        const noResults = answersWithoutAnswerToSell.map((answer, i) => {
            const noAmount = noAmounts[i];
            const pool = { YES: answer.poolYes, NO: answer.poolNo };
            return {
                ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'NO', noAmount, undefined, unfilledBetsByAnswer[answer.id] ?? [], balanceByUserId),
                answer,
            };
        });
        const newPools = [
            yesResult.cpmmState.pool,
            ...noResults.map((r) => r.cpmmState.pool),
        ];
        const diff = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)) - 1;
        return diff;
    });
    const noSharesInOtherAnswers = noShares - yesShares;
    const yesAmount = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool, p: 0.5 }, yesShares, 'YES', unfilledBetsByAnswer[id] ?? [], balanceByUserId);
    const noAmounts = answersWithoutAnswerToSell.map(({ id, poolYes, poolNo }) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, noSharesInOtherAnswers, 'NO', unfilledBetsByAnswer[id] ?? [], balanceByUserId));
    const yesBetResult = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'YES', yesAmount, limitProb, unfilledBetsByAnswer[id] ?? [], balanceByUserId);
    const noBetResults = answersWithoutAnswerToSell.map((answer, i) => {
        const noAmount = noAmounts[i];
        const pool = { YES: answer.poolYes, NO: answer.poolNo };
        return {
            ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'NO', noAmount, undefined, unfilledBetsByAnswer[answer.id] ?? [], balanceByUserId),
            answer,
        };
    });
    const redeemedMana = noSharesInOtherAnswers * (answers.length - 2);
    const netNoAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(noAmounts) - redeemedMana;
    const now = Date.now();
    for (const noBetResult of noBetResults) {
        const redemptionFill = {
            matchedBetId: null,
            amount: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'amount'),
            shares: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'shares'),
            timestamp: now,
        };
        noBetResult.takers.push(redemptionFill);
    }
    yesBetResult.takers.push({
        matchedBetId: null,
        amount: netNoAmount,
        shares: noSharesInOtherAnswers,
        timestamp: now,
    });
    if (DEBUG) {
        const endTime = Date.now();
        const newPools = [
            ...noBetResults.map((r) => r.cpmmState.pool),
            yesBetResult.cpmmState.pool,
        ];
        console.log('time', endTime - startTime, 'ms');
        console.log('no shares to sell', noShares, 'no bet amounts', noBetResults.map((r) => r.takers.map((t) => t.amount)), 'yes bet amount', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'amount'));
        console.log('getBinaryBuyYes before', answers.map((a) => a.prob), answers.map((a) => `${a.poolYes}, ${a.poolNo}`), 'answerToBuy', answerToSell);
        console.log('getBinaryBuyYes after', newPools, newPools.map((pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'prob total', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'pool shares', newPools.map((pool) => `${pool.YES}, ${pool.NO}`), 'no shares', noShares, 'yes shares', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'shares'));
    }
    const newBetResult = { ...yesBetResult, outcome: 'YES' };
    const otherBetResults = noBetResults.map((r) => ({ ...r, outcome: 'NO' }));
    return { newBetResult, otherBetResults };
}
/*LOG2   */ const calculateCpmmMultiArbitrageSellNo = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmMultiArbitrageSellNo()', github_file_url, 502), _calculateCpmmMultiArbitrageSellNo);
/*WRAPPED*/ function _calculateCpmmMultiArbitrageSellYes(answers, answerToSell, yesShares, limitProb, unfilledBets, balanceByUserId) {
    const startTime = Date.now();
    const unfilledBetsByAnswer = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(unfilledBets, (bet) => bet.answerId);
    const { id, poolYes, poolNo } = answerToSell;
    const pool = { YES: poolYes, NO: poolNo };
    const answersWithoutAnswerToSell = answers.filter((a) => a.id !== answerToSell.id);
    const noShares = (0,_util_algos__WEBPACK_IMPORTED_MODULE_3__.binarySearch)(0, yesShares, (noShares) => {
        const yesSharesInOtherAnswers = yesShares - noShares;
        const noAmount = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool, p: 0.5 }, noShares, 'NO', unfilledBetsByAnswer[id] ?? [], balanceByUserId);
        const yesAmounts = answersWithoutAnswerToSell.map(({ id, poolYes, poolNo }) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, yesSharesInOtherAnswers, 'YES', unfilledBetsByAnswer[id] ?? [], balanceByUserId));
        const noResult = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'NO', noAmount, limitProb, unfilledBetsByAnswer[id] ?? [], balanceByUserId);
        const yesResults = answersWithoutAnswerToSell.map((answer, i) => {
            const yesAmount = yesAmounts[i];
            const pool = { YES: answer.poolYes, NO: answer.poolNo };
            return {
                ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'YES', yesAmount, undefined, unfilledBetsByAnswer[answer.id] ?? [], balanceByUserId),
                answer,
            };
        });
        const newPools = [
            noResult.cpmmState.pool,
            ...yesResults.map((r) => r.cpmmState.pool),
        ];
        const diff = 1 - (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5));
        return diff;
    });
    const yesSharesInOtherAnswers = yesShares - noShares;
    const noAmount = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool, p: 0.5 }, noShares, 'NO', unfilledBetsByAnswer[id] ?? [], balanceByUserId);
    const yesAmounts = answersWithoutAnswerToSell.map(({ id, poolYes, poolNo }) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateAmountToBuySharesFixedP)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, yesSharesInOtherAnswers, 'YES', unfilledBetsByAnswer[id] ?? [], balanceByUserId));
    const noBetResult = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'NO', noAmount, limitProb, unfilledBetsByAnswer[id] ?? [], balanceByUserId);
    const yesBetResults = answersWithoutAnswerToSell.map((answer, i) => {
        const yesAmount = yesAmounts[i];
        const pool = { YES: answer.poolYes, NO: answer.poolNo };
        return {
            ...(0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)({ pool, p: 0.5 }, 'YES', yesAmount, undefined, unfilledBetsByAnswer[answer.id] ?? [], balanceByUserId),
            answer,
        };
    });
    const totalYesAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(yesAmounts);
    const now = Date.now();
    for (const yesBetResult of yesBetResults) {
        const redemptionFill = {
            matchedBetId: null,
            amount: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'amount'),
            shares: -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBetResult.takers, 'shares'),
            timestamp: now,
        };
        yesBetResult.takers.push(redemptionFill);
    }
    noBetResult.takers.push({
        matchedBetId: null,
        amount: totalYesAmount,
        shares: yesSharesInOtherAnswers,
        timestamp: now,
    });
    if (DEBUG) {
        const endTime = Date.now();
        const newPools = [
            ...yesBetResults.map((r) => r.cpmmState.pool),
            noBetResult.cpmmState.pool,
        ];
        console.log('time', endTime - startTime, 'ms');
        console.log('no shares to sell', noShares, 'no bet amounts', yesBetResults.map((r) => r.takers.map((t) => t.amount)), 'yes bet amount', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'amount'));
        console.log('getBinaryBuyYes before', answers.map((a) => a.prob), answers.map((a) => `${a.poolYes}, ${a.poolNo}`), 'answerToBuy', answerToSell);
        console.log('getBinaryBuyYes after', newPools, newPools.map((pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'prob total', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(newPools, (pool) => (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5)), 'pool shares', newPools.map((pool) => `${pool.YES}, ${pool.NO}`), 'no shares', noShares, 'yes shares', (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBetResult.takers, 'shares'));
    }
    const newBetResult = { ...noBetResult, outcome: 'NO' };
    const otherBetResults = yesBetResults.map((r) => ({ ...r, outcome: 'YES' }));
    return { newBetResult, otherBetResults };
}
/*LOG2   */ const calculateCpmmMultiArbitrageSellYes = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmMultiArbitrageSellYes()', github_file_url, 683), _calculateCpmmMultiArbitrageSellYes);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/calculate-cpmm-multi.ts":
/*!****************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/calculate-cpmm-multi.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _buy: () => (/* binding */ _buy),
/* harmony export */   _getLiquidity: () => (/* binding */ _getLiquidity),
/* harmony export */   _getProb: () => (/* binding */ _getProb),
/* harmony export */   _poolToProbs: () => (/* binding */ _poolToProbs),
/* harmony export */   _sell: () => (/* binding */ _sell),
/* harmony export */   _shortSell: () => (/* binding */ _shortSell),
/* harmony export */   _test: () => (/* binding */ _test),
/* harmony export */   buy: () => (/* binding */ buy),
/* harmony export */   getLiquidity: () => (/* binding */ getLiquidity),
/* harmony export */   getProb: () => (/* binding */ getProb),
/* harmony export */   poolToProbs: () => (/* binding */ poolToProbs),
/* harmony export */   sell: () => (/* binding */ sell),
/* harmony export */   shortSell: () => (/* binding */ shortSell),
/* harmony export */   test: () => (/* binding */ test)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _util_algos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/algos */ "./src/ts/lib/manifold/common/src/util/algos.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/calculate-cpmm-multi.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/calculate-cpmm-multi.ts';


// NOTE: The mechanism defined in this file (cpmm-2 multiple choice) is deprecated!
// TODO: Remove min pool shares. Switch to throwing an error if k invariant is violated.
const MIN_POOL_SHARES = 1e-20;
/*WRAPPED*/ function _getProb(pool, outcome) {
    if (pool[outcome] === undefined)
        throw new Error('Invalid outcome');
    const inverseShareSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.values(pool), (value) => 1 / value);
    return 1 / (pool[outcome] * inverseShareSum);
}
/*LOG2   */ const getProb = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getProb()', github_file_url, 9), _getProb);
/*WRAPPED*/ function _poolToProbs(pool) {
    const inverseShareSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.values(pool), (value) => 1 / value);
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(pool, (s) => 1 / (s * inverseShareSum));
}
/*LOG2   */ const poolToProbs = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('poolToProbs()', github_file_url, 16), _poolToProbs);
/*WRAPPED*/ const _getK = (pool) => {
    const values = Object.values(pool);
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(values, Math.log);
};
/*LOG2   */ const getK = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getK()', github_file_url, 21), _getK);
/*WRAPPED*/ const _getLiquidity = (pool) => {
    return Math.exp(getK(pool) / Object.keys(pool).length);
};
/*LOG2   */ const getLiquidity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getLiquidity()', github_file_url, 26), _getLiquidity);
/*WRAPPED*/ function _buy(pool, outcome, amount) {
    if (amount < 0)
        throw new Error('Amount must be non-negative');
    if (pool[outcome] === undefined)
        throw new Error('Invalid outcome');
    const k = getK(pool);
    const tempPool = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(pool, (s) => s + amount);
    const maxShares = tempPool[outcome];
    delete tempPool[outcome];
    const kMissingOutcome = getK(tempPool);
    const shares = maxShares - Math.exp(k - kMissingOutcome);
    const newShares = maxShares - shares;
    tempPool[outcome] = Math.max(MIN_POOL_SHARES, newShares);
    const newPool = tempPool;
    return { newPool, shares };
}
/*LOG2   */ const buy = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('buy()', github_file_url, 30), _buy);
/*WRAPPED*/ function _sell(pool, outcome, shares) {
    if (shares < 0)
        throw new Error('Shares must be non-negative');
    if (pool[outcome] === undefined)
        throw new Error('Invalid outcome');
    const k = getK(pool);
    const poolWithShares = { ...pool, [outcome]: pool[outcome] + shares };
    const saleAmount = (0,_util_algos__WEBPACK_IMPORTED_MODULE_2__.binarySearch)(0, shares, (saleAmount) => {
        const poolAfterSale = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(poolWithShares, (s) => Math.max(MIN_POOL_SHARES, s - saleAmount));
        const kAfterSale = getK(poolAfterSale);
        return k - kAfterSale;
    });
    const newPool = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(poolWithShares, (s) => Math.max(MIN_POOL_SHARES, s - saleAmount));
    return { newPool, saleAmount };
}
/*LOG2   */ const sell = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('sell()', github_file_url, 56), _sell);
/*WRAPPED*/ function _shortSell(pool, outcome, amount) {
    if (amount < 0)
        throw new Error('Amount must be non-negative');
    if (pool[outcome] === undefined)
        throw new Error('Invalid outcome');
    const k = getK(pool);
    const poolWithAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(pool, (s) => s + amount);
    const minOutcome = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.minBy)(Object.keys(poolWithAmount), (o) => o === outcome ? Infinity : poolWithAmount[o]);
    const maxShares = poolWithAmount[minOutcome];
    const shares = (0,_util_algos__WEBPACK_IMPORTED_MODULE_2__.binarySearch)(amount, maxShares, (shares) => {
        const poolAfterPurchase = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(poolWithAmount, (s, o) => o === outcome ? s : Math.max(MIN_POOL_SHARES, s - shares));
        const kAfterSale = getK(poolAfterPurchase);
        return k - kAfterSale;
    });
    const newPool = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(poolWithAmount, (s, o) => o === outcome ? s : Math.max(MIN_POOL_SHARES, s - shares));
    const gainedShares = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(newPool, (s, o) => poolWithAmount[o] - s);
    return { newPool, gainedShares };
}
/*LOG2   */ const shortSell = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('shortSell()', github_file_url, 84), _shortSell);
/*WRAPPED*/ function _test() {
    const pool = {
        A: 100,
        B: 100,
        C: 100,
    };
    console.log('START');
    console.log('pool', pool, 'k', getK(pool), 'probs', poolToProbs(pool));
    const { newPool: poolAfterShortSell, shares } = buy(pool, 'C', 100000000);
    console.log('after buy', shares, 'pool', poolAfterShortSell, 'probs', poolToProbs(poolAfterShortSell));
    console.log('k', getK(poolAfterShortSell));
    console.log('liquidity', getLiquidity(poolAfterShortSell));
}
/*LOG2   */ const test = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('test()', github_file_url, 118), _test);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/calculate-cpmm.ts":
/*!**********************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/calculate-cpmm.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _addCpmmLiquidity: () => (/* binding */ _addCpmmLiquidity),
/* harmony export */   _addCpmmLiquidityFixedP: () => (/* binding */ _addCpmmLiquidityFixedP),
/* harmony export */   _addCpmmMultiLiquidityAnswersSumToOne: () => (/* binding */ _addCpmmMultiLiquidityAnswersSumToOne),
/* harmony export */   _addCpmmMultiLiquidityToAnswersIndependently: () => (/* binding */ _addCpmmMultiLiquidityToAnswersIndependently),
/* harmony export */   _calculateAmountToBuyShares: () => (/* binding */ _calculateAmountToBuyShares),
/* harmony export */   _calculateAmountToBuySharesFixedP: () => (/* binding */ _calculateAmountToBuySharesFixedP),
/* harmony export */   _calculateCpmmAmountToBuySharesFixedP: () => (/* binding */ _calculateCpmmAmountToBuySharesFixedP),
/* harmony export */   _calculateCpmmAmountToProb: () => (/* binding */ _calculateCpmmAmountToProb),
/* harmony export */   _calculateCpmmMultiSumsToOneSale: () => (/* binding */ _calculateCpmmMultiSumsToOneSale),
/* harmony export */   _calculateCpmmPurchase: () => (/* binding */ _calculateCpmmPurchase),
/* harmony export */   _calculateCpmmSale: () => (/* binding */ _calculateCpmmSale),
/* harmony export */   _calculateCpmmSharesAfterFee: () => (/* binding */ _calculateCpmmSharesAfterFee),
/* harmony export */   _getCpmmFees: () => (/* binding */ _getCpmmFees),
/* harmony export */   _getCpmmLiquidity: () => (/* binding */ _getCpmmLiquidity),
/* harmony export */   _getCpmmLiquidityPoolWeights: () => (/* binding */ _getCpmmLiquidityPoolWeights),
/* harmony export */   _getCpmmOutcomeProbabilityAfterBet: () => (/* binding */ _getCpmmOutcomeProbabilityAfterBet),
/* harmony export */   _getCpmmProbability: () => (/* binding */ _getCpmmProbability),
/* harmony export */   _getCpmmProbabilityAfterBetBeforeFees: () => (/* binding */ _getCpmmProbabilityAfterBetBeforeFees),
/* harmony export */   _getCpmmProbabilityAfterSale: () => (/* binding */ _getCpmmProbabilityAfterSale),
/* harmony export */   _getMultiCpmmLiquidity: () => (/* binding */ _getMultiCpmmLiquidity),
/* harmony export */   _getUserLiquidityShares: () => (/* binding */ _getUserLiquidityShares),
/* harmony export */   addCpmmLiquidity: () => (/* binding */ addCpmmLiquidity),
/* harmony export */   addCpmmLiquidityFixedP: () => (/* binding */ addCpmmLiquidityFixedP),
/* harmony export */   addCpmmMultiLiquidityAnswersSumToOne: () => (/* binding */ addCpmmMultiLiquidityAnswersSumToOne),
/* harmony export */   addCpmmMultiLiquidityToAnswersIndependently: () => (/* binding */ addCpmmMultiLiquidityToAnswersIndependently),
/* harmony export */   calculateAmountToBuyShares: () => (/* binding */ calculateAmountToBuyShares),
/* harmony export */   calculateAmountToBuySharesFixedP: () => (/* binding */ calculateAmountToBuySharesFixedP),
/* harmony export */   calculateCpmmAmountToBuySharesFixedP: () => (/* binding */ calculateCpmmAmountToBuySharesFixedP),
/* harmony export */   calculateCpmmAmountToProb: () => (/* binding */ calculateCpmmAmountToProb),
/* harmony export */   calculateCpmmMultiSumsToOneSale: () => (/* binding */ calculateCpmmMultiSumsToOneSale),
/* harmony export */   calculateCpmmPurchase: () => (/* binding */ calculateCpmmPurchase),
/* harmony export */   calculateCpmmSale: () => (/* binding */ calculateCpmmSale),
/* harmony export */   calculateCpmmSharesAfterFee: () => (/* binding */ calculateCpmmSharesAfterFee),
/* harmony export */   getCpmmFees: () => (/* binding */ getCpmmFees),
/* harmony export */   getCpmmLiquidity: () => (/* binding */ getCpmmLiquidity),
/* harmony export */   getCpmmLiquidityPoolWeights: () => (/* binding */ getCpmmLiquidityPoolWeights),
/* harmony export */   getCpmmOutcomeProbabilityAfterBet: () => (/* binding */ getCpmmOutcomeProbabilityAfterBet),
/* harmony export */   getCpmmProbability: () => (/* binding */ getCpmmProbability),
/* harmony export */   getCpmmProbabilityAfterBetBeforeFees: () => (/* binding */ getCpmmProbabilityAfterBetBeforeFees),
/* harmony export */   getCpmmProbabilityAfterSale: () => (/* binding */ getCpmmProbabilityAfterSale),
/* harmony export */   getMultiCpmmLiquidity: () => (/* binding */ getMultiCpmmLiquidity),
/* harmony export */   getUserLiquidityShares: () => (/* binding */ getUserLiquidityShares)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fees */ "./src/ts/lib/manifold/common/src/fees.ts");
/* harmony import */ var _new_bet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./new-bet */ "./src/ts/lib/manifold/common/src/new-bet.ts");
/* harmony import */ var _util_algos__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/algos */ "./src/ts/lib/manifold/common/src/util/algos.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/math */ "./src/ts/lib/manifold/common/src/util/math.ts");
/* harmony import */ var _calculate_cpmm_arbitrage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./calculate-cpmm-arbitrage */ "./src/ts/lib/manifold/common/src/calculate-cpmm-arbitrage.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/calculate-cpmm.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/calculate-cpmm.ts';






/*WRAPPED*/ function _getCpmmProbability(pool, p) {
    const { YES, NO } = pool;
    return (p * NO) / ((1 - p) * YES + p * NO);
}
/*LOG2   */ const getCpmmProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmProbability()', github_file_url, 20), _getCpmmProbability);
/*WRAPPED*/ function _getCpmmProbabilityAfterBetBeforeFees(state, outcome, bet) {
    const { pool, p } = state;
    const shares = calculateCpmmShares(pool, p, bet, outcome);
    const { YES: y, NO: n } = pool;
    const [newY, newN] = outcome === 'YES'
        ? [y - shares + bet, n + bet]
        : [y + bet, n - shares + bet];
    return getCpmmProbability({ YES: newY, NO: newN }, p);
}
/*LOG2   */ const getCpmmProbabilityAfterBetBeforeFees = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmProbabilityAfterBetBeforeFees()', github_file_url, 28), _getCpmmProbabilityAfterBetBeforeFees);
/*WRAPPED*/ function _getCpmmOutcomeProbabilityAfterBet(state, outcome, bet) {
    const { newPool } = calculateCpmmPurchase(state, bet, outcome);
    const p = getCpmmProbability(newPool, state.p);
    return outcome === 'NO' ? 1 - p : p;
}
/*LOG2   */ const getCpmmOutcomeProbabilityAfterBet = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmOutcomeProbabilityAfterBet()', github_file_url, 45), _getCpmmOutcomeProbabilityAfterBet);
// before liquidity fee
/*WRAPPED*/ function _calculateCpmmShares(pool, p, bet, betChoice) {
    if (bet === 0)
        return 0;
    const { YES: y, NO: n } = pool;
    const k = y ** p * n ** (1 - p);
    return betChoice === 'YES'
        ? // https://www.wolframalpha.com/input?i=%28y%2Bb-s%29%5E%28p%29*%28n%2Bb%29%5E%281-p%29+%3D+k%2C+solve+s
            y + bet - (k * (bet + n) ** (p - 1)) ** (1 / p)
        : n + bet - (k * (bet + y) ** -p) ** (1 / (1 - p));
}
/*LOG2   */ const calculateCpmmShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmShares()', github_file_url, 56), _calculateCpmmShares);
/*WRAPPED*/ function _getCpmmFees(state, bet, outcome) {
    const prob = getCpmmProbabilityAfterBetBeforeFees(state, outcome, bet);
    const betP = outcome === 'YES' ? 1 - prob : prob;
    const liquidityFee = _fees__WEBPACK_IMPORTED_MODULE_2__.LIQUIDITY_FEE * betP * bet;
    const platformFee = _fees__WEBPACK_IMPORTED_MODULE_2__.PLATFORM_FEE * betP * bet;
    const creatorFee = _fees__WEBPACK_IMPORTED_MODULE_2__.CREATOR_FEE * betP * bet;
    const fees = { liquidityFee, platformFee, creatorFee };
    const totalFees = liquidityFee + platformFee + creatorFee;
    const remainingBet = bet - totalFees;
    return { remainingBet, totalFees, fees };
}
/*LOG2   */ const getCpmmFees = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmFees()', github_file_url, 75), _getCpmmFees);
/*WRAPPED*/ function _calculateCpmmSharesAfterFee(state, bet, outcome) {
    const { pool, p } = state;
    const { remainingBet } = getCpmmFees(state, bet, outcome);
    return calculateCpmmShares(pool, p, remainingBet, outcome);
}
/*LOG2   */ const calculateCpmmSharesAfterFee = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmSharesAfterFee()', github_file_url, 90), _calculateCpmmSharesAfterFee);
/*WRAPPED*/ function _calculateCpmmPurchase(state, bet, outcome) {
    const { pool, p } = state;
    const { remainingBet, fees } = getCpmmFees(state, bet, outcome);
    const shares = calculateCpmmShares(pool, p, remainingBet, outcome);
    const { YES: y, NO: n } = pool;
    const { liquidityFee: fee } = fees;
    const [newY, newN] = outcome === 'YES'
        ? [y - shares + remainingBet + fee, n + remainingBet + fee]
        : [y + remainingBet + fee, n - shares + remainingBet + fee];
    const postBetPool = { YES: newY, NO: newN };
    const { newPool, newP } = addCpmmLiquidity(postBetPool, p, fee);
    return { shares, newPool, newP, fees };
}
/*LOG2   */ const calculateCpmmPurchase = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmPurchase()', github_file_url, 101), _calculateCpmmPurchase);
/*WRAPPED*/ function _calculateCpmmAmountToProb(state, prob, outcome) {
    if (prob <= 0 || prob >= 1 || isNaN(prob))
        return Infinity;
    if (outcome === 'NO')
        prob = 1 - prob;
    const { pool, p } = state;
    const { YES: y, NO: n } = pool;
    const k = y ** p * n ** (1 - p);
    return outcome === 'YES'
        ? // https://www.wolframalpha.com/input?i=-1+%2B+t+-+((-1+%2B+p)+t+(k%2F(n+%2B+b))^(1%2Fp))%2Fp+solve+b
            ((p * (prob - 1)) / ((p - 1) * prob)) ** -p *
                (k - n * ((p * (prob - 1)) / ((p - 1) * prob)) ** p)
        : (((1 - p) * (prob - 1)) / (-p * prob)) ** (p - 1) *
            (k - y * (((1 - p) * (prob - 1)) / (-p * prob)) ** (1 - p));
}
/*LOG2   */ const calculateCpmmAmountToProb = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmAmountToProb()', github_file_url, 126), _calculateCpmmAmountToProb);
/*WRAPPED*/ function _calculateCpmmAmountToBuySharesFixedP(state, shares, outcome) {
    if (!(0,_util_math__WEBPACK_IMPORTED_MODULE_5__.floatingEqual)(state.p, 0.5)) {
        throw new Error('calculateAmountToBuySharesFixedP only works for p = 0.5, got ' + state.p);
    }
    const { YES: y, NO: n } = state.pool;
    if (outcome === 'YES') {
        // https://www.wolframalpha.com/input?i=%28y%2Bb-s%29%5E0.5+*+%28n%2Bb%29%5E0.5+%3D+y+%5E+0.5+*+n+%5E+0.5%2C+solve+b
        return ((shares - y - n + Math.sqrt(4 * n * shares + (y + n - shares) ** 2)) / 2);
    }
    return ((shares - y - n + Math.sqrt(4 * y * shares + (y + n - shares) ** 2)) / 2);
}
/*LOG2   */ const calculateCpmmAmountToBuySharesFixedP = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmAmountToBuySharesFixedP()', github_file_url, 145), _calculateCpmmAmountToBuySharesFixedP);
// Faster version assuming p = 0.5
/*WRAPPED*/ function _calculateAmountToBuySharesFixedP(state, shares, outcome, unfilledBets, balanceByUserId) {
    const maxAmount = shares;
    const { takers } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_3__.computeFills)(state, outcome, maxAmount, undefined, unfilledBets, balanceByUserId);
    let currShares = 0;
    let currAmount = 0;
    for (const fill of takers) {
        const { amount: fillAmount, shares: fillShares, matchedBetId } = fill;
        if ((0,_util_math__WEBPACK_IMPORTED_MODULE_5__.floatingEqual)(currShares + fillShares, shares)) {
            return currAmount + fillAmount;
        }
        if (currShares + fillShares > shares) {
            // First fill that goes over the required shares.
            if (matchedBetId) {
                // Match a portion of the fill to get the exact shares.
                const remainingShares = shares - currShares;
                const remainingAmount = fillAmount * (remainingShares / fillShares);
                return currAmount + remainingAmount;
            }
            // Last fill was from AMM. Break to compute the cpmmState at this point.
            break;
        }
        currShares += fillShares;
        currAmount += fillAmount;
    }
    const remaningShares = shares - currShares;
    // Recompute up to currAmount to get the current cpmmState.
    const { cpmmState } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_3__.computeFills)(state, outcome, currAmount, undefined, unfilledBets, balanceByUserId);
    const fillAmount = calculateCpmmAmountToBuySharesFixedP(cpmmState, remaningShares, outcome);
    return currAmount + fillAmount;
}
/*LOG2   */ const calculateAmountToBuySharesFixedP = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateAmountToBuySharesFixedP()', github_file_url, 169), _calculateAmountToBuySharesFixedP);
/*WRAPPED*/ function _calculateCpmmMultiSumsToOneSale(answers, answerToSell, shares, outcome, limitProb, unfilledBets, balanceByUserId) {
    if (Math.round(shares) < 0) {
        throw new Error('Cannot sell non-positive shares');
    }
    const { newBetResult, otherBetResults } = outcome === 'YES'
        ? (0,_calculate_cpmm_arbitrage__WEBPACK_IMPORTED_MODULE_6__.calculateCpmmMultiArbitrageSellYes)(answers, answerToSell, shares, limitProb, unfilledBets, balanceByUserId)
        : (0,_calculate_cpmm_arbitrage__WEBPACK_IMPORTED_MODULE_6__.calculateCpmmMultiArbitrageSellNo)(answers, answerToSell, shares, limitProb, unfilledBets, balanceByUserId);
    // Transform buys of opposite outcome into sells.
    const saleTakers = newBetResult.takers.map((taker) => ({
        ...taker,
        // You bought opposite shares, which combine with existing shares, removing them.
        shares: -taker.shares,
        // Opposite shares combine with shares you are selling for Ṁ of shares.
        // You paid taker.amount for the opposite shares.
        // Take the negative because this is money you gain.
        amount: -(taker.shares - taker.amount),
        isSale: true,
    }));
    const saleValue = -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(saleTakers, (taker) => taker.amount);
    const transformedNewBetResult = {
        ...newBetResult,
        takers: saleTakers,
        outcome,
    };
    return {
        saleValue,
        newBetResult: transformedNewBetResult,
        otherBetResults,
    };
}
/*LOG2   */ const calculateCpmmMultiSumsToOneSale = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmMultiSumsToOneSale()', github_file_url, 229), _calculateCpmmMultiSumsToOneSale);
/*WRAPPED*/ function _calculateAmountToBuyShares(state, shares, outcome, unfilledBets, balanceByUserId) {
    const prob = getCpmmProbability(state.pool, state.p);
    const minAmount = shares * (outcome === 'YES' ? prob : 1 - prob);
    // Search for amount between bounds.
    // Min share price is based on current probability, and max is Ṁ1 each.
    return (0,_util_algos__WEBPACK_IMPORTED_MODULE_4__.binarySearch)(minAmount, shares, (amount) => {
        const { takers } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_3__.computeFills)(state, outcome, amount, undefined, unfilledBets, balanceByUserId);
        const totalShares = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(takers, (taker) => taker.shares);
        return totalShares - shares;
    });
}
/*LOG2   */ const calculateAmountToBuyShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateAmountToBuyShares()', github_file_url, 288), _calculateAmountToBuyShares);
/*WRAPPED*/ function _calculateCpmmSale(state, shares, outcome, unfilledBets, balanceByUserId) {
    if (Math.round(shares) < 0) {
        throw new Error('Cannot sell non-positive shares');
    }
    const oppositeOutcome = outcome === 'YES' ? 'NO' : 'YES';
    const buyAmount = calculateAmountToBuyShares(state, shares, oppositeOutcome, unfilledBets, balanceByUserId);
    const { cpmmState, makers, takers, totalFees, ordersToCancel } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_3__.computeFills)(state, oppositeOutcome, buyAmount, undefined, unfilledBets, balanceByUserId);
    // Transform buys of opposite outcome into sells.
    const saleTakers = takers.map((taker) => ({
        ...taker,
        // You bought opposite shares, which combine with existing shares, removing them.
        shares: -taker.shares,
        // Opposite shares combine with shares you are selling for Ṁ of shares.
        // You paid taker.amount for the opposite shares.
        // Take the negative because this is money you gain.
        amount: -(taker.shares - taker.amount),
        isSale: true,
    }));
    const saleValue = -(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(saleTakers, (taker) => taker.amount);
    return {
        saleValue,
        cpmmState,
        fees: totalFees,
        makers,
        takers: saleTakers,
        ordersToCancel,
    };
}
/*LOG2   */ const calculateCpmmSale = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateCpmmSale()', github_file_url, 315), _calculateCpmmSale);
/*WRAPPED*/ function _getCpmmProbabilityAfterSale(state, shares, outcome, unfilledBets, balanceByUserId) {
    const { cpmmState } = calculateCpmmSale(state, shares, outcome, unfilledBets, balanceByUserId);
    return getCpmmProbability(cpmmState.pool, cpmmState.p);
}
/*LOG2   */ const getCpmmProbabilityAfterSale = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmProbabilityAfterSale()', github_file_url, 368), _getCpmmProbabilityAfterSale);
/*WRAPPED*/ function _getCpmmLiquidity(pool, p) {
    const { YES, NO } = pool;
    return YES ** p * NO ** (1 - p);
}
/*LOG2   */ const getCpmmLiquidity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmLiquidity()', github_file_url, 385), _getCpmmLiquidity);
/*WRAPPED*/ function _getMultiCpmmLiquidity(pool) {
    return getCpmmLiquidity(pool, 0.5);
}
/*LOG2   */ const getMultiCpmmLiquidity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getMultiCpmmLiquidity()', github_file_url, 393), _getMultiCpmmLiquidity);
/*WRAPPED*/ function _addCpmmLiquidity(pool, p, amount) {
    const prob = getCpmmProbability(pool, p);
    //https://www.wolframalpha.com/input?i=p%28n%2Bb%29%2F%28%281-p%29%28y%2Bb%29%2Bp%28n%2Bb%29%29%3Dq%2C+solve+p
    const { YES: y, NO: n } = pool;
    const numerator = prob * (amount + y);
    const denominator = amount - n * (prob - 1) + prob * y;
    const newP = numerator / denominator;
    const newPool = { YES: y + amount, NO: n + amount };
    const oldLiquidity = getCpmmLiquidity(pool, newP);
    const newLiquidity = getCpmmLiquidity(newPool, newP);
    const liquidity = newLiquidity - oldLiquidity;
    return { newPool, liquidity, newP };
}
/*LOG2   */ const addCpmmLiquidity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('addCpmmLiquidity()', github_file_url, 397), _addCpmmLiquidity);
/*WRAPPED*/ function _addCpmmLiquidityFixedP(pool, amount) {
    const prob = getCpmmProbability(pool, 0.5);
    const newPool = { ...pool };
    const sharesThrownAway = { YES: 0, NO: 0 };
    // Throws away some shares so that prob is maintained.
    if (prob < 0.5) {
        newPool.YES += amount;
        newPool.NO += (prob / (1 - prob)) * amount;
        sharesThrownAway.NO = amount - (prob / (1 - prob)) * amount;
    }
    else {
        newPool.NO += amount;
        newPool.YES += ((1 - prob) / prob) * amount;
        sharesThrownAway.YES = amount - ((1 - prob) / prob) * amount;
    }
    const oldLiquidity = getMultiCpmmLiquidity(pool);
    const newLiquidity = getMultiCpmmLiquidity(newPool);
    const liquidity = newLiquidity - oldLiquidity;
    return { newPool, liquidity, sharesThrownAway };
}
/*LOG2   */ const addCpmmLiquidityFixedP = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('addCpmmLiquidityFixedP()', github_file_url, 419), _addCpmmLiquidityFixedP);
/*WRAPPED*/ function _addCpmmMultiLiquidityToAnswersIndependently(pools, amount) {
    const amountPerAnswer = amount / Object.keys(pools).length;
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(pools, (pool) => addCpmmLiquidityFixedP(pool, amountPerAnswer).newPool);
}
/*LOG2   */ const addCpmmMultiLiquidityToAnswersIndependently = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('addCpmmMultiLiquidityToAnswersIndependently()', github_file_url, 445), _addCpmmMultiLiquidityToAnswersIndependently);
/*WRAPPED*/ function _addCpmmMultiLiquidityAnswersSumToOne(pools, amount) {
    const answerIds = Object.keys(pools);
    const numAnswers = answerIds.length;
    const newPools = { ...pools };
    let amountRemaining = amount;
    while (amountRemaining > _util_math__WEBPACK_IMPORTED_MODULE_5__.EPSILON) {
        const yesSharesThrownAway = Object.fromEntries(answerIds.map((answerId) => [answerId, 0]));
        for (const [answerId, pool] of Object.entries(newPools)) {
            const { newPool, sharesThrownAway } = addCpmmLiquidityFixedP(pool, amountRemaining / numAnswers);
            newPools[answerId] = newPool;
            yesSharesThrownAway[answerId] += sharesThrownAway.YES;
            const otherAnswerIds = answerIds.filter((id) => id !== answerId);
            for (const otherAnswerId of otherAnswerIds) {
                // Convert NO shares into YES shares for each other answer.
                yesSharesThrownAway[otherAnswerId] += sharesThrownAway.NO;
            }
        }
        const minSharesThrownAway = Math.min(...Object.values(yesSharesThrownAway));
        console.log('amount remaining', amountRemaining, 'yes shares thrown away', yesSharesThrownAway, 'min', minSharesThrownAway);
        amountRemaining = minSharesThrownAway;
    }
    return newPools;
}
/*LOG2   */ const addCpmmMultiLiquidityAnswersSumToOne = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('addCpmmMultiLiquidityAnswersSumToOne()', github_file_url, 456), _addCpmmMultiLiquidityAnswersSumToOne);
/*WRAPPED*/ function _getCpmmLiquidityPoolWeights(liquidities) {
    const userAmounts = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(liquidities, (w) => w.userId);
    const totalAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(liquidities, (w) => w.amount);
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(userAmounts, (amounts) => (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(amounts, (w) => w.amount) / totalAmount);
}
/*LOG2   */ const getCpmmLiquidityPoolWeights = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmLiquidityPoolWeights()', github_file_url, 499), _getCpmmLiquidityPoolWeights);
/*WRAPPED*/ function _getUserLiquidityShares(userId, pool, liquidities) {
    const weights = getCpmmLiquidityPoolWeights(liquidities);
    const userWeight = weights[userId] ?? 0;
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(pool, (shares) => userWeight * shares);
}
/*LOG2   */ const getUserLiquidityShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getUserLiquidityShares()', github_file_url, 509), _getUserLiquidityShares);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/calculate-dpm.ts":
/*!*********************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/calculate-dpm.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _calcDpmInitialPool: () => (/* binding */ _calcDpmInitialPool),
/* harmony export */   _calculateDpmMoneyRatio: () => (/* binding */ _calculateDpmMoneyRatio),
/* harmony export */   _calculateDpmPayout: () => (/* binding */ _calculateDpmPayout),
/* harmony export */   _calculateDpmPayoutAfterCorrectBet: () => (/* binding */ _calculateDpmPayoutAfterCorrectBet),
/* harmony export */   _calculateDpmRawShareValue: () => (/* binding */ _calculateDpmRawShareValue),
/* harmony export */   _calculateDpmSaleAmount: () => (/* binding */ _calculateDpmSaleAmount),
/* harmony export */   _calculateDpmShareValue: () => (/* binding */ _calculateDpmShareValue),
/* harmony export */   _calculateDpmShares: () => (/* binding */ _calculateDpmShares),
/* harmony export */   _calculateStandardDpmPayout: () => (/* binding */ _calculateStandardDpmPayout),
/* harmony export */   _deductDpmFees: () => (/* binding */ _deductDpmFees),
/* harmony export */   _getDpmOutcomeProbabilities: () => (/* binding */ _getDpmOutcomeProbabilities),
/* harmony export */   _getDpmOutcomeProbability: () => (/* binding */ _getDpmOutcomeProbability),
/* harmony export */   _getDpmOutcomeProbabilityAfterBet: () => (/* binding */ _getDpmOutcomeProbabilityAfterBet),
/* harmony export */   _getDpmProbability: () => (/* binding */ _getDpmProbability),
/* harmony export */   _getDpmProbabilityAfterSale: () => (/* binding */ _getDpmProbabilityAfterSale),
/* harmony export */   calcDpmInitialPool: () => (/* binding */ calcDpmInitialPool),
/* harmony export */   calculateDpmMoneyRatio: () => (/* binding */ calculateDpmMoneyRatio),
/* harmony export */   calculateDpmPayout: () => (/* binding */ calculateDpmPayout),
/* harmony export */   calculateDpmPayoutAfterCorrectBet: () => (/* binding */ calculateDpmPayoutAfterCorrectBet),
/* harmony export */   calculateDpmRawShareValue: () => (/* binding */ calculateDpmRawShareValue),
/* harmony export */   calculateDpmSaleAmount: () => (/* binding */ calculateDpmSaleAmount),
/* harmony export */   calculateDpmShareValue: () => (/* binding */ calculateDpmShareValue),
/* harmony export */   calculateDpmShares: () => (/* binding */ calculateDpmShares),
/* harmony export */   calculateStandardDpmPayout: () => (/* binding */ calculateStandardDpmPayout),
/* harmony export */   deductDpmFees: () => (/* binding */ deductDpmFees),
/* harmony export */   getDpmOutcomeProbabilities: () => (/* binding */ getDpmOutcomeProbabilities),
/* harmony export */   getDpmOutcomeProbability: () => (/* binding */ getDpmOutcomeProbability),
/* harmony export */   getDpmOutcomeProbabilityAfterBet: () => (/* binding */ getDpmOutcomeProbabilityAfterBet),
/* harmony export */   getDpmProbability: () => (/* binding */ getDpmProbability),
/* harmony export */   getDpmProbabilityAfterSale: () => (/* binding */ getDpmProbabilityAfterSale)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fees */ "./src/ts/lib/manifold/common/src/fees.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/calculate-dpm.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/calculate-dpm.ts';


/*WRAPPED*/ function _getDpmProbability(totalShares) {
    // For binary contracts only.
    return getDpmOutcomeProbability(totalShares, 'YES');
}
/*LOG2   */ const getDpmProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getDpmProbability()', github_file_url, 6), _getDpmProbability);
/*WRAPPED*/ function _getDpmOutcomeProbability(totalShares, outcome) {
    const squareSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.values(totalShares), (shares) => shares ** 2);
    const shares = totalShares[outcome] ?? 0;
    return shares ** 2 / squareSum;
}
/*LOG2   */ const getDpmOutcomeProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getDpmOutcomeProbability()', github_file_url, 11), _getDpmOutcomeProbability);
/*WRAPPED*/ function _getDpmOutcomeProbabilities(totalShares) {
    const squareSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.values(totalShares), (shares) => shares ** 2);
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(totalShares, (shares) => shares ** 2 / squareSum);
}
/*LOG2   */ const getDpmOutcomeProbabilities = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getDpmOutcomeProbabilities()', github_file_url, 22), _getDpmOutcomeProbabilities);
/*WRAPPED*/ function _getDpmOutcomeProbabilityAfterBet(totalShares, outcome, bet) {
    const shares = calculateDpmShares(totalShares, bet, outcome);
    const prevShares = totalShares[outcome] ?? 0;
    const newTotalShares = { ...totalShares, [outcome]: prevShares + shares };
    return getDpmOutcomeProbability(newTotalShares, outcome);
}
/*LOG2   */ const getDpmOutcomeProbabilityAfterBet = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getDpmOutcomeProbabilityAfterBet()', github_file_url, 29), _getDpmOutcomeProbabilityAfterBet);
/*WRAPPED*/ function _getDpmProbabilityAfterSale(totalShares, outcome, shares) {
    const prevShares = totalShares[outcome] ?? 0;
    const newTotalShares = { ...totalShares, [outcome]: prevShares - shares };
    const predictionOutcome = outcome === 'NO' ? 'YES' : outcome;
    return getDpmOutcomeProbability(newTotalShares, predictionOutcome);
}
/*LOG2   */ const getDpmProbabilityAfterSale = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getDpmProbabilityAfterSale()', github_file_url, 44), _getDpmProbabilityAfterSale);
/*WRAPPED*/ function _calculateDpmShares(totalShares, bet, betChoice) {
    const squareSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.values(totalShares), (shares) => shares ** 2);
    const shares = totalShares[betChoice] ?? 0;
    const c = 2 * bet * Math.sqrt(squareSum);
    return Math.sqrt(bet ** 2 + shares ** 2 + c) - shares;
}
/*LOG2   */ const calculateDpmShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmShares()', github_file_url, 58), _calculateDpmShares);
/*WRAPPED*/ function _calculateDpmRawShareValue(totalShares, shares, betChoice) {
    const currentValue = Math.sqrt((0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.values(totalShares), (shares) => shares ** 2));
    const postSaleValue = Math.sqrt((0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.keys(totalShares), (outcome) => outcome === betChoice
        ? Math.max(0, totalShares[outcome] - shares) ** 2
        : totalShares[outcome] ** 2));
    return currentValue - postSaleValue;
}
/*LOG2   */ const calculateDpmRawShareValue = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmRawShareValue()', github_file_url, 73), _calculateDpmRawShareValue);
/*WRAPPED*/ function _calculateDpmMoneyRatio(contract, bet, shareValue) {
    const { totalShares, totalBets, pool } = contract;
    const { outcome, amount } = bet;
    const p = getDpmOutcomeProbability(totalShares, outcome);
    const actual = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(pool)) - shareValue;
    const betAmount = p * amount;
    const expected = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(Object.keys(totalBets), (outcome) => getDpmOutcomeProbability(totalShares, outcome) *
        totalBets[outcome]) - betAmount;
    if (actual <= 0 || expected <= 0)
        return 0;
    return actual / expected;
}
/*LOG2   */ const calculateDpmMoneyRatio = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmMoneyRatio()', github_file_url, 95), _calculateDpmMoneyRatio);
/*WRAPPED*/ function _calculateDpmShareValue(contract, bet) {
    const { pool, totalShares } = contract;
    const { shares, outcome } = bet;
    const shareValue = calculateDpmRawShareValue(totalShares, shares, outcome);
    const f = calculateDpmMoneyRatio(contract, bet, shareValue);
    const myPool = pool[outcome];
    const adjShareValue = Math.min(Math.min(1, f) * shareValue, myPool);
    return adjShareValue;
}
/*LOG2   */ const calculateDpmShareValue = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmShareValue()', github_file_url, 122), _calculateDpmShareValue);
/*WRAPPED*/ function _calculateDpmSaleAmount(contract, bet) {
    const { amount } = bet;
    const winnings = calculateDpmShareValue(contract, bet);
    return deductDpmFees(amount, winnings);
}
/*LOG2   */ const calculateDpmSaleAmount = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmSaleAmount()', github_file_url, 134), _calculateDpmSaleAmount);
/*WRAPPED*/ function _calculateDpmPayout(contract, bet, outcome) {
    if (outcome === 'CANCEL')
        return calculateDpmCancelPayout(contract, bet);
    if (outcome === 'MKT')
        return calculateMktDpmPayout(contract, bet);
    return calculateStandardDpmPayout(contract, bet, outcome);
}
/*LOG2   */ const calculateDpmPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmPayout()', github_file_url, 140), _calculateDpmPayout);
/*WRAPPED*/ function _calculateDpmCancelPayout(contract, bet) {
    const { totalBets, pool } = contract;
    const betTotal = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(totalBets));
    const poolTotal = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(pool));
    return (bet.amount / betTotal) * poolTotal;
}
/*LOG2   */ const calculateDpmCancelPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmCancelPayout()', github_file_url, 151), _calculateDpmCancelPayout);
/*WRAPPED*/ function _calculateStandardDpmPayout(contract, bet, outcome) {
    const { outcome: betOutcome } = bet;
    const isNumeric = contract.outcomeType === 'NUMERIC';
    if (!isNumeric && betOutcome !== outcome)
        return 0;
    const shares = isNumeric
        ? (bet.allOutcomeShares ?? {})[outcome]
        : bet.shares;
    if (!shares)
        return 0;
    const { totalShares, phantomShares, pool } = contract;
    if (!totalShares[outcome])
        return 0;
    const poolTotal = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(pool));
    const total = totalShares[outcome] - (phantomShares ? phantomShares[outcome] : 0);
    const winnings = (shares / total) * poolTotal;
    const amount = isNumeric
        ? bet.allBetAmounts[outcome]
        : bet.amount;
    const payout = amount + (1 - _fees__WEBPACK_IMPORTED_MODULE_2__.DPM_FEES) * Math.max(0, winnings - amount);
    return payout;
}
/*LOG2   */ const calculateStandardDpmPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateStandardDpmPayout()', github_file_url, 159), _calculateStandardDpmPayout);
/*WRAPPED*/ function _calculateDpmPayoutAfterCorrectBet(contract, bet) {
    const { totalShares, pool, totalBets, outcomeType } = contract;
    const { shares, amount, outcome } = bet;
    const prevShares = totalShares[outcome] ?? 0;
    const prevPool = pool[outcome] ?? 0;
    const prevTotalBet = totalBets[outcome] ?? 0;
    const newContract = {
        ...contract,
        totalShares: {
            ...totalShares,
            [outcome]: prevShares + shares,
        },
        pool: {
            ...pool,
            [outcome]: prevPool + amount,
        },
        totalBets: {
            ...totalBets,
            [outcome]: prevTotalBet + amount,
        },
        outcomeType: outcomeType === 'NUMERIC'
            ? 'FREE_RESPONSE' // hack to show payout at particular bet point estimate
            : outcomeType,
    };
    return calculateStandardDpmPayout(newContract, bet, outcome);
}
/*LOG2   */ const calculateDpmPayoutAfterCorrectBet = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateDpmPayoutAfterCorrectBet()', github_file_url, 192), _calculateDpmPayoutAfterCorrectBet);
/*WRAPPED*/ function _calculateMktDpmPayout(contract, bet) {
    if (contract.outcomeType === 'BINARY')
        return calculateBinaryMktDpmPayout(contract, bet);
    const { totalShares, pool, resolutions } = contract;
    let probs;
    if (resolutions) {
        const probTotal = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(resolutions));
        probs = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(totalShares, (_, outcome) => (resolutions[outcome] ?? 0) / probTotal);
    }
    else {
        const squareSum = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(totalShares).map((shares) => shares ** 2));
        probs = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(totalShares, (shares) => shares ** 2 / squareSum);
    }
    const { outcome, amount, shares } = bet;
    const poolFrac = (probs[outcome] * shares) / totalShares[outcome];
    const totalPool = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(pool));
    const winnings = poolFrac * totalPool;
    return deductDpmFees(amount, winnings);
}
/*LOG2   */ const calculateMktDpmPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateMktDpmPayout()', github_file_url, 226), _calculateMktDpmPayout);
/*WRAPPED*/ function _calculateBinaryMktDpmPayout(contract, bet) {
    const { resolutionProbability, totalShares, phantomShares } = contract;
    const p = resolutionProbability !== undefined
        ? resolutionProbability
        : getDpmProbability(totalShares);
    const pool = contract.pool.YES + contract.pool.NO;
    const weightedShareTotal = p * (totalShares.YES - (phantomShares?.YES ?? 0)) +
        (1 - p) * (totalShares.NO - (phantomShares?.NO ?? 0));
    const { outcome, amount, shares } = bet;
    const betP = outcome === 'YES' ? p : 1 - p;
    const winnings = ((betP * shares) / weightedShareTotal) * pool;
    return deductDpmFees(amount, winnings);
}
/*LOG2   */ const calculateBinaryMktDpmPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateBinaryMktDpmPayout()', github_file_url, 256), _calculateBinaryMktDpmPayout);
/*WRAPPED*/ const _deductDpmFees = (betAmount, winnings) => {
    return winnings > betAmount
        ? betAmount + (1 - _fees__WEBPACK_IMPORTED_MODULE_2__.DPM_FEES) * (winnings - betAmount)
        : winnings;
};
/*LOG2   */ const deductDpmFees = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('deductDpmFees()', github_file_url, 277), _deductDpmFees);
/*WRAPPED*/ const _calcDpmInitialPool = (initialProbInt, ante, phantomAnte) => {
    const p = initialProbInt / 100.0;
    const totalAnte = phantomAnte + ante;
    const sharesYes = Math.sqrt(p * totalAnte ** 2);
    const sharesNo = Math.sqrt(totalAnte ** 2 - sharesYes ** 2);
    const poolYes = p * ante;
    const poolNo = (1 - p) * ante;
    const phantomYes = Math.sqrt(p) * phantomAnte;
    const phantomNo = Math.sqrt(1 - p) * phantomAnte;
    return { sharesYes, sharesNo, poolYes, poolNo, phantomYes, phantomNo };
};
/*LOG2   */ const calcDpmInitialPool = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calcDpmInitialPool()', github_file_url, 283), _calcDpmInitialPool);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/calculate-fixed-payouts.ts":
/*!*******************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/calculate-fixed-payouts.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _calculateFixedCancelPayout: () => (/* binding */ _calculateFixedCancelPayout),
/* harmony export */   _calculateFixedPayout: () => (/* binding */ _calculateFixedPayout),
/* harmony export */   _calculateFixedPayoutMulti: () => (/* binding */ _calculateFixedPayoutMulti),
/* harmony export */   _calculateStandardFixedPayout: () => (/* binding */ _calculateStandardFixedPayout),
/* harmony export */   calculateFixedCancelPayout: () => (/* binding */ calculateFixedCancelPayout),
/* harmony export */   calculateFixedPayout: () => (/* binding */ calculateFixedPayout),
/* harmony export */   calculateFixedPayoutMulti: () => (/* binding */ calculateFixedPayoutMulti),
/* harmony export */   calculateStandardFixedPayout: () => (/* binding */ calculateStandardFixedPayout)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _calculate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculate */ "./src/ts/lib/manifold/common/src/calculate.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/calculate-fixed-payouts.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/calculate-fixed-payouts.ts';


/*WRAPPED*/ function _calculateFixedPayout(contract, bet, outcome) {
    if (outcome === 'CANCEL')
        return calculateFixedCancelPayout(bet);
    if (outcome === 'MKT')
        return calculateFixedMktPayout(contract, bet);
    return calculateStandardFixedPayout(bet, outcome);
}
/*LOG2   */ const calculateFixedPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateFixedPayout()', github_file_url, 6), _calculateFixedPayout);
/*WRAPPED*/ function _calculateFixedCancelPayout(bet) {
    return bet.amount;
}
/*LOG2   */ const calculateFixedCancelPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateFixedCancelPayout()', github_file_url, 17), _calculateFixedCancelPayout);
/*WRAPPED*/ function _calculateStandardFixedPayout(bet, outcome) {
    const { outcome: betOutcome, shares } = bet;
    if (betOutcome !== outcome)
        return 0;
    return shares;
}
/*LOG2   */ const calculateStandardFixedPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateStandardFixedPayout()', github_file_url, 21), _calculateStandardFixedPayout);
/*WRAPPED*/ function _calculateFixedMktPayout(contract, bet) {
    const { resolutionProbability } = contract;
    const prob = resolutionProbability !== undefined
        ? resolutionProbability
        : (0,_calculate__WEBPACK_IMPORTED_MODULE_2__.getProbability)(contract);
    const { outcome, shares } = bet;
    const betP = outcome === 'YES' ? prob : 1 - prob;
    return betP * shares;
}
/*LOG2   */ const calculateFixedMktPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateFixedMktPayout()', github_file_url, 28), _calculateFixedMktPayout);
/*WRAPPED*/ function _calculateBetPayoutMulti(contract, bet) {
    let prob = 0;
    const { answerId } = bet;
    if (answerId) {
        const { answers, resolutions } = contract;
        const answer = answers.find((a) => a.id === answerId);
        if (answer && answer.resolution) {
            const { resolution, resolutionProbability } = answer;
            if (resolutionProbability)
                prob = resolutionProbability;
            else
                prob = resolution === 'YES' ? 1 : 0;
        }
        else if (resolutions) {
            const probTotal = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(resolutions));
            prob = (resolutions[answerId] ?? 0) / probTotal;
        }
        else if (answer) {
            prob = answer.prob;
        }
    }
    const { outcome, shares } = bet;
    const betP = outcome === 'YES' ? prob : 1 - prob;
    return betP * shares;
}
/*LOG2   */ const calculateBetPayoutMulti = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateBetPayoutMulti()', github_file_url, 40), _calculateBetPayoutMulti);
/*WRAPPED*/ function _calculateFixedPayoutMulti(contract, bet, outcome) {
    if (outcome === 'CANCEL')
        return calculateFixedCancelPayout(bet);
    return calculateBetPayoutMulti(contract, bet);
}
/*LOG2   */ const calculateFixedPayoutMulti = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateFixedPayoutMulti()', github_file_url, 62), _calculateFixedPayoutMulti);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/calculate-metrics.ts":
/*!*************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/calculate-metrics.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ELASTICITY_BET_AMOUNT: () => (/* binding */ ELASTICITY_BET_AMOUNT),
/* harmony export */   _calculateMetricsByContractAndAnswer: () => (/* binding */ _calculateMetricsByContractAndAnswer),
/* harmony export */   _calculateNewPortfolioMetrics: () => (/* binding */ _calculateNewPortfolioMetrics),
/* harmony export */   _calculateUserMetrics: () => (/* binding */ _calculateUserMetrics),
/* harmony export */   _computeBinaryCpmmElasticity: () => (/* binding */ _computeBinaryCpmmElasticity),
/* harmony export */   _computeBinaryCpmmElasticityFromAnte: () => (/* binding */ _computeBinaryCpmmElasticityFromAnte),
/* harmony export */   _computeDpmElasticity: () => (/* binding */ _computeDpmElasticity),
/* harmony export */   _computeElasticity: () => (/* binding */ _computeElasticity),
/* harmony export */   _computeInvestmentValueCustomProb: () => (/* binding */ _computeInvestmentValueCustomProb),
/* harmony export */   calculateMetricsByContractAndAnswer: () => (/* binding */ calculateMetricsByContractAndAnswer),
/* harmony export */   calculateNewPortfolioMetrics: () => (/* binding */ calculateNewPortfolioMetrics),
/* harmony export */   calculateUserMetrics: () => (/* binding */ calculateUserMetrics),
/* harmony export */   computeBinaryCpmmElasticity: () => (/* binding */ computeBinaryCpmmElasticity),
/* harmony export */   computeBinaryCpmmElasticityFromAnte: () => (/* binding */ computeBinaryCpmmElasticityFromAnte),
/* harmony export */   computeDpmElasticity: () => (/* binding */ computeDpmElasticity),
/* harmony export */   computeElasticity: () => (/* binding */ computeElasticity),
/* harmony export */   computeInvestmentValueCustomProb: () => (/* binding */ computeInvestmentValueCustomProb)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _calculate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculate */ "./src/ts/lib/manifold/common/src/calculate.ts");
/* harmony import */ var _util_time__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/time */ "./src/ts/lib/manifold/common/src/util/time.ts");
/* harmony import */ var _new_bet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./new-bet */ "./src/ts/lib/manifold/common/src/new-bet.ts");
/* harmony import */ var _calculate_cpmm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calculate-cpmm */ "./src/ts/lib/manifold/common/src/calculate-cpmm.ts");
/* harmony import */ var _util_object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/object */ "./src/ts/lib/manifold/common/src/util/object.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/math */ "./src/ts/lib/manifold/common/src/util/math.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/calculate-metrics.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/calculate-metrics.ts';







/*WRAPPED*/ const _computeInvestmentValue = (bets, contractsDict) => {
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(bets, (bet) => {
        const contract = contractsDict[bet.contractId];
        if (!contract || contract.isResolved)
            return 0;
        if (bet.sale || bet.isSold)
            return 0;
        let payout;
        try {
            payout = (0,_calculate__WEBPACK_IMPORTED_MODULE_2__.calculatePayout)(contract, bet, 'MKT');
        }
        catch (e) {
            console.log('contract', contract.question, contract.mechanism, contract.id);
            console.error(e);
            payout = 0;
        }
        const value = payout - (bet.loanAmount ?? 0);
        if (isNaN(value))
            return 0;
        return value;
    });
};
/*LOG2   */ const computeInvestmentValue = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeInvestmentValue()', github_file_url, 17), _computeInvestmentValue);
/*WRAPPED*/ const _computeInvestmentValueCustomProb = (bets, contract, p) => {
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(bets, (bet) => {
        if (!contract)
            return 0;
        if (bet.sale || bet.isSold)
            return 0;
        const { outcome, shares } = bet;
        const betP = outcome === 'YES' ? p : 1 - p;
        const value = betP * shares;
        if (isNaN(value))
            return 0;
        return value;
    });
};
/*LOG2   */ const computeInvestmentValueCustomProb = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeInvestmentValueCustomProb()', github_file_url, 45), _computeInvestmentValueCustomProb);
/*WRAPPED*/ const _getLoanTotal = (bets, contractsDict) => {
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(bets, (bet) => {
        const contract = contractsDict[bet.contractId];
        if (!contract || contract.isResolved)
            return 0;
        if (bet.sale || bet.isSold)
            return 0;
        return bet.loanAmount ?? 0;
    });
};
/*LOG2   */ const getLoanTotal = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getLoanTotal()', github_file_url, 63), _getLoanTotal);
const ELASTICITY_BET_AMOUNT = 100;
/*WRAPPED*/ const _computeElasticity = (unfilledBets, contract, betAmount = ELASTICITY_BET_AMOUNT) => {
    switch (contract.mechanism) {
        case 'cpmm-1':
            return computeBinaryCpmmElasticity(unfilledBets, contract, betAmount);
        case 'dpm-2':
            return computeDpmElasticity(contract, betAmount);
        default: // there are some contracts on the dev DB with crazy mechanisms
            return 1;
    }
};
/*LOG2   */ const computeElasticity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeElasticity()', github_file_url, 77), _computeElasticity);
/*WRAPPED*/ const _computeBinaryCpmmElasticity = (unfilledBets, contract, betAmount) => {
    const sortedBets = unfilledBets.sort((a, b) => a.createdTime - b.createdTime);
    const userIds = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.uniq)(unfilledBets.map((b) => b.userId));
    // Assume all limit orders are good.
    const userBalances = Object.fromEntries(userIds.map((id) => [id, Number.MAX_SAFE_INTEGER]));
    const cpmmState = {
        pool: contract.pool,
        p: contract.p,
    };
    const { cpmmState: { pool: poolY, p: pY }, } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)(cpmmState, 'YES', betAmount, undefined, sortedBets, userBalances);
    const resultYes = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_5__.getCpmmProbability)(poolY, pY);
    const { cpmmState: { pool: poolN, p: pN }, } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)(cpmmState, 'NO', betAmount, undefined, sortedBets, userBalances);
    const resultNo = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_5__.getCpmmProbability)(poolN, pN);
    // handle AMM overflow
    const safeYes = Number.isFinite(resultYes)
        ? Math.min(resultYes, 0.995)
        : 0.995;
    const safeNo = Number.isFinite(resultNo) ? Math.max(resultNo, 0.005) : 0.005;
    return (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.logit)(safeYes) - (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.logit)(safeNo);
};
/*LOG2   */ const computeBinaryCpmmElasticity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeBinaryCpmmElasticity()', github_file_url, 92), _computeBinaryCpmmElasticity);
/*WRAPPED*/ const _computeBinaryCpmmElasticityFromAnte = (ante, betAmount = ELASTICITY_BET_AMOUNT) => {
    const pool = { YES: ante, NO: ante };
    const p = 0.5;
    const cpmmState = {
        pool,
        p,
    };
    const { cpmmState: { pool: poolY, p: pY }, } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)(cpmmState, 'YES', betAmount, undefined, [], {});
    const resultYes = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_5__.getCpmmProbability)(poolY, pY);
    const { cpmmState: { pool: poolN, p: pN }, } = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.computeFills)(cpmmState, 'NO', betAmount, undefined, [], {});
    const resultNo = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_5__.getCpmmProbability)(poolN, pN);
    // handle AMM overflow
    const safeYes = Number.isFinite(resultYes) ? resultYes : 1;
    const safeNo = Number.isFinite(resultNo) ? resultNo : 0;
    return (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.logit)(safeYes) - (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.logit)(safeNo);
};
/*LOG2   */ const computeBinaryCpmmElasticityFromAnte = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeBinaryCpmmElasticityFromAnte()', github_file_url, 143), _computeBinaryCpmmElasticityFromAnte);
/*WRAPPED*/ const _computeDpmElasticity = (contract, betAmount) => {
    const afterProb = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.getNewMultiBetInfo)('', betAmount + 1, contract).newBet
        .probAfter;
    const initialProb = (0,_new_bet__WEBPACK_IMPORTED_MODULE_4__.getNewMultiBetInfo)('', 1, contract).newBet.probAfter;
    return (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.logit)(afterProb) - (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.logit)(initialProb);
};
/*LOG2   */ const computeDpmElasticity = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeDpmElasticity()', github_file_url, 172), _computeDpmElasticity);
/*WRAPPED*/ const _calculateNewPortfolioMetrics = (user, contractsById, unresolvedBets) => {
    const investmentValue = computeInvestmentValue(unresolvedBets, contractsById);
    const loanTotal = getLoanTotal(unresolvedBets, contractsById);
    return {
        investmentValue: investmentValue,
        balance: user.balance,
        totalDeposits: user.totalDeposits,
        loanTotal,
        timestamp: Date.now(),
        userId: user.id,
    };
};
/*LOG2   */ const calculateNewPortfolioMetrics = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateNewPortfolioMetrics()', github_file_url, 184), _calculateNewPortfolioMetrics);
/*WRAPPED*/ const _calculateMetricsByContractAndAnswer = (betsByContractId, contractsById, user) => {
    return Object.entries(betsByContractId).map(([contractId, bets]) => {
        const contract = contractsById[contractId];
        return calculateUserMetrics(contract, bets, user);
    });
};
/*LOG2   */ const calculateMetricsByContractAndAnswer = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateMetricsByContractAndAnswer()', github_file_url, 201), _calculateMetricsByContractAndAnswer);
/*WRAPPED*/ const _calculateUserMetrics = (contract, bets, user) => {
    // ContractMetrics will have an answerId for every answer, and a null for the overall metrics.
    const currentMetrics = (0,_calculate__WEBPACK_IMPORTED_MODULE_2__.getContractBetMetricsPerAnswer)(contract, bets);
    const bet = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.first)(bets);
    return currentMetrics.map((current) => {
        let periodMetrics;
        if (contract.mechanism === 'cpmm-1') {
            const periods = ['day', 'week', 'month'];
            periodMetrics = Object.fromEntries(periods.map((period) => [
                period,
                calculatePeriodProfit(contract, bets, period),
            ]));
        }
        return (0,_util_object__WEBPACK_IMPORTED_MODULE_6__.removeUndefinedProps)({
            contractId: contract.id,
            ...current,
            from: periodMetrics,
            userName: user?.name ?? bet?.userName,
            userId: user?.id ?? bet?.userId,
            userUsername: user?.username ?? bet?.userUsername,
            userAvatarUrl: user?.avatarUrl ?? bet?.userAvatarUrl,
        });
    });
};
/*LOG2   */ const calculateUserMetrics = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateUserMetrics()', github_file_url, 212), _calculateUserMetrics);
/*WRAPPED*/ const _calculatePeriodProfit = (contract, bets, period) => {
    const days = period === 'day' ? 1 : period === 'week' ? 7 : 30;
    const fromTime = Date.now() - days * _util_time__WEBPACK_IMPORTED_MODULE_3__.DAY_MS;
    const [previousBets, recentBets] = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.partition)(bets, (b) => b.createdTime < fromTime);
    const { prob, probChanges } = contract;
    const prevProb = prob - probChanges[period];
    const previousBetsValue = computeInvestmentValueCustomProb(previousBets, contract, prevProb);
    const currentBetsValue = computeInvestmentValueCustomProb(previousBets, contract, prob);
    const { profit: recentProfit, invested: recentInvested } = (0,_calculate__WEBPACK_IMPORTED_MODULE_2__.getContractBetMetrics)(contract, recentBets);
    const profit = currentBetsValue - previousBetsValue + recentProfit;
    const invested = previousBetsValue + recentInvested;
    const profitPercent = invested === 0 ? 0 : 100 * (profit / invested);
    return {
        profit,
        profitPercent,
        invested,
        prevValue: previousBetsValue,
        value: currentBetsValue,
    };
};
/*LOG2   */ const calculatePeriodProfit = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculatePeriodProfit()', github_file_url, 244), _calculatePeriodProfit);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/calculate.ts":
/*!*****************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/calculate.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _calculatePayout: () => (/* binding */ _calculatePayout),
/* harmony export */   _calculateSharesBought: () => (/* binding */ _calculateSharesBought),
/* harmony export */   _calculateSharesBoughtMulti: () => (/* binding */ _calculateSharesBoughtMulti),
/* harmony export */   _getAnswerProbability: () => (/* binding */ _getAnswerProbability),
/* harmony export */   _getContractBetMetrics: () => (/* binding */ _getContractBetMetrics),
/* harmony export */   _getContractBetMetricsPerAnswer: () => (/* binding */ _getContractBetMetricsPerAnswer),
/* harmony export */   _getContractBetNullMetrics: () => (/* binding */ _getContractBetNullMetrics),
/* harmony export */   _getCpmmMultiShares: () => (/* binding */ _getCpmmMultiShares),
/* harmony export */   _getCpmmShares: () => (/* binding */ _getCpmmShares),
/* harmony export */   _getDisplayProbability: () => (/* binding */ _getDisplayProbability),
/* harmony export */   _getInitialAnswerProbability: () => (/* binding */ _getInitialAnswerProbability),
/* harmony export */   _getInitialProbability: () => (/* binding */ _getInitialProbability),
/* harmony export */   _getInvested: () => (/* binding */ _getInvested),
/* harmony export */   _getLargestPosition: () => (/* binding */ _getLargestPosition),
/* harmony export */   _getOutcomeProbability: () => (/* binding */ _getOutcomeProbability),
/* harmony export */   _getOutcomeProbabilityAfterBet: () => (/* binding */ _getOutcomeProbabilityAfterBet),
/* harmony export */   _getOutcomeProbabilityAfterBetMulti: () => (/* binding */ _getOutcomeProbabilityAfterBetMulti),
/* harmony export */   _getProbability: () => (/* binding */ _getProbability),
/* harmony export */   _getProfitMetrics: () => (/* binding */ _getProfitMetrics),
/* harmony export */   _getSimpleCpmmInvested: () => (/* binding */ _getSimpleCpmmInvested),
/* harmony export */   _getTopAnswer: () => (/* binding */ _getTopAnswer),
/* harmony export */   _getTopNSortedAnswers: () => (/* binding */ _getTopNSortedAnswers),
/* harmony export */   _resolvedPayout: () => (/* binding */ _resolvedPayout),
/* harmony export */   calculatePayout: () => (/* binding */ calculatePayout),
/* harmony export */   calculateSharesBought: () => (/* binding */ calculateSharesBought),
/* harmony export */   calculateSharesBoughtMulti: () => (/* binding */ calculateSharesBoughtMulti),
/* harmony export */   getAnswerProbability: () => (/* binding */ getAnswerProbability),
/* harmony export */   getContractBetMetrics: () => (/* binding */ getContractBetMetrics),
/* harmony export */   getContractBetMetricsPerAnswer: () => (/* binding */ getContractBetMetricsPerAnswer),
/* harmony export */   getContractBetNullMetrics: () => (/* binding */ getContractBetNullMetrics),
/* harmony export */   getCpmmMultiShares: () => (/* binding */ getCpmmMultiShares),
/* harmony export */   getCpmmShares: () => (/* binding */ getCpmmShares),
/* harmony export */   getDisplayProbability: () => (/* binding */ getDisplayProbability),
/* harmony export */   getInitialAnswerProbability: () => (/* binding */ getInitialAnswerProbability),
/* harmony export */   getInitialProbability: () => (/* binding */ getInitialProbability),
/* harmony export */   getInvested: () => (/* binding */ getInvested),
/* harmony export */   getLargestPosition: () => (/* binding */ getLargestPosition),
/* harmony export */   getOutcomeProbability: () => (/* binding */ getOutcomeProbability),
/* harmony export */   getOutcomeProbabilityAfterBet: () => (/* binding */ getOutcomeProbabilityAfterBet),
/* harmony export */   getOutcomeProbabilityAfterBetMulti: () => (/* binding */ getOutcomeProbabilityAfterBetMulti),
/* harmony export */   getProbability: () => (/* binding */ getProbability),
/* harmony export */   getProfitMetrics: () => (/* binding */ getProfitMetrics),
/* harmony export */   getSimpleCpmmInvested: () => (/* binding */ getSimpleCpmmInvested),
/* harmony export */   getTopAnswer: () => (/* binding */ getTopAnswer),
/* harmony export */   getTopNSortedAnswers: () => (/* binding */ getTopNSortedAnswers),
/* harmony export */   resolvedPayout: () => (/* binding */ resolvedPayout)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculate-cpmm */ "./src/ts/lib/manifold/common/src/calculate-cpmm.ts");
/* harmony import */ var _calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculate-cpmm-multi */ "./src/ts/lib/manifold/common/src/calculate-cpmm-multi.ts");
/* harmony import */ var _calculate_dpm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./calculate-dpm */ "./src/ts/lib/manifold/common/src/calculate-dpm.ts");
/* harmony import */ var _calculate_fixed_payouts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calculate-fixed-payouts */ "./src/ts/lib/manifold/common/src/calculate-fixed-payouts.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/math */ "./src/ts/lib/manifold/common/src/util/math.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/calculate.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/calculate.ts';






/*WRAPPED*/ function _getProbability(contract) {
    return contract.mechanism === 'cpmm-1'
        ? (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(contract.pool, contract.p)
        : (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.getDpmProbability)(contract.totalShares);
}
/*LOG2   */ const getProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getProbability()', github_file_url, 40), _getProbability);
/*WRAPPED*/ function _getDisplayProbability(contract) {
    return contract.resolutionProbability ?? getProbability(contract);
}
/*LOG2   */ const getDisplayProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getDisplayProbability()', github_file_url, 48), _getDisplayProbability);
/*WRAPPED*/ function _getInitialProbability(contract) {
    if (contract.initialProbability)
        return contract.initialProbability;
    if (contract.mechanism === 'dpm-2' || contract.totalShares)
        // use totalShares to calculate prob for ported contracts
        return (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.getDpmProbability)(contract.phantomShares ?? contract.totalShares);
    return (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(contract.pool, contract.p);
}
/*LOG2   */ const getInitialProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getInitialProbability()', github_file_url, 54), _getInitialProbability);
/*WRAPPED*/ function _getOutcomeProbability(contract, outcome) {
    const { mechanism } = contract;
    switch (mechanism) {
        case 'cpmm-1':
            return outcome === 'YES'
                ? (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(contract.pool, contract.p)
                : 1 - (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(contract.pool, contract.p);
        case 'cpmm-2':
            return (0,_calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_3__.getProb)(contract.pool, outcome);
        case 'dpm-2':
            return (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.getDpmOutcomeProbability)(contract.totalShares, outcome);
        case 'cpmm-multi-1':
            return 0;
        default:
            throw new Error('getOutcomeProbability not implemented');
    }
}
/*LOG2   */ const getOutcomeProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getOutcomeProbability()', github_file_url, 68), _getOutcomeProbability);
/*WRAPPED*/ function _getAnswerProbability(contract, answerId) {
    if (contract.mechanism === 'dpm-2') {
        return (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.getDpmOutcomeProbability)(contract.totalShares, answerId);
    }
    if (contract.mechanism === 'cpmm-multi-1') {
        const answer = contract.answers.find((a) => a.id === answerId);
        if (!answer)
            return 0;
        const { poolYes, poolNo, resolution, resolutionProbability } = answer;
        if (resolution) {
            if (resolution === 'MKT')
                return resolutionProbability ?? answer.prob;
            if (resolution === 'YES')
                return 1;
            if (resolution === 'NO')
                return 0;
        }
        const pool = { YES: poolYes, NO: poolNo };
        return (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmProbability)(pool, 0.5);
    }
    if (contract.mechanism === 'cpmm-2') {
        return 0;
    }
    throw new Error('getAnswerProbability not implemented for mechanism ' +
        contract.mechanism);
}
/*LOG2   */ const getAnswerProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getAnswerProbability()', github_file_url, 86), _getAnswerProbability);
/*WRAPPED*/ function _getInitialAnswerProbability(contract, answer) {
    if (contract.mechanism === 'cpmm-multi-1') {
        if (!contract.shouldAnswersSumToOne) {
            return 0.5;
        }
        else {
            if (contract.addAnswersMode === 'DISABLED') {
                return 1 / contract.answers.length;
            }
            else {
                const answers = contract.answers;
                const initialTime = answers.find((a) => a.isOther)?.createdTime;
                if (answer.createdTime === initialTime) {
                    const numberOfInitialAnswers = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(answers, (a) => a.createdTime === initialTime ? 1 : 0);
                    return 1 / numberOfInitialAnswers;
                }
                return undefined;
            }
        }
    }
    if (contract.mechanism === 'dpm-2') {
        return undefined;
    }
    if (contract.mechanism === 'cpmm-2') {
        return 1 / contract.answers.length;
    }
    throw new Error('getAnswerInitialProbability not implemented for mechanism ' +
        contract.mechanism);
}
/*LOG2   */ const getInitialAnswerProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getInitialAnswerProbability()', github_file_url, 118), _getInitialAnswerProbability);
/*WRAPPED*/ function _getOutcomeProbabilityAfterBet(contract, outcome, bet) {
    const { mechanism } = contract;
    switch (mechanism) {
        case 'cpmm-1':
            return (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmOutcomeProbabilityAfterBet)(contract, outcome, bet);
        case 'cpmm-2':
            return (0,_calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_3__.getProb)((0,_calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_3__.buy)(contract.pool, outcome, bet).newPool, outcome);
        case 'dpm-2':
            return (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.getDpmOutcomeProbabilityAfterBet)(contract.totalShares, outcome, bet);
        case 'cpmm-multi-1':
            return 0;
        default:
            throw new Error('getOutcomeProbabilityAfterBet not implemented');
    }
}
/*LOG2   */ const getOutcomeProbabilityAfterBet = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getOutcomeProbabilityAfterBet()', github_file_url, 157), _getOutcomeProbabilityAfterBet);
/*WRAPPED*/ function _getOutcomeProbabilityAfterBetMulti(answers, answerId, outcome, amount) {
    const answer = answers.find((a) => a.id === answerId);
    if (!answer)
        throw new Error('Answer not found');
    const { poolYes, poolNo } = answer;
    return (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.getCpmmOutcomeProbabilityAfterBet)({
        pool: { YES: poolYes, NO: poolNo },
        p: 0.5,
    }, outcome, amount);
}
/*LOG2   */ const getOutcomeProbabilityAfterBetMulti = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getOutcomeProbabilityAfterBetMulti()', github_file_url, 181), _getOutcomeProbabilityAfterBetMulti);
/*WRAPPED*/ function _calculateSharesBought(contract, outcome, amount) {
    const { mechanism } = contract;
    switch (mechanism) {
        case 'cpmm-1':
            return (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateCpmmPurchase)(contract, amount, outcome).shares;
        case 'cpmm-2':
            return (0,_calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_3__.buy)(contract.pool, outcome, amount).shares;
        case 'dpm-2':
            return (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.calculateDpmShares)(contract.totalShares, amount, outcome);
        default:
            throw new Error('calculateSharesBought not implemented');
    }
}
/*LOG2   */ const calculateSharesBought = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateSharesBought()', github_file_url, 202), _calculateSharesBought);
/*WRAPPED*/ function _calculateSharesBoughtMulti(answers, answerId, outcome, amount) {
    const answer = answers.find((a) => a.id === answerId);
    if (!answer)
        throw new Error('Answer not found');
    const { poolYes, poolNo } = answer;
    return (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_2__.calculateCpmmPurchase)({ pool: { YES: poolYes, NO: poolNo }, p: 0.5 }, amount, outcome).shares;
}
/*LOG2   */ const calculateSharesBoughtMulti = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculateSharesBoughtMulti()', github_file_url, 219), _calculateSharesBoughtMulti);
/*WRAPPED*/ function _calculatePayout(contract, bet, outcome) {
    const { mechanism } = contract;
    return mechanism === 'cpmm-1'
        ? (0,_calculate_fixed_payouts__WEBPACK_IMPORTED_MODULE_5__.calculateFixedPayout)(contract, bet, outcome)
        : mechanism === 'cpmm-multi-1'
            ? (0,_calculate_fixed_payouts__WEBPACK_IMPORTED_MODULE_5__.calculateFixedPayoutMulti)(contract, bet, outcome)
            : mechanism === 'dpm-2'
                ? (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.calculateDpmPayout)(contract, bet, outcome)
                : bet?.amount ?? 0;
}
/*LOG2   */ const calculatePayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('calculatePayout()', github_file_url, 237), _calculatePayout);
/*WRAPPED*/ function _resolvedPayout(contract, bet) {
    const { resolution, mechanism } = contract;
    if (!resolution)
        throw new Error('Contract not resolved');
    return mechanism === 'cpmm-1'
        ? (0,_calculate_fixed_payouts__WEBPACK_IMPORTED_MODULE_5__.calculateFixedPayout)(contract, bet, resolution)
        : mechanism === 'cpmm-multi-1'
            ? (0,_calculate_fixed_payouts__WEBPACK_IMPORTED_MODULE_5__.calculateFixedPayoutMulti)(contract, bet, resolution)
            : mechanism === 'dpm-2'
                ? (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_4__.calculateDpmPayout)(contract, bet, resolution)
                : bet?.amount ?? 0;
}
/*LOG2   */ const resolvedPayout = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('resolvedPayout()', github_file_url, 248), _resolvedPayout);
/*WRAPPED*/ function _getCpmmInvested(yourBets) {
    const totalShares = {};
    const totalSpent = {};
    const sortedBets = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sortBy)(yourBets, 'createdTime');
    const sharePurchases = sortedBets.map((bet) => [bet]).flat();
    for (const purchase of sharePurchases) {
        const { outcome, shares, amount } = purchase;
        if ((0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingEqual)(shares, 0))
            continue;
        const spent = totalSpent[outcome] ?? 0;
        const position = totalShares[outcome] ?? 0;
        if (amount > 0) {
            totalShares[outcome] = position + shares;
            totalSpent[outcome] = spent + amount;
        }
        else if (amount < 0) {
            const averagePrice = position === 0 ? 0 : spent / position;
            totalShares[outcome] = position + shares;
            totalSpent[outcome] = spent + averagePrice * shares;
        }
    }
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(totalSpent));
}
/*LOG2   */ const getCpmmInvested = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmInvested()', github_file_url, 261), _getCpmmInvested);
/*WRAPPED*/ function _getDpmInvested(yourBets) {
    const sortedBets = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sortBy)(yourBets, 'createdTime');
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(sortedBets, (bet) => {
        const { amount, sale } = bet;
        if (sale) {
            const originalBet = sortedBets.find((b) => b.id === sale.betId);
            if (originalBet)
                return -originalBet.amount;
            return 0;
        }
        return amount;
    });
}
/*LOG2   */ const getDpmInvested = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getDpmInvested()', github_file_url, 288), _getDpmInvested);
/*WRAPPED*/ function _getSimpleCpmmInvested(yourBets) {
    const total = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yourBets, (b) => b.amount);
    if (total < 0)
        return 0;
    return total;
}
/*LOG2   */ const getSimpleCpmmInvested = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getSimpleCpmmInvested()', github_file_url, 304), _getSimpleCpmmInvested);
/*WRAPPED*/ function _getInvested(contract, yourBets) {
    const { mechanism } = contract;
    if (mechanism === 'cpmm-1')
        return getCpmmInvested(yourBets);
    if (mechanism === 'cpmm-multi-1') {
        const betsByAnswerId = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(yourBets, 'answerId');
        const investedByAnswerId = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(betsByAnswerId, getCpmmInvested);
        return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(Object.values(investedByAnswerId));
    }
    return getDpmInvested(yourBets);
}
/*LOG2   */ const getInvested = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getInvested()', github_file_url, 310), _getInvested);
/*WRAPPED*/ function _getCpmmOrDpmProfit(contract, yourBets, answer) {
    const resolution = answer?.resolution ?? contract.resolution;
    let totalInvested = 0;
    let payout = 0;
    let saleValue = 0;
    let redeemed = 0;
    const betsById = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.keyBy)(yourBets, 'id');
    const betIdToSaleBet = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.keyBy)(yourBets.filter((b) => b.sale), (bet) => bet.sale.betId);
    for (const bet of yourBets) {
        const { isSold, sale, amount, isRedemption } = bet;
        if (isSold) {
            const saleBet = betIdToSaleBet[bet.id];
            if (saleBet) {
                // Only counts if the sale bet is also in the list.
                totalInvested += amount;
            }
        }
        else if (sale) {
            if (betsById[sale.betId]) {
                // Only counts if the original bet is also in the list.
                saleValue += sale.amount;
            }
        }
        else {
            if (isRedemption) {
                redeemed += -1 * amount;
            }
            else if (amount > 0) {
                totalInvested += amount;
            }
            else {
                saleValue -= amount;
            }
            payout += resolution
                ? calculatePayout(contract, bet, resolution)
                : calculatePayout(contract, bet, 'MKT');
        }
    }
    const profit = payout + saleValue + redeemed - totalInvested;
    const profitPercent = totalInvested === 0 ? 0 : (profit / totalInvested) * 100;
    return {
        profit,
        profitPercent,
        totalInvested,
        payout,
    };
}
/*LOG2   */ const getCpmmOrDpmProfit = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmOrDpmProfit()', github_file_url, 321), _getCpmmOrDpmProfit);
/*WRAPPED*/ function _getProfitMetrics(contract, yourBets) {
    const { mechanism } = contract;
    if (mechanism === 'cpmm-multi-1') {
        const betsByAnswerId = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(yourBets, 'answerId');
        const profitMetricsPerAnswer = Object.entries(betsByAnswerId).map(([answerId, bets]) => {
            const answer = contract.answers.find((a) => a.id === answerId);
            return getCpmmOrDpmProfit(contract, bets, answer);
        });
        const profit = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(profitMetricsPerAnswer, 'profit');
        const totalInvested = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(profitMetricsPerAnswer, 'totalInvested');
        const profitPercent = totalInvested === 0 ? 0 : (profit / totalInvested) * 100;
        const payout = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(profitMetricsPerAnswer, 'payout');
        return {
            profit,
            profitPercent,
            totalInvested,
            payout,
        };
    }
    return getCpmmOrDpmProfit(contract, yourBets);
}
/*LOG2   */ const getProfitMetrics = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getProfitMetrics()', github_file_url, 379), _getProfitMetrics);
/*WRAPPED*/ function _getCpmmShares(yourBets) {
    const totalShares = {};
    for (const bet of yourBets) {
        const { shares, outcome } = bet;
        totalShares[outcome] = (totalShares[outcome] ?? 0) + shares;
    }
    const hasShares = Object.values(totalShares).some((shares) => !(0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingEqual)(shares, 0));
    const { YES: yesShares, NO: noShares } = totalShares;
    const hasYesShares = yesShares >= 1;
    const hasNoShares = noShares >= 1;
    return {
        totalShares,
        hasShares,
        hasYesShares,
        hasNoShares,
    };
}
/*LOG2   */ const getCpmmShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmShares()', github_file_url, 404), _getCpmmShares);
/*WRAPPED*/ function _getCpmmMultiShares(yourBets) {
    const betsByAnswerId = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(yourBets, 'answerId');
    const sharesByAnswerId = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(betsByAnswerId, (bets) => getCpmmShares(bets));
    const hasShares = Object.values(sharesByAnswerId).some((shares) => shares.hasShares);
    return {
        hasShares,
        sharesByAnswerId,
    };
}
/*LOG2   */ const getCpmmMultiShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCpmmMultiShares()', github_file_url, 427), _getCpmmMultiShares);
/*WRAPPED*/ const _getContractBetMetrics = (contract, yourBets, answerId) => {
    const { mechanism } = contract;
    const isCpmmMulti = mechanism === 'cpmm-multi-1';
    const { profit, profitPercent, payout } = getProfitMetrics(contract, yourBets);
    const invested = getInvested(contract, yourBets);
    const loan = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yourBets, 'loanAmount');
    const { totalShares, hasShares, hasYesShares, hasNoShares } = getCpmmShares(yourBets);
    const lastBetTime = Math.max(...yourBets.map((b) => b.createdTime));
    const maxSharesOutcome = hasShares
        ? (0,lodash__WEBPACK_IMPORTED_MODULE_1__.maxBy)(Object.keys(totalShares), (outcome) => totalShares[outcome])
        : null;
    return {
        invested,
        loan,
        payout,
        profit,
        profitPercent,
        totalShares,
        hasShares: isCpmmMulti ? getCpmmMultiShares(yourBets).hasShares : hasShares,
        hasYesShares,
        hasNoShares,
        maxSharesOutcome,
        lastBetTime,
        answerId: answerId ?? null,
    };
};
/*LOG2   */ const getContractBetMetrics = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getContractBetMetrics()', github_file_url, 443), _getContractBetMetrics);
/*WRAPPED*/ const _getContractBetMetricsPerAnswer = (contract, yourBets) => {
    const betsPerAnswer = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.groupBy)(yourBets, 'answerId');
    const metricsPerAnswer = Object.values((0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(betsPerAnswer, (bets) => getContractBetMetrics(contract, bets, bets[0].answerId)));
    // Not entirely sure about this extra calculation, but seems nice to have an overall contract metric.
    if (contract.mechanism === 'cpmm-multi-1') {
        metricsPerAnswer.push(getContractBetMetrics(contract, yourBets));
    }
    return metricsPerAnswer;
};
/*LOG2   */ const getContractBetMetricsPerAnswer = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getContractBetMetricsPerAnswer()', github_file_url, 476), _getContractBetMetricsPerAnswer);
/*WRAPPED*/ function _getContractBetNullMetrics() {
    return {
        invested: 0,
        loan: 0,
        payout: 0,
        profit: 0,
        profitPercent: 0,
        totalShares: {},
        hasShares: false,
        hasYesShares: false,
        hasNoShares: false,
        maxSharesOutcome: null,
    };
}
/*LOG2   */ const getContractBetNullMetrics = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getContractBetNullMetrics()', github_file_url, 493), _getContractBetNullMetrics);
/*WRAPPED*/ function _getTopAnswer(contract) {
    const { answers } = contract;
    const top = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.maxBy)(answers, (answer) => 'prob' in answer ? answer.prob : getOutcomeProbability(contract, answer.id));
    return top;
}
/*LOG2   */ const getTopAnswer = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getTopAnswer()', github_file_url, 507), _getTopAnswer);
/*WRAPPED*/ function _getTopNSortedAnswers(contract, n) {
    const { answers, resolution, resolutions } = contract;
    const [winningAnswers, losingAnswers] = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.partition)(answers, (answer) => answer.id === resolution || (resolutions && resolutions[answer.id])
    // Types were messed up with out this cast.
    );
    const sortedAnswers = [
        ...(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sortBy)(winningAnswers, (answer) => resolutions ? -1 * resolutions[answer.id] : 0),
        ...(0,lodash__WEBPACK_IMPORTED_MODULE_1__.sortBy)(losingAnswers, (answer) => -1 * getAnswerProbability(contract, answer.id)),
    ].slice(0, n);
    return sortedAnswers;
}
/*LOG2   */ const getTopNSortedAnswers = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getTopNSortedAnswers()', github_file_url, 515), _getTopNSortedAnswers);
/*WRAPPED*/ function _getLargestPosition(contract, userBets) {
    if (userBets.length === 0) {
        return null;
    }
    if (contract.mechanism === 'cpmm-multi-1') {
        const { sharesByAnswerId, hasShares } = getCpmmMultiShares(userBets);
        if (!hasShares)
            return null;
        const answerId = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.maxBy)(Object.keys(sharesByAnswerId), (answerId) => Math.max(...Object.values(sharesByAnswerId[answerId].totalShares)));
        if (!answerId)
            return null;
        const { totalShares } = sharesByAnswerId[answerId];
        const outcome = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.maxBy)(Object.keys(totalShares), (outcome) => totalShares[outcome]);
        if (!outcome)
            return null;
        return {
            answerId,
            outcome,
            shares: totalShares[outcome],
        };
    }
    const { totalShares, hasShares } = getContractBetMetrics(contract, userBets);
    if (!hasShares)
        return null;
    const outcome = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.maxBy)(Object.keys(totalShares), (outcome) => totalShares[outcome]);
    if (!outcome)
        return null;
    const shares = totalShares[outcome];
    return { outcome, shares };
}
/*LOG2   */ const getLargestPosition = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getLargestPosition()', github_file_url, 537), _getLargestPosition);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/contract.ts":
/*!****************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/contract.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CPMM_MIN_POOL_QTY: () => (/* binding */ CPMM_MIN_POOL_QTY),
/* harmony export */   CREATEABLE_OUTCOME_TYPES: () => (/* binding */ CREATEABLE_OUTCOME_TYPES),
/* harmony export */   MAX_DESCRIPTION_LENGTH: () => (/* binding */ MAX_DESCRIPTION_LENGTH),
/* harmony export */   MAX_QUESTION_LENGTH: () => (/* binding */ MAX_QUESTION_LENGTH),
/* harmony export */   MINUTES_ALLOWED_TO_UNRESOLVE: () => (/* binding */ MINUTES_ALLOWED_TO_UNRESOLVE),
/* harmony export */   NON_BETTING_OUTCOMES: () => (/* binding */ NON_BETTING_OUTCOMES),
/* harmony export */   NO_CLOSE_TIME_TYPES: () => (/* binding */ NO_CLOSE_TIME_TYPES),
/* harmony export */   RESOLUTIONS: () => (/* binding */ RESOLUTIONS),
/* harmony export */   VISIBILITIES: () => (/* binding */ VISIBILITIES),
/* harmony export */   _contractPath: () => (/* binding */ _contractPath),
/* harmony export */   _contractPathWithoutContract: () => (/* binding */ _contractPathWithoutContract),
/* harmony export */   _contractPool: () => (/* binding */ _contractPool),
/* harmony export */   _getBinaryProbPercent: () => (/* binding */ _getBinaryProbPercent),
/* harmony export */   _renderResolution: () => (/* binding */ _renderResolution),
/* harmony export */   _tradingAllowed: () => (/* binding */ _tradingAllowed),
/* harmony export */   contractPath: () => (/* binding */ contractPath),
/* harmony export */   contractPathWithoutContract: () => (/* binding */ contractPathWithoutContract),
/* harmony export */   contractPool: () => (/* binding */ contractPool),
/* harmony export */   getBinaryProbPercent: () => (/* binding */ getBinaryProbPercent),
/* harmony export */   renderResolution: () => (/* binding */ renderResolution),
/* harmony export */   tradingAllowed: () => (/* binding */ tradingAllowed)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _util_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/format */ "./src/ts/lib/manifold/common/src/util/format.ts");
/* harmony import */ var _calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculate-cpmm-multi */ "./src/ts/lib/manifold/common/src/calculate-cpmm-multi.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _calculate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./calculate */ "./src/ts/lib/manifold/common/src/calculate.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/contract.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/contract.ts';




const NON_BETTING_OUTCOMES = ['BOUNTIED_QUESTION', 'POLL'];
const NO_CLOSE_TIME_TYPES = NON_BETTING_OUTCOMES.concat([
    'STONK',
]);
const RESOLUTIONS = ['YES', 'NO', 'MKT', 'CANCEL'];
const CREATEABLE_OUTCOME_TYPES = [
    'BINARY',
    'MULTIPLE_CHOICE',
    'PSEUDO_NUMERIC',
    'STONK',
    'BOUNTIED_QUESTION',
    'POLL',
];
/*WRAPPED*/ const _renderResolution = (resolution, prob) => {
    return ({
        YES: 'YES',
        NO: 'NO',
        CANCEL: 'N/A',
        MKT: (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatPercent)(prob ?? 0),
    }[resolution] || resolution);
};
/*LOG2   */ const renderResolution = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('renderResolution()', github_file_url, 321), _renderResolution);
/*WRAPPED*/ function _contractPathWithoutContract(creatorUsername, slug) {
    return `/${creatorUsername}/${slug}`;
}
/*LOG2   */ const contractPathWithoutContract = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('contractPathWithoutContract()', github_file_url, 332), _contractPathWithoutContract);
/*WRAPPED*/ function _contractPool(contract) {
    return contract.mechanism === 'cpmm-1'
        ? (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatMoney)(contract.totalLiquidity)
        : contract.mechanism === 'cpmm-2'
            ? (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatMoney)((0,_calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_2__.getLiquidity)(contract.pool))
            : contract.mechanism === 'dpm-2'
                ? (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatMoney)((0,lodash__WEBPACK_IMPORTED_MODULE_3__.sum)(Object.values(contract.pool)))
                : contract.mechanism === 'cpmm-multi-1'
                    ? (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatMoney)((0,lodash__WEBPACK_IMPORTED_MODULE_3__.sum)(contract.answers.map((a) => (0,_calculate_cpmm_multi__WEBPACK_IMPORTED_MODULE_2__.getLiquidity)({ YES: a.poolYes, NO: a.poolNo }))))
                    : 'Empty pool';
}
/*LOG2   */ const contractPool = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('contractPool()', github_file_url, 343), _contractPool);
/*WRAPPED*/ function _getBinaryProbPercent(contract) {
    return (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatPercent)((0,_calculate__WEBPACK_IMPORTED_MODULE_4__.getDisplayProbability)(contract));
}
/*LOG2   */ const getBinaryProbPercent = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getBinaryProbPercent()', github_file_url, 361), _getBinaryProbPercent);
/*WRAPPED*/ function _tradingAllowed(contract, answer) {
    return (!contract.isResolved &&
        (!contract.closeTime || contract.closeTime > Date.now()) &&
        contract.mechanism !== 'none' &&
        (!answer || !answer.resolution));
}
/*LOG2   */ const tradingAllowed = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('tradingAllowed()', github_file_url, 365), _tradingAllowed);
const MAX_QUESTION_LENGTH = 120;
const MAX_DESCRIPTION_LENGTH = 16000;
const CPMM_MIN_POOL_QTY = 0.01;
const VISIBILITIES = ['public', 'unlisted'];
const MINUTES_ALLOWED_TO_UNRESOLVE = 10;
/*WRAPPED*/ function _contractPath(contract) {
    return `/${contract.creatorUsername}/${contract.slug}`;
}
/*LOG2   */ const contractPath = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('contractPath()', github_file_url, 384), _contractPath);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/economy.ts":
/*!***************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/economy.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ANSWER_COST: () => (/* binding */ ANSWER_COST),
/* harmony export */   BETTING_STREAK_BONUS_AMOUNT: () => (/* binding */ BETTING_STREAK_BONUS_AMOUNT),
/* harmony export */   BETTING_STREAK_BONUS_MAX: () => (/* binding */ BETTING_STREAK_BONUS_MAX),
/* harmony export */   BETTING_STREAK_RESET_HOUR: () => (/* binding */ BETTING_STREAK_RESET_HOUR),
/* harmony export */   FIXED_ANTE: () => (/* binding */ FIXED_ANTE),
/* harmony export */   MANACHAN_TWEET_COST: () => (/* binding */ MANACHAN_TWEET_COST),
/* harmony export */   MAX_TRADERS_FOR_BIG_BONUS: () => (/* binding */ MAX_TRADERS_FOR_BIG_BONUS),
/* harmony export */   MAX_TRADERS_FOR_BONUS: () => (/* binding */ MAX_TRADERS_FOR_BONUS),
/* harmony export */   MINIMUM_BOUNTY: () => (/* binding */ MINIMUM_BOUNTY),
/* harmony export */   REFERRAL_AMOUNT: () => (/* binding */ REFERRAL_AMOUNT),
/* harmony export */   SMALL_UNIQUE_BETTOR_BONUS_AMOUNT: () => (/* binding */ SMALL_UNIQUE_BETTOR_BONUS_AMOUNT),
/* harmony export */   SMALL_UNIQUE_BETTOR_LIQUIDITY: () => (/* binding */ SMALL_UNIQUE_BETTOR_LIQUIDITY),
/* harmony export */   STARTING_BALANCE: () => (/* binding */ STARTING_BALANCE),
/* harmony export */   STARTING_BONUS: () => (/* binding */ STARTING_BONUS),
/* harmony export */   SUBSIDY_FEE: () => (/* binding */ SUBSIDY_FEE),
/* harmony export */   SUS_STARTING_BALANCE: () => (/* binding */ SUS_STARTING_BALANCE),
/* harmony export */   UNIQUE_ANSWER_BETTOR_BONUS_AMOUNT: () => (/* binding */ UNIQUE_ANSWER_BETTOR_BONUS_AMOUNT),
/* harmony export */   UNIQUE_BETTOR_BONUS_AMOUNT: () => (/* binding */ UNIQUE_BETTOR_BONUS_AMOUNT),
/* harmony export */   UNIQUE_BETTOR_LIQUIDITY: () => (/* binding */ UNIQUE_BETTOR_LIQUIDITY),
/* harmony export */   _getAnte: () => (/* binding */ _getAnte),
/* harmony export */   getAnte: () => (/* binding */ getAnte)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/economy.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/economy.ts';
const FIXED_ANTE = 50;
const ANSWER_COST = FIXED_ANTE / 2;
const ANTES = {
    BINARY: FIXED_ANTE,
    MULTIPLE_CHOICE: ANSWER_COST,
    FREE_RESPONSE: ANSWER_COST,
    PSEUDO_NUMERIC: FIXED_ANTE * 5,
    STONK: FIXED_ANTE,
    BOUNTIED_QUESTION: 0,
    POLL: 10,
};
const MINIMUM_BOUNTY = 5;
/*WRAPPED*/ const _getAnte = (outcomeType, numAnswers) => {
    const ante = ANTES[outcomeType] ?? FIXED_ANTE;
    if (outcomeType === 'MULTIPLE_CHOICE' || outcomeType === 'FREE_RESPONSE') {
        return Math.max(ante * (numAnswers ?? 0), 10);
    }
    return ante;
};
/*LOG2   */ const getAnte = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getAnte()', github_file_url, 17), _getAnte);
const STARTING_BALANCE = 500;
const STARTING_BONUS = 500;
// for sus users, i.e. multiple sign ups for same person
const SUS_STARTING_BALANCE = 10;
const REFERRAL_AMOUNT = 250;
const UNIQUE_BETTOR_BONUS_AMOUNT = 5;
const SMALL_UNIQUE_BETTOR_BONUS_AMOUNT = 1;
const UNIQUE_ANSWER_BETTOR_BONUS_AMOUNT = 3;
const UNIQUE_BETTOR_LIQUIDITY = 20;
const SMALL_UNIQUE_BETTOR_LIQUIDITY = 5;
const MAX_TRADERS_FOR_BIG_BONUS = 50;
const MAX_TRADERS_FOR_BONUS = 10000;
const SUBSIDY_FEE = 0.25;
const BETTING_STREAK_BONUS_AMOUNT = 5;
const BETTING_STREAK_BONUS_MAX = 25;
const BETTING_STREAK_RESET_HOUR = 7;
const MANACHAN_TWEET_COST = 250;


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/fees.ts":
/*!************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/fees.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CREATOR_FEE: () => (/* binding */ CREATOR_FEE),
/* harmony export */   DPM_CREATOR_FEE: () => (/* binding */ DPM_CREATOR_FEE),
/* harmony export */   DPM_FEES: () => (/* binding */ DPM_FEES),
/* harmony export */   DPM_PLATFORM_FEE: () => (/* binding */ DPM_PLATFORM_FEE),
/* harmony export */   FLAT_COMMENT_FEE: () => (/* binding */ FLAT_COMMENT_FEE),
/* harmony export */   FLAT_TRADE_FEE: () => (/* binding */ FLAT_TRADE_FEE),
/* harmony export */   LIQUIDITY_FEE: () => (/* binding */ LIQUIDITY_FEE),
/* harmony export */   PLATFORM_FEE: () => (/* binding */ PLATFORM_FEE),
/* harmony export */   noFees: () => (/* binding */ noFees)
/* harmony export */ });
const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/fees.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/fees.ts';
const FLAT_TRADE_FEE = 0.25;
const FLAT_COMMENT_FEE = 1;
const PLATFORM_FEE = 0;
const CREATOR_FEE = 0;
const LIQUIDITY_FEE = 0;
const DPM_PLATFORM_FEE = 0.0;
const DPM_CREATOR_FEE = 0.0;
const DPM_FEES = DPM_PLATFORM_FEE + DPM_CREATOR_FEE;
const noFees = {
    creatorFee: 0,
    platformFee: 0,
    liquidityFee: 0,
};


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/new-bet.ts":
/*!***************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/new-bet.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _computeCpmmBet: () => (/* binding */ _computeCpmmBet),
/* harmony export */   _computeFills: () => (/* binding */ _computeFills),
/* harmony export */   _getBetDownToOneMultiBetInfo: () => (/* binding */ _getBetDownToOneMultiBetInfo),
/* harmony export */   _getBinaryCpmmBetInfo: () => (/* binding */ _getBinaryCpmmBetInfo),
/* harmony export */   _getNewMultiBetInfo: () => (/* binding */ _getNewMultiBetInfo),
/* harmony export */   _getNewMultiCpmmBetInfo: () => (/* binding */ _getNewMultiCpmmBetInfo),
/* harmony export */   computeCpmmBet: () => (/* binding */ computeCpmmBet),
/* harmony export */   computeFills: () => (/* binding */ computeFills),
/* harmony export */   getBetDownToOneMultiBetInfo: () => (/* binding */ getBetDownToOneMultiBetInfo),
/* harmony export */   getBinaryCpmmBetInfo: () => (/* binding */ getBinaryCpmmBetInfo),
/* harmony export */   getNewMultiBetInfo: () => (/* binding */ getNewMultiBetInfo),
/* harmony export */   getNewMultiCpmmBetInfo: () => (/* binding */ getNewMultiCpmmBetInfo)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _calculate_dpm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculate-dpm */ "./src/ts/lib/manifold/common/src/calculate-dpm.ts");
/* harmony import */ var _calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculate-cpmm */ "./src/ts/lib/manifold/common/src/calculate-cpmm.ts");
/* harmony import */ var _fees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fees */ "./src/ts/lib/manifold/common/src/fees.ts");
/* harmony import */ var _util_object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/object */ "./src/ts/lib/manifold/common/src/util/object.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/math */ "./src/ts/lib/manifold/common/src/util/math.ts");
/* harmony import */ var _calculate_cpmm_arbitrage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./calculate-cpmm-arbitrage */ "./src/ts/lib/manifold/common/src/calculate-cpmm-arbitrage.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/new-bet.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/new-bet.ts';







/*WRAPPED*/ const _computeFill = (amount, outcome, limitProb, cpmmState, matchedBet, matchedBetUserBalance) => {
    const prob = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.getCpmmProbability)(cpmmState.pool, cpmmState.p);
    if (limitProb !== undefined &&
        (outcome === 'YES'
            ? (0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingGreaterEqual)(prob, limitProb) &&
                (matchedBet?.limitProb ?? 1) > limitProb
            : (0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingLesserEqual)(prob, limitProb) &&
                (matchedBet?.limitProb ?? 0) < limitProb)) {
        // No fill.
        return undefined;
    }
    const timestamp = Date.now();
    if (!matchedBet ||
        (outcome === 'YES'
            ? !(0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingGreaterEqual)(prob, matchedBet.limitProb)
            : !(0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingLesserEqual)(prob, matchedBet.limitProb))) {
        // Fill from pool.
        const limit = !matchedBet
            ? limitProb
            : outcome === 'YES'
                ? Math.min(matchedBet.limitProb, limitProb ?? 1)
                : Math.max(matchedBet.limitProb, limitProb ?? 0);
        const buyAmount = limit === undefined
            ? amount
            : Math.min(amount, (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.calculateCpmmAmountToProb)(cpmmState, limit, outcome));
        const { shares, newPool, newP, fees } = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.calculateCpmmPurchase)(cpmmState, buyAmount, outcome);
        const newState = { pool: newPool, p: newP };
        return {
            maker: {
                matchedBetId: null,
                shares,
                amount: buyAmount,
                state: newState,
                fees,
                timestamp,
            },
            taker: {
                matchedBetId: null,
                shares,
                amount: buyAmount,
                timestamp,
            },
        };
    }
    // Fill from matchedBet.
    const amountRemaining = matchedBet.orderAmount - matchedBet.amount;
    const matchableUserBalance = matchedBetUserBalance && matchedBetUserBalance < 0
        ? 0
        : matchedBetUserBalance;
    const amountToFill = Math.min(amountRemaining, matchableUserBalance ?? amountRemaining);
    const shares = Math.min(amount /
        (outcome === 'YES' ? matchedBet.limitProb : 1 - matchedBet.limitProb), amountToFill /
        (outcome === 'YES' ? 1 - matchedBet.limitProb : matchedBet.limitProb));
    const maker = {
        bet: matchedBet,
        matchedBetId: 'taker',
        amount: shares *
            (outcome === 'YES' ? 1 - matchedBet.limitProb : matchedBet.limitProb),
        shares,
        timestamp,
    };
    const taker = {
        matchedBetId: matchedBet.id,
        amount: shares *
            (outcome === 'YES' ? matchedBet.limitProb : 1 - matchedBet.limitProb),
        shares,
        timestamp,
    };
    return { maker, taker };
};
/*LOG2   */ const computeFill = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeFill()', github_file_url, 44), _computeFill);
/*WRAPPED*/ const _computeFills = (state, outcome, betAmount, limitProb, unfilledBets, balanceByUserId) => {
    if (isNaN(betAmount)) {
        throw new Error('Invalid bet amount: ${betAmount}');
    }
    if (isNaN(limitProb ?? 0)) {
        throw new Error('Invalid limitProb: ${limitProb}');
    }
    const now = Date.now();
    const sortedBets = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sortBy)(unfilledBets.filter((bet) => bet.outcome !== outcome && (bet.expiresAt ? bet.expiresAt > now : true)), (bet) => (outcome === 'YES' ? bet.limitProb : -bet.limitProb), (bet) => bet.createdTime);
    const takers = [];
    const makers = [];
    const ordersToCancel = [];
    let amount = betAmount;
    let cpmmState = { pool: state.pool, p: state.p };
    let totalFees = _fees__WEBPACK_IMPORTED_MODULE_4__.noFees;
    const currentBalanceByUserId = { ...balanceByUserId };
    let i = 0;
    while (true) {
        const matchedBet = sortedBets[i];
        const fill = computeFill(amount, outcome, limitProb, cpmmState, matchedBet, currentBalanceByUserId[matchedBet?.userId ?? '']);
        if (!fill)
            break;
        const { taker, maker } = fill;
        if (maker.matchedBetId === null) {
            // Matched against pool.
            // @ts-ignore
            cpmmState = maker.state;
            // @ts-ignore
            totalFees = (0,_util_object__WEBPACK_IMPORTED_MODULE_5__.addObjects)(totalFees, maker.fees);
            takers.push(taker);
        }
        else {
            // Matched against bet.
            i++;
            // @ts-ignore
            const { userId } = maker.bet;
            const makerBalance = currentBalanceByUserId[userId];
            if (makerBalance !== undefined) {
                if (maker.amount > 0) {
                    currentBalanceByUserId[userId] = makerBalance - maker.amount;
                }
                const adjustedMakerBalance = currentBalanceByUserId[userId];
                if (adjustedMakerBalance !== undefined && adjustedMakerBalance <= 0) {
                    // Now they've insufficient balance. Cancel maker bet.
                    // @ts-ignore
                    ordersToCancel.push(maker.bet);
                }
            }
            if ((0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingEqual)(maker.amount, 0))
                continue;
            takers.push(taker);
            // @ts-ignore
            makers.push(maker);
        }
        amount -= taker.amount;
        if ((0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingEqual)(amount, 0))
            break;
    }
    return { takers, makers, totalFees, cpmmState, ordersToCancel };
};
/*LOG2   */ const computeFills = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeFills()', github_file_url, 148), _computeFills);
/*WRAPPED*/ const _computeCpmmBet = (cpmmState, outcome, betAmount, limitProb, unfilledBets, balanceByUserId) => {
    const { takers, makers, cpmmState: afterCpmmState, ordersToCancel, } = computeFills(cpmmState, outcome, betAmount, limitProb, unfilledBets, balanceByUserId);
    const probBefore = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.getCpmmProbability)(cpmmState.pool, cpmmState.p);
    const probAfter = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.getCpmmProbability)(afterCpmmState.pool, afterCpmmState.p);
    const takerAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(takers, 'amount');
    const takerShares = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(takers, 'shares');
    const isFilled = (0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingEqual)(betAmount, takerAmount);
    return {
        orderAmount: betAmount,
        amount: takerAmount,
        shares: takerShares,
        isFilled,
        fills: takers,
        probBefore,
        probAfter,
        makers,
        ordersToCancel,
        ...afterCpmmState,
    };
};
/*LOG2   */ const computeCpmmBet = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('computeCpmmBet()', github_file_url, 236), _computeCpmmBet);
/*WRAPPED*/ const _getBinaryCpmmBetInfo = (contract, outcome, betAmount, limitProb, unfilledBets, balanceByUserId, user, expiresAt) => {
    const cpmmState = { pool: contract.pool, p: contract.p };
    const { orderAmount, amount, shares, isFilled, fills, probBefore, probAfter, makers, ordersToCancel, pool, p, } = computeCpmmBet(cpmmState, outcome, betAmount, limitProb, unfilledBets, balanceByUserId);
    // const newBet: CandidateBet = removeUndefinedProps({
    const newBet = (0,_util_object__WEBPACK_IMPORTED_MODULE_5__.removeUndefinedProps)({
        id: window.pState.getNextId(),
        userId: user.id,
        userAvatarUrl: user.avatarUrl,
        userUsername: user.username,
        userName: user.name,
        contractId: contract.id,
        orderAmount,
        amount,
        shares,
        limitProb,
        isFilled,
        isCancelled: false,
        fills,
        outcome,
        probBefore,
        probAfter,
        loanAmount: 0,
        createdTime: Date.now(),
        fees: _fees__WEBPACK_IMPORTED_MODULE_4__.noFees,
        isAnte: false,
        isRedemption: false,
        isChallenge: false,
        visibility: contract.visibility,
        expiresAt,
    });
    return {
        newBet,
        newPool: pool,
        newP: p,
        makers,
        ordersToCancel,
    };
};
/*LOG2   */ const getBinaryCpmmBetInfo = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getBinaryCpmmBetInfo()', github_file_url, 278), _getBinaryCpmmBetInfo);
/*WRAPPED*/ const _getNewMultiBetInfo = (outcome, amount, contract) => {
    const { pool, totalShares, totalBets } = contract;
    const prevOutcomePool = pool[outcome] ?? 0;
    const newPool = { ...pool, [outcome]: prevOutcomePool + amount };
    const shares = (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_2__.calculateDpmShares)(contract.totalShares, amount, outcome);
    const prevShares = totalShares[outcome] ?? 0;
    const newTotalShares = { ...totalShares, [outcome]: prevShares + shares };
    const prevTotalBets = totalBets[outcome] ?? 0;
    const newTotalBets = { ...totalBets, [outcome]: prevTotalBets + amount };
    const probBefore = (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_2__.getDpmOutcomeProbability)(totalShares, outcome);
    const probAfter = (0,_calculate_dpm__WEBPACK_IMPORTED_MODULE_2__.getDpmOutcomeProbability)(newTotalShares, outcome);
    const newBet = {
        contractId: contract.id,
        amount,
        loanAmount: 0,
        shares,
        outcome,
        probBefore,
        probAfter,
        createdTime: Date.now(),
        fees: _fees__WEBPACK_IMPORTED_MODULE_4__.noFees,
        isAnte: false,
        isRedemption: false,
        isChallenge: false,
        visibility: contract.visibility,
    };
    return { newBet, newPool, newTotalShares, newTotalBets };
};
/*LOG2   */ const getNewMultiBetInfo = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getNewMultiBetInfo()', github_file_url, 339), _getNewMultiBetInfo);
/*WRAPPED*/ const _getNewMultiCpmmBetInfo = (contract, answers, answer, outcome, betAmount, limitProb, unfilledBets, balanceByUserId, expiresAt) => {
    if (contract.shouldAnswersSumToOne) {
        return getNewMultiCpmmBetInfoSumsToOne(contract, answers, answer, outcome, betAmount, limitProb, unfilledBets, balanceByUserId, expiresAt);
    }
    const { poolYes, poolNo } = answer;
    const pool = { YES: poolYes, NO: poolNo };
    const cpmmState = { pool, p: 0.5 };
    const answerUnfilledBets = unfilledBets.filter((b) => b.answerId === answer.id);
    const { amount, fills, isFilled, makers, ordersToCancel, probAfter, probBefore, shares, pool: newPool, } = computeCpmmBet(cpmmState, outcome, betAmount, limitProb, answerUnfilledBets, balanceByUserId);
    const newBet = (0,_util_object__WEBPACK_IMPORTED_MODULE_5__.removeUndefinedProps)({
        contractId: contract.id,
        outcome,
        orderAmount: betAmount,
        limitProb,
        isCancelled: false,
        amount,
        loanAmount: 0,
        shares,
        answerId: answer.id,
        fills,
        isFilled,
        probBefore,
        probAfter,
        createdTime: Date.now(),
        fees: _fees__WEBPACK_IMPORTED_MODULE_4__.noFees,
        isAnte: false,
        isRedemption: false,
        isChallenge: false,
        visibility: contract.visibility,
        expiresAt,
    });
    return { newBet, newPool, makers, ordersToCancel };
};
/*LOG2   */ const getNewMultiCpmmBetInfo = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getNewMultiCpmmBetInfo()', github_file_url, 379), _getNewMultiCpmmBetInfo);
/*WRAPPED*/ const _getNewMultiCpmmBetInfoSumsToOne = (contract, answers, answer, outcome, betAmount, limitProb, unfilledBets, balanceByUserId, expiresAt) => {
    const { newBetResult, otherBetResults } = (0,_calculate_cpmm_arbitrage__WEBPACK_IMPORTED_MODULE_7__.calculateCpmmMultiArbitrageBet)(answers, answer, outcome, betAmount, limitProb, unfilledBets, balanceByUserId);
    const now = Date.now();
    const { takers, cpmmState } = newBetResult;
    const probAfter = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.getCpmmProbability)(cpmmState.pool, cpmmState.p);
    const amount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(takers, 'amount');
    const shares = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(takers, 'shares');
    const newBet = (0,_util_object__WEBPACK_IMPORTED_MODULE_5__.removeUndefinedProps)({
        contractId: contract.id,
        outcome,
        orderAmount: betAmount,
        limitProb,
        isCancelled: false,
        amount,
        loanAmount: 0,
        shares,
        answerId: answer.id,
        fills: takers,
        isFilled: (0,_util_math__WEBPACK_IMPORTED_MODULE_6__.floatingEqual)(amount, betAmount),
        probBefore: answer.prob,
        probAfter,
        createdTime: now,
        fees: _fees__WEBPACK_IMPORTED_MODULE_4__.noFees,
        isAnte: false,
        isRedemption: false,
        isChallenge: false,
        visibility: contract.visibility,
        expiresAt,
    });
    const otherResultsWithBet = otherBetResults.map((result) => {
        const { answer, takers, cpmmState, outcome } = result;
        const probBefore = answer.prob;
        const probAfter = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.getCpmmProbability)(cpmmState.pool, cpmmState.p);
        const bet = (0,_util_object__WEBPACK_IMPORTED_MODULE_5__.removeUndefinedProps)({
            contractId: contract.id,
            outcome,
            orderAmount: 0,
            isCancelled: false,
            amount: 0,
            loanAmount: 0,
            shares: 0,
            answerId: answer.id,
            fills: takers,
            isFilled: true,
            probBefore,
            probAfter,
            createdTime: now,
            fees: _fees__WEBPACK_IMPORTED_MODULE_4__.noFees,
            isAnte: false,
            isRedemption: true,
            isChallenge: false,
            visibility: contract.visibility,
        });
        return {
            ...result,
            bet,
        };
    });
    return {
        newBet,
        newPool: cpmmState.pool,
        makers: newBetResult.makers,
        ordersToCancel: newBetResult.ordersToCancel,
        otherBetResults: otherResultsWithBet,
    };
};
/*LOG2   */ const getNewMultiCpmmBetInfoSumsToOne = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getNewMultiCpmmBetInfoSumsToOne()', github_file_url, 457), _getNewMultiCpmmBetInfoSumsToOne);
/*WRAPPED*/ const _getBetDownToOneMultiBetInfo = (contract, answers, unfilledBets, balanceByUserId) => {
    const { noBetResults, extraMana } = (0,_calculate_cpmm_arbitrage__WEBPACK_IMPORTED_MODULE_7__.buyNoSharesUntilAnswersSumToOne)(answers, unfilledBets, balanceByUserId);
    const now = Date.now();
    const betResults = noBetResults.map((result) => {
        const { answer, takers, cpmmState } = result;
        const probBefore = answer.prob;
        const probAfter = (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_3__.getCpmmProbability)(cpmmState.pool, cpmmState.p);
        const bet = (0,_util_object__WEBPACK_IMPORTED_MODULE_5__.removeUndefinedProps)({
            contractId: contract.id,
            outcome: 'NO',
            orderAmount: 0,
            isCancelled: false,
            amount: 0,
            loanAmount: 0,
            shares: 0,
            answerId: answer.id,
            fills: takers,
            isFilled: true,
            probBefore,
            probAfter,
            createdTime: now,
            fees: _fees__WEBPACK_IMPORTED_MODULE_4__.noFees,
            isAnte: false,
            isRedemption: true,
            isChallenge: false,
            visibility: contract.visibility,
        });
        return {
            ...result,
            bet,
        };
    });
    return {
        betResults,
        extraMana,
    };
};
/*LOG2   */ const getBetDownToOneMultiBetInfo = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getBetDownToOneMultiBetInfo()', github_file_url, 547), _getBetDownToOneMultiBetInfo);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/new-contract.ts":
/*!********************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/new-contract.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NEW_MARKET_IMPORTANCE_SCORE: () => (/* binding */ NEW_MARKET_IMPORTANCE_SCORE),
/* harmony export */   _getNewContract: () => (/* binding */ _getNewContract),
/* harmony export */   getNewContract: () => (/* binding */ getNewContract)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _util_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/object */ "./src/ts/lib/manifold/common/src/util/object.ts");
/* harmony import */ var _calculate_metrics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculate-metrics */ "./src/ts/lib/manifold/common/src/calculate-metrics.ts");
/* harmony import */ var _util_random__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/random */ "./src/ts/lib/manifold/common/src/util/random.ts");
/* harmony import */ var _calculate_cpmm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./calculate-cpmm */ "./src/ts/lib/manifold/common/src/calculate-cpmm.ts");
const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/new-contract.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/new-contract.ts';

const file = 'common/src/new-contract.ts';




const NEW_MARKET_IMPORTANCE_SCORE = 0.25;
/*WRAPPED*/ function _getNewContract(id, slug, creator, question, outcomeType, description, initialProb, ante, closeTime, visibility, 
// twitch
isTwitchContract, 
// used for numeric markets
min, max, isLogScale, answers, addAnswersMode, shouldAnswersSumToOne, 
// Manifold.love
loverUserId1, loverUserId2) {
    const createdTime = Date.now();
    const propsByOutcomeType = {
        BINARY: () => getBinaryCpmmProps(initialProb, ante),
        PSEUDO_NUMERIC: () => getPseudoNumericCpmmProps(initialProb, ante, min, max, isLogScale),
        MULTIPLE_CHOICE: () => getMultipleChoiceProps(id, creator.id, answers, addAnswersMode ?? 'DISABLED', shouldAnswersSumToOne ?? true, ante),
        STONK: () => getStonkCpmmProps(initialProb, ante),
        BOUNTIED_QUESTION: () => getBountiedQuestionProps(),
        POLL: () => getPollProps(answers),
    }[outcomeType]();
    const contract = (0,_util_object__WEBPACK_IMPORTED_MODULE_1__.removeUndefinedProps)({
        id,
        slug,
        ...propsByOutcomeType,
        creatorId: creator.id,
        creatorName: creator.name,
        creatorUsername: creator.username,
        creatorAvatarUrl: creator.avatarUrl,
        creatorCreatedTime: creator.createdTime,
        question: question.trim(),
        description,
        visibility,
        unlistedById: visibility === 'unlisted' ? creator.id : undefined,
        isResolved: false,
        createdTime,
        closeTime,
        dailyScore: 0,
        popularityScore: 0,
        importanceScore: NEW_MARKET_IMPORTANCE_SCORE,
        uniqueBettorCount: 0,
        lastUpdatedTime: createdTime,
        volume: 0,
        volume24Hours: 0,
        elasticity: propsByOutcomeType.mechanism === 'cpmm-1'
            ? (0,_calculate_metrics__WEBPACK_IMPORTED_MODULE_2__.computeBinaryCpmmElasticityFromAnte)(ante)
            : 4.99,
        collectedFees: {
            creatorFee: 0,
            liquidityFee: 0,
            platformFee: 0,
        },
        isTwitchContract,
        loverUserId1,
        loverUserId2,
    });
    return contract;
}
/*LOG2   */ const getNewContract = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getNewContract()', github_file_url, 26), _getNewContract);
// import { PHANTOM_ANTE } from './antes'
// import { calcDpmInitialPool } from './calculate-dpm'
/*WRAPPED*/ /* const _getBinaryDpmProps = (initialProb: number, ante: number) => {
  const { sharesYes, sharesNo, poolYes, poolNo, phantomYes, phantomNo } =
    calcDpmInitialPool(initialProb, ante, PHANTOM_ANTE)

  const system: DPM & Binary = {
    mechanism: 'dpm-2',
    outcomeType: 'BINARY',
    initialProbability: initialProb / 100,
    phantomShares: { YES: phantomYes, NO: phantomNo },
    pool: { YES: poolYes, NO: poolNo },
    totalShares: { YES: sharesYes, NO: sharesNo },
    totalBets: { YES: poolYes, NO: poolNo },
  }

  return system
}
*/
// /*LOG2   */ const getBinaryDpmProps = logCall('Entering ' + codeUrl('getBinaryDpmProps()', github_file_url, 121), _getBinaryDpmProps);
/*WRAPPED*/ const _getBinaryCpmmProps = (initialProb, ante) => {
    const pool = { YES: ante, NO: ante };
    const p = initialProb / 100;
    const system = {
        mechanism: 'cpmm-1',
        outcomeType: 'BINARY',
        totalLiquidity: ante,
        subsidyPool: 0,
        initialProbability: p,
        p,
        pool: pool,
        prob: initialProb,
        probChanges: { day: 0, week: 0, month: 0 },
    };
    return system;
};
/*LOG2   */ const getBinaryCpmmProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getBinaryCpmmProps()', github_file_url, 139), _getBinaryCpmmProps);
/*WRAPPED*/ const _getPseudoNumericCpmmProps = (initialProb, ante, min, max, isLogScale) => {
    const system = {
        ...getBinaryCpmmProps(initialProb, ante),
        outcomeType: 'PSEUDO_NUMERIC',
        min,
        max,
        isLogScale,
    };
    return system;
};
/*LOG2   */ const getPseudoNumericCpmmProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getPseudoNumericCpmmProps()', github_file_url, 158), _getPseudoNumericCpmmProps);
/*WRAPPED*/ const _getStonkCpmmProps = (initialProb, ante) => {
    const system = {
        ...getBinaryCpmmProps(initialProb, ante),
        outcomeType: 'STONK',
    };
    return system;
};
/*LOG2   */ const getStonkCpmmProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getStonkCpmmProps()', github_file_url, 175), _getStonkCpmmProps);
/*WRAPPED*/ const _getMultipleChoiceProps = (contractId, userId, answers, addAnswersMode, shouldAnswersSumToOne, ante) => {
    const answersWithOther = answers.concat(!shouldAnswersSumToOne || addAnswersMode === 'DISABLED' ? [] : ['Other']);
    const answerObjects = createAnswers(contractId, userId, addAnswersMode, shouldAnswersSumToOne, ante, answersWithOther);
    const system = {
        mechanism: 'cpmm-multi-1',
        outcomeType: 'MULTIPLE_CHOICE',
        addAnswersMode: addAnswersMode ?? 'DISABLED',
        shouldAnswersSumToOne: shouldAnswersSumToOne ?? true,
        answers: answerObjects,
        totalLiquidity: ante,
        subsidyPool: 0,
    };
    return system;
};
/*LOG2   */ const getMultipleChoiceProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getMultipleChoiceProps()', github_file_url, 183), _getMultipleChoiceProps);
/*WRAPPED*/ function _createAnswers(contractId, userId, addAnswersMode, shouldAnswersSumToOne, ante, answers) {
    const ids = answers.map(() => (0,_util_random__WEBPACK_IMPORTED_MODULE_3__.randomString)());
    let prob = 0.5;
    let poolYes = ante / answers.length;
    let poolNo = ante / answers.length;
    if (shouldAnswersSumToOne && answers.length > 1) {
        const n = answers.length;
        prob = 1 / n;
        // Maximize use of ante given constraint that one answer resolves YES and
        // the rest resolve NO.
        // Means that:
        //   ante = poolYes + (n - 1) * poolNo
        // because this pays out ante mana to winners in this case.
        // Also, cpmm identity for probability:
        //   1 / n = poolNo / (poolYes + poolNo)
        poolNo = ante / (2 * n - 2);
        poolYes = ante / 2;
        // Naive solution that doesn't maximize liquidity:
        // poolYes = ante * prob
        // poolNo = ante * (prob ** 2 / (1 - prob))
    }
    const now = Date.now();
    return answers.map((text, i) => {
        const id = ids[i];
        const answer = {
            id,
            index: i,
            contractId,
            userId,
            text,
            createdTime: now,
            poolYes,
            poolNo,
            prob,
            totalLiquidity: (0,_calculate_cpmm__WEBPACK_IMPORTED_MODULE_4__.getMultiCpmmLiquidity)({ YES: poolYes, NO: poolNo }),
            subsidyPool: 0,
            isOther: shouldAnswersSumToOne &&
                addAnswersMode !== 'DISABLED' &&
                i === answers.length - 1,
        };
        return answer;
    });
}
/*LOG2   */ const createAnswers = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('createAnswers()', github_file_url, 215), _createAnswers);
/*WRAPPED*/ const _getBountiedQuestionProps = () => {
    const system = {
        mechanism: 'none',
        outcomeType: 'BOUNTIED_QUESTION',
        bountyTxns: [],
        totalBounty: 0,
        bountyLeft: 0,
    };
    return system;
};
/*LOG2   */ const getBountiedQuestionProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getBountiedQuestionProps()', github_file_url, 273), _getBountiedQuestionProps);
/*WRAPPED*/ const _getPollProps = (answers) => {
    const ids = answers.map(() => (0,_util_random__WEBPACK_IMPORTED_MODULE_3__.randomString)());
    const options = answers.map((answer, i) => ({
        id: ids[i],
        index: i,
        text: answer,
        votes: 0,
    }));
    const system = {
        mechanism: 'none',
        outcomeType: 'POLL',
        options: options,
    };
    return system;
};
/*LOG2   */ const getPollProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getPollProps()', github_file_url, 285), _getPollProps);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts":
/*!********************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/playground/nested-logger.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NestedLogger: () => (/* binding */ NestedLogger),
/* harmony export */   codeUrl: () => (/* binding */ codeUrl),
/* harmony export */   logCall: () => (/* binding */ logCall)
/* harmony export */ });
const MANIFOLD_GIT_SHA = '74ab5cae';
const MANIFOLD_GIT_URL = `https://github.com/manifoldmarkets/manifold/blob/${MANIFOLD_GIT_SHA}/`;
class NestedLogger {
    logs = {};
    currentContext = this.logs;
    contextStack = [];
    baseLog(key, message = "") {
        let repetition_index = 2;
        let fullKey = key;
        while (fullKey in this.currentContext) {
            fullKey = `${key} (${repetition_index++})`;
        }
        this.currentContext[fullKey] = JSON.parse(JSON.stringify(message));
        // If message is a list filter out objects in the list with "ignore" set to true.
        // This is mostly to keep the playground states out of the arg lists
        // if (Array.isArray(this.currentContext[fullKey])) {
        //   this.currentContext[fullKey] = this.currentContext[fullKey].filter((item) => !item.ignoreInArgList);
        // }
        if (message) {
            return key + " " + message.toString();
        }
        else {
            return key;
        }
    }
    log(key, message = "") {
        const wrapped_key = `<span class='manifold-op'>${key}</span>`;
        return this.baseLog(wrapped_key, message);
    }
    pLog(key, message = "") {
        const wrapped_key = `<span class='playground-op'>${key}</span>`;
        return this.baseLog(wrapped_key, message);
    }
    throw(key, message = "") {
        const wrapped_key = `<span class='error-op'>${key}</span>`;
        this.baseLog(wrapped_key, message);
        throw new Error(key + " " + message.toString());
    }
    in() {
        // Enter the most recent message (last property in the current context)
        const keys = Object.keys(this.currentContext);
        const lastKey = keys[keys.length - 1];
        // Assert that the last key doesn't have a truthy value since it will be overwritten
        if (this.currentContext[lastKey]) {
            throw new Error(`Cannot enter message ${lastKey} because it already has a value of ${this.currentContext[lastKey]}`);
        }
        this.currentContext[lastKey] = {};
        if (lastKey) {
            this.contextStack.push(this.currentContext);
            this.currentContext = this.currentContext[lastKey];
        }
    }
    getCurrentNestingLevel() {
        return this.contextStack.length;
    }
    out(level = -2) {
        // By default, exit to the previous nesting level
        if (level == -2) {
            return this.out(this.getCurrentNestingLevel() - 1);
        }
        if (level < 0 || level > this.getCurrentNestingLevel()) {
            throw new Error('Invalid nesting level');
        }
        // Exit to a given nesting level
        while (this.getCurrentNestingLevel() > level) {
            this.currentContext = this.contextStack.pop() || this.logs;
        }
    }
    getLog() {
        // Get the complete logs object
        return this.logs;
    }
}
//Return an html string that will be displayed in the log
function codeUrl(text, url, line_number) {
    return `<a href="${url}#L${line_number}" target="_blank">${text}</a>`;
}
function logCall(message, func) {
    return function (...args) {
        const indent_level = window.logger.getCurrentNestingLevel();
        window.logger.log(message);
        try {
            window.logger.in();
            window.logger.log(`...with args`, args);
            const result = func.apply(this, args);
            window.logger.log(`...returning`, result);
            return result;
        }
        finally {
            window.logger.out(indent_level);
        }
    };
}
//// Example usage:
// const logger = new NestedLogger();
// logger.log("Placing bet");
// logger.in();
// logger.log("Running validations");
// logger.in();
// logger.log("Checking balance");
// logger.log("Checking close time");
// logger.exit();
// logger.log("Executing transaction");
// console.log(JSON.stringify(logger.getLog(), null, 2));


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/playground/playground-state.ts":
/*!***********************************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/playground/playground-state.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlaygroundState: () => (/* binding */ PlaygroundState)
/* harmony export */ });
/* harmony import */ var _api_create_market__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/create-market */ "./src/ts/lib/manifold/common/src/api/create-market.ts");
/* harmony import */ var _api_place_bet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/place-bet */ "./src/ts/lib/manifold/common/src/api/place-bet.ts");


const deposit_exempt_categories = [
    'BUY_SHARES',
    'SELL_SHARES',
    'RESOLUTION_PAYOUT',
];
const EXAMPLE_USER_ID_LIST = [
    'alice',
    'bob',
    'carol',
    'dave',
    'eve',
    'frank',
    'grace',
    'heidi',
    'ivan',
    'judy',
    'mallory',
];
const EXAMPLE_QUESTION_LIST = [
    "Will we succeed in",
    "Will we look funny in",
    "Will we explode before",
];
const DEFAULT_USER_PARAMS = {
    id: '0',
    createdTime: 0,
    name: 'user_name',
    username: 'user_username',
    avatarUrl: '',
    balance: 1000,
    totalDeposits: 1000,
    profitCached: {
        daily: 0,
        weekly: 0,
        monthly: 0,
        allTime: 0
    },
    creatorTraders: {
        daily: 0,
        weekly: 0,
        monthly: 0,
        allTime: 0
    },
    nextLoanCached: 0,
    streakForgiveness: 0
};
const DEFAULT_CONTRACT_PARAMS = {
    // id: '1', // assigned in createmarket
    // slug: 'slug', // assigned in createmarket
    // userId: 'userId', // taken from the request body on manifold, passed in as a separate argument here
    question: 'Will we succeed?',
    outcomeType: 'BINARY',
    description: 'This is a description',
    initialProb: 50,
    ante: 50,
    closeTime: undefined,
    visibility: 'public',
    isTwitchContract: false,
    min: undefined,
    max: undefined,
    isLogScale: undefined,
    answers: undefined,
    addAnswersMode: undefined,
    shouldAnswersSumToOne: undefined,
    loverUserId1: undefined,
    loverUserId2: undefined
};
const DEFAULT_BET_PARAMS = {
    amount: 10,
    contractId: undefined,
    replyToCommentId: undefined,
};
const DEFAULT_BINARY_BET_PARAMS = {
    ...DEFAULT_BET_PARAMS,
    outcome: 'YES',
    limitProb: undefined,
    expiresAt: undefined,
};
const DEFAULT_MULTI_BET_PARAMS = {
    ...DEFAULT_BINARY_BET_PARAMS,
    answerId: undefined,
};
class PlaygroundState {
    bank;
    ignoreInArgList;
    users;
    contracts;
    bets;
    txns;
    id_index;
    contract_id_index;
    user_id_index;
    example_question_index;
    constructor() {
        this.users = {};
        this.contracts = {};
        this.bets = {};
        this.txns = {};
        this.bank = {
            id: "bank",
            balance: 100000,
        };
        this.id_index = 1;
        this.user_id_index = 0;
        this.contract_id_index = 0;
        this.example_question_index = 0;
        this.ignoreInArgList = true;
    }
    getNextId() {
        return "" + this.id_index++;
    }
    getNextUserId() {
        // From the list of example users
        let id = EXAMPLE_USER_ID_LIST[this.user_id_index % EXAMPLE_USER_ID_LIST.length];
        // If we reached the end of the list, go back and add a 1, etc.
        if (this.user_id_index >= EXAMPLE_USER_ID_LIST.length) {
            id += Math.floor(this.user_id_index / EXAMPLE_USER_ID_LIST.length) + 1;
        }
        this.user_id_index++;
        this.getNextId();
        return id;
    }
    getNextContractId() {
        // Cycle through A to Z, then AA to ZZ
        let id = "";
        if (this.contract_id_index >= 26) {
            id += String.fromCharCode(65 + Math.floor(this.contract_id_index / 26) - 1);
        }
        id += String.fromCharCode(65 + this.contract_id_index % 26);
        this.contract_id_index++;
        return id;
    }
    getNextExampleQuestion() {
        return EXAMPLE_QUESTION_LIST[this.example_question_index % EXAMPLE_QUESTION_LIST.length]
            + " " + (2024 + Math.floor(this.example_question_index++ / EXAMPLE_QUESTION_LIST.length)) + "?";
    }
    addUser(user) {
        if (this.users[user.id]) {
            window.logger.throw("PlaygroundError", `User ${user.id} already exists`);
        }
        this.users[user.id] = user;
        window.logger.pLog(`Saving user "${user.id}"`, user);
        return user;
    }
    addUserWithDefaultProps(overrides = {}) {
        const id = overrides['id'] || this.getNextUserId();
        const user = {
            ...DEFAULT_USER_PARAMS,
            id: id,
            username: id,
            name: id.charAt(0).toUpperCase() + id.slice(1),
            createdTime: Date.now(),
            ...overrides,
        };
        return this.addUser(user);
    }
    getUser(id) {
        return this.users[id];
    }
    getUsers() {
        return Object.values(this.users);
    }
    getFirstUser() {
        const users = Object.values(this.users);
        if (users.length > 0)
            return users[0];
        window.logger.pLog(`No users exist. Creating a default user`);
        window.logger.in();
        const user = this.addUserWithDefaultProps();
        window.logger.out();
        return user;
    }
    addContractWithDefaultProps(userId = undefined, overrides = {}) {
        if (!userId) {
            userId = this.getFirstUser().id;
            window.logger.pLog(`Defaulting to create with first user`, userId);
        }
        else {
            window.logger.pLog(`Creating contract with user ${userId}`);
        }
        window.logger.in();
        const contract = (0,_api_create_market__WEBPACK_IMPORTED_MODULE_0__.createmarket)({
            ...DEFAULT_CONTRACT_PARAMS,
            ...overrides,
        }, userId);
        window.logger.out();
        return this.addContract(contract);
    }
    addContract(contract) {
        if (this.contracts[contract.id]) {
            window.logger.throw("PlaygroundError", `Contract ${contract.id} already exists`);
        }
        window.logger.pLog(`Saving contract "${contract.id}"`, contract);
        this.contracts[contract.id] = contract;
        return contract;
    }
    getContract(id) {
        return this.contracts[id];
    }
    getContracts() {
        return Object.values(this.contracts);
    }
    getContractsByCreatorId(userId) {
        return Object.values(this.contracts).filter(contract => contract.creatorId === userId);
    }
    getLatestContract() {
        if (Object.values(this.contracts).length > 0)
            return Object.values(this.contracts).sort((a, b) => b.createdTime - a.createdTime)[0];
        window.logger.pLog("No contracts exist yet, creating a default contract");
        window.logger.in();
        const contract = this.addContractWithDefaultProps();
        window.logger.out();
        return contract;
    }
    placeBetWithDefaultProps(body, userId, isApi) {
        if (!userId) {
            window.logger.pLog(`userId not specified, defaulting to first user for bet`);
            userId = this.getFirstUser().id;
        }
        if (!('contractId' in body)) {
            window.logger.pLog("contractId not specified, defaulting to newest");
            const contract = this.getLatestContract();
            body.contractId = contract.id;
        }
        return (0,_api_place_bet__WEBPACK_IMPORTED_MODULE_1__.placebet)({
            ...DEFAULT_BINARY_BET_PARAMS,
            ...body
        }, userId, isApi); // in the course of running placebet, it will call the playground's addBet
    }
    addBet(bet) {
        if (bet.id === undefined) {
            bet.id = this.getNextId();
        }
        if (this.bets[bet.id]) {
            window.logger.throw("PlaygroundError", `Bet ${bet.id} already exists`);
        }
        this.bets[bet.id] = bet;
        return bet;
    }
    getBet(id) {
        return this.bets[id];
    }
    getBetsByContractId(contractId) {
        return Object.values(this.bets).filter(bet => bet.contractId === contractId);
    }
    getUnfilledBetsByContractId(contractId) {
        return Object.values(this.bets).filter(bet => bet.contractId === contractId
            && bet.isFilled === false
            && bet.isCancelled === false);
    }
    getBetsByAnswerId(answerId) {
        return Object.values(this.bets).filter(bet => bet.answerId === answerId);
    }
    getBetsByUserId(userId) {
        return Object.values(this.bets).filter(bet => bet.userId === userId);
    }
    getBetsByAnswerIdAndUserId(answerId, userId) {
        return Object.values(this.bets).filter(bet => bet.answerId === answerId && bet.userId === userId);
    }
    addTxn(txn) {
        if (this.txns[txn.id]) {
            window.logger.throw("PlaygroundError", `Txn ${txn.id} already exists`);
        }
        this.txns[txn.id] = txn;
    }
    getTxn(id) {
        return this.txns[id];
    }
}


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/pseudo-numeric.ts":
/*!**********************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/pseudo-numeric.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _formatNumericProbability: () => (/* binding */ _formatNumericProbability),
/* harmony export */   _getFormattedMappedValue: () => (/* binding */ _getFormattedMappedValue),
/* harmony export */   _getMappedValue: () => (/* binding */ _getMappedValue),
/* harmony export */   _getPseudoProbability: () => (/* binding */ _getPseudoProbability),
/* harmony export */   formatNumericProbability: () => (/* binding */ formatNumericProbability),
/* harmony export */   getFormattedMappedValue: () => (/* binding */ getFormattedMappedValue),
/* harmony export */   getMappedValue: () => (/* binding */ getMappedValue),
/* harmony export */   getPseudoProbability: () => (/* binding */ getPseudoProbability)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _util_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/format */ "./src/ts/lib/manifold/common/src/util/format.ts");
/* harmony import */ var _stonk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stonk */ "./src/ts/lib/manifold/common/src/stonk.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/pseudo-numeric.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/pseudo-numeric.ts';


/*WRAPPED*/ function _formatNumericProbability(p, contract) {
    const value = getMappedValue(contract, p);
    return (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatLargeNumber)(value);
}
/*LOG2   */ const formatNumericProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatNumericProbability()', github_file_url, 5), _formatNumericProbability);
/*WRAPPED*/ const _getMappedValue = (contract, prob) => {
    if (contract.outcomeType !== 'PSEUDO_NUMERIC' &&
        contract.outcomeType !== 'STONK')
        return prob;
    if (contract.outcomeType === 'STONK')
        return (0,_stonk__WEBPACK_IMPORTED_MODULE_2__.getStonkPriceAtProb)(contract, prob);
    const { min, max, isLogScale } = contract;
    if (isLogScale) {
        const logValue = prob * Math.log10(max - min + 1);
        return 10 ** logValue + min - 1;
    }
    return prob * (max - min) + min;
};
/*LOG2   */ const getMappedValue = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getMappedValue()', github_file_url, 13), _getMappedValue);
/*WRAPPED*/ const _getFormattedMappedValue = (contract, prob) => {
    const { outcomeType } = contract;
    if (outcomeType !== 'PSEUDO_NUMERIC' && outcomeType !== 'STONK')
        return (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatPercent)(prob);
    const value = getMappedValue(contract, prob);
    return (0,_util_format__WEBPACK_IMPORTED_MODULE_1__.formatLargeNumber)(value);
};
/*LOG2   */ const getFormattedMappedValue = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getFormattedMappedValue()', github_file_url, 33), _getFormattedMappedValue);
/*WRAPPED*/ const _getPseudoProbability = (value, min, max, isLogScale = false) => {
    if (value < min)
        return 0;
    if (value > max)
        return 1;
    if (isLogScale) {
        return Math.log10(value - min + 1) / Math.log10(max - min + 1);
    }
    return (value - min) / (max - min);
};
/*LOG2   */ const getPseudoProbability = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getPseudoProbability()', github_file_url, 42), _getPseudoProbability);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/redeem.ts":
/*!**************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/redeem.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _getBinaryRedeemableAmount: () => (/* binding */ _getBinaryRedeemableAmount),
/* harmony export */   _getRedemptionBets: () => (/* binding */ _getRedemptionBets),
/* harmony export */   getBinaryRedeemableAmount: () => (/* binding */ getBinaryRedeemableAmount),
/* harmony export */   getRedemptionBets: () => (/* binding */ getRedemptionBets)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fees */ "./src/ts/lib/manifold/common/src/fees.ts");
/* harmony import */ var _util_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/object */ "./src/ts/lib/manifold/common/src/util/object.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/redeem.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/redeem.ts';



/*WRAPPED*/ const _getBinaryRedeemableAmount = (bets) => {
    const [yesBets, noBets] = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.partition)(bets, (b) => b.outcome === 'YES');
    const yesShares = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(yesBets, (b) => b.shares);
    const noShares = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(noBets, (b) => b.shares);
    const shares = Math.max(Math.min(yesShares, noShares), 0);
    const soldFrac = shares > 0 ? shares / Math.max(yesShares, noShares) : 0;
    const loanAmount = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sumBy)(bets, (bet) => bet.loanAmount ?? 0);
    const loanPayment = loanAmount * soldFrac;
    const netAmount = shares - loanPayment;
    return { shares, loanPayment, netAmount };
};
/*LOG2   */ const getBinaryRedeemableAmount = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getBinaryRedeemableAmount()', github_file_url, 14), _getBinaryRedeemableAmount);
/*WRAPPED*/ const _getRedemptionBets = (contract, shares, loanPayment, prob, answerId) => {
    const createdTime = Date.now();
    const yesBet = (0,_util_object__WEBPACK_IMPORTED_MODULE_3__.removeUndefinedProps)({
        contractId: contract.id,
        amount: prob * -shares,
        shares: -shares,
        loanAmount: loanPayment ? -loanPayment / 2 : 0,
        outcome: 'YES',
        probBefore: prob,
        probAfter: prob,
        createdTime,
        fees: _fees__WEBPACK_IMPORTED_MODULE_2__.noFees,
        isAnte: false,
        isRedemption: true,
        isChallenge: false,
        visibility: contract.visibility,
        answerId,
    });
    const noBet = (0,_util_object__WEBPACK_IMPORTED_MODULE_3__.removeUndefinedProps)({
        contractId: contract.id,
        amount: (1 - prob) * -shares,
        shares: -shares,
        loanAmount: loanPayment ? -loanPayment / 2 : 0,
        outcome: 'NO',
        probBefore: prob,
        probAfter: prob,
        createdTime,
        fees: _fees__WEBPACK_IMPORTED_MODULE_2__.noFees,
        isAnte: false,
        isRedemption: true,
        isChallenge: false,
        visibility: contract.visibility,
        answerId,
    });
    return [yesBet, noBet];
};
/*LOG2   */ const getRedemptionBets = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getRedemptionBets()', github_file_url, 28), _getRedemptionBets);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/stonk.ts":
/*!*************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/stonk.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   STONK_INITIAL_PROB: () => (/* binding */ STONK_INITIAL_PROB),
/* harmony export */   STONK_NO: () => (/* binding */ STONK_NO),
/* harmony export */   STONK_YES: () => (/* binding */ STONK_YES),
/* harmony export */   _getSharesFromStonkShares: () => (/* binding */ _getSharesFromStonkShares),
/* harmony export */   _getStonkDisplayShares: () => (/* binding */ _getStonkDisplayShares),
/* harmony export */   _getStonkPriceAtProb: () => (/* binding */ _getStonkPriceAtProb),
/* harmony export */   _getStonkPriceMax: () => (/* binding */ _getStonkPriceMax),
/* harmony export */   getSharesFromStonkShares: () => (/* binding */ getSharesFromStonkShares),
/* harmony export */   getStonkDisplayShares: () => (/* binding */ getStonkDisplayShares),
/* harmony export */   getStonkPriceAtProb: () => (/* binding */ getStonkPriceAtProb),
/* harmony export */   getStonkPriceMax: () => (/* binding */ getStonkPriceMax)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/stonk.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/stonk.ts';
const STONK_YES = 'BUY';
const STONK_NO = 'SHORT';
const STONK_INITIAL_PROB = 50;
const DEFAULT_STONK_MULTIPLIER = 500;
// Doesn't seem necessary to show the max as *stocks* should be unbounded
/*WRAPPED*/ const _getStonkPriceMax = () => {
    return Math.round(getStonkPriceAtProb({}, 1));
};
/*LOG2   */ const getStonkPriceMax = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getStonkPriceMax()', github_file_url, 9), _getStonkPriceMax);
// TODO: remove unused contract param if we ever settle on a pricing mechanism
/*WRAPPED*/ const _getStonkPriceAtProb = (contract, prob) => {
    const cappedProb = Math.min(Math.max(prob, 0.0001), 0.9999);
    const logTerm = Math.log(cappedProb / (1 - cappedProb));
    const maxTerm = Math.max(logTerm, cappedProb);
    const stonkPrice = maxTerm * DEFAULT_STONK_MULTIPLIER;
    return stonkPrice;
};
/*LOG2   */ const getStonkPriceAtProb = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getStonkPriceAtProb()', github_file_url, 14), _getStonkPriceAtProb);
/*WRAPPED*/ const _getStonkDisplayShares = (contract, shares, precision) => {
    if (precision !== undefined) {
        return Number((Math.floor(shares) / getStonkPriceAtProb(contract, 1)).toPrecision(2));
    }
    return Number((Math.floor(shares) / getStonkPriceAtProb(contract, 1)).toFixed(5));
};
/*LOG2   */ const getStonkDisplayShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getStonkDisplayShares()', github_file_url, 22), _getStonkDisplayShares);
/*WRAPPED*/ const _getSharesFromStonkShares = (contract, displayShares, totalShares) => {
    const stonkShares = displayShares * getStonkPriceAtProb(contract, 1);
    if (Math.abs(totalShares - stonkShares) < 1) {
        return totalShares;
    }
    return stonkShares;
};
/*LOG2   */ const getSharesFromStonkShares = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getSharesFromStonkShares()', github_file_url, 37), _getSharesFromStonkShares);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/user.ts":
/*!************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/user.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DAYS_TO_USE_FREE_QUESTIONS: () => (/* binding */ DAYS_TO_USE_FREE_QUESTIONS),
/* harmony export */   MANIFOLD_AVATAR_URL: () => (/* binding */ MANIFOLD_AVATAR_URL),
/* harmony export */   MANIFOLD_USER_NAME: () => (/* binding */ MANIFOLD_USER_NAME),
/* harmony export */   MANIFOLD_USER_USERNAME: () => (/* binding */ MANIFOLD_USER_USERNAME),
/* harmony export */   MAX_FREE_QUESTION_VALUE: () => (/* binding */ MAX_FREE_QUESTION_VALUE),
/* harmony export */   MINUTES_ALLOWED_TO_REFER: () => (/* binding */ MINUTES_ALLOWED_TO_REFER),
/* harmony export */   _freeQuestionRemaining: () => (/* binding */ _freeQuestionRemaining),
/* harmony export */   _getAvailableBalancePerQuestion: () => (/* binding */ _getAvailableBalancePerQuestion),
/* harmony export */   _getCurrentUtcTime: () => (/* binding */ _getCurrentUtcTime),
/* harmony export */   _marketCreationCosts: () => (/* binding */ _marketCreationCosts),
/* harmony export */   freeQuestionRemaining: () => (/* binding */ freeQuestionRemaining),
/* harmony export */   getAvailableBalancePerQuestion: () => (/* binding */ getAvailableBalancePerQuestion),
/* harmony export */   getCurrentUtcTime: () => (/* binding */ getCurrentUtcTime),
/* harmony export */   marketCreationCosts: () => (/* binding */ marketCreationCosts)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _util_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/time */ "./src/ts/lib/manifold/common/src/util/time.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/user.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/user.ts';

const MANIFOLD_USER_USERNAME = 'Manifold';
const MANIFOLD_USER_NAME = 'Manifold';
const MANIFOLD_AVATAR_URL = 'https://manifold.markets/logo.png';
const MAX_FREE_QUESTIONS = 3;
const DAYS_TO_USE_FREE_QUESTIONS = 3;
const MAX_FREE_QUESTION_VALUE = 250;
/*WRAPPED*/ const _getAvailableBalancePerQuestion = (user) => {
    return (user.balance +
        (freeQuestionRemaining(user.freeQuestionsCreated, user.createdTime) > 0
            ? MAX_FREE_QUESTION_VALUE
            : 0));
};
/*LOG2   */ const getAvailableBalancePerQuestion = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getAvailableBalancePerQuestion()', github_file_url, 108), _getAvailableBalancePerQuestion);
/*WRAPPED*/ const _marketCreationCosts = (user, ante) => {
    let amountSuppliedByUser = ante;
    let amountSuppliedByHouse = 0;
    if (freeQuestionRemaining(user.freeQuestionsCreated, user.createdTime) > 0) {
        amountSuppliedByUser = Math.max(ante - MAX_FREE_QUESTION_VALUE, 0);
        amountSuppliedByHouse = Math.min(ante, MAX_FREE_QUESTION_VALUE);
        window.logger.log(`User had free questions remaining, the house will cover up to ${MAX_FREE_QUESTION_VALUE} mana of the ante.`);
    }
    window.logger.log(`Cost to [user, house]`, [amountSuppliedByUser, amountSuppliedByHouse]);
    return { amountSuppliedByUser, amountSuppliedByHouse };
};
/*LOG2   */ const marketCreationCosts = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('marketCreationCosts()', github_file_url, 117), _marketCreationCosts);
/*WRAPPED*/ const _freeQuestionRemaining = (freeQuestionsCreated = 0, createdTime) => {
    if (!createdTime)
        return 0;
    // hide if account less than one hour old
    if (createdTime > Date.now() - 60 * 60 * 1000) {
        window.logger.log(`User is less than one hour old, hiding free questions.`);
        return 0;
    }
    const now = getCurrentUtcTime();
    if (freeQuestionsCreated >= MAX_FREE_QUESTIONS) {
        window.logger.log(`User has already created all of their ${MAX_FREE_QUESTIONS} free questions.`);
        return 0;
    }
    const daysSinceCreation = (now.getTime() - createdTime) / (DAYS_TO_USE_FREE_QUESTIONS * _util_time__WEBPACK_IMPORTED_MODULE_1__.DAY_MS);
    if (daysSinceCreation >= 1) {
        window.logger.log(`User waited too long (>${DAYS_TO_USE_FREE_QUESTIONS} days) to use their free questions.`);
        return 0;
    }
    window.logger.log(`User has ${MAX_FREE_QUESTIONS - freeQuestionsCreated} free questions available to use.`);
    return MAX_FREE_QUESTIONS - freeQuestionsCreated;
};
/*LOG2   */ const freeQuestionRemaining = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('freeQuestionRemaining()', github_file_url, 127), _freeQuestionRemaining);
/*WRAPPED*/ function _getCurrentUtcTime() {
    const currentDate = new Date();
    const utcDate = currentDate.toISOString();
    return new Date(utcDate);
}
/*LOG2   */ const getCurrentUtcTime = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getCurrentUtcTime()', github_file_url, 145), _getCurrentUtcTime);
const MINUTES_ALLOWED_TO_REFER = 60;


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/util/algos.ts":
/*!******************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/util/algos.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _binarySearch: () => (/* binding */ _binarySearch),
/* harmony export */   binarySearch: () => (/* binding */ binarySearch)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/util/algos.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/util/algos.ts';
/*WRAPPED*/ function _binarySearch(min, max, comparator) {
    let mid = 0;
    let i = 0;
    while (true) {
        mid = min + (max - min) / 2;
        // Break once we've reached max precision.
        if (mid === min || mid === max)
            break;
        const comparison = comparator(mid);
        if (comparison === 0)
            break;
        else if (comparison > 0) {
            max = mid;
        }
        else {
            min = mid;
        }
        i++;
        if (i > 100000) {
            throw new Error('Binary search exceeded max iterations' +
                JSON.stringify({ min, max, mid, i }, null, 2));
        }
    }
    return mid;
}
/*LOG2   */ const binarySearch = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('binarySearch()', github_file_url, 1), _binarySearch);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/util/format.ts":
/*!*******************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/util/format.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _formatLargeNumber: () => (/* binding */ _formatLargeNumber),
/* harmony export */   _formatMoney: () => (/* binding */ _formatMoney),
/* harmony export */   _formatMoneyNumber: () => (/* binding */ _formatMoneyNumber),
/* harmony export */   _formatMoneyToDecimal: () => (/* binding */ _formatMoneyToDecimal),
/* harmony export */   _formatMoneyUSD: () => (/* binding */ _formatMoneyUSD),
/* harmony export */   _formatMoneyWithDecimals: () => (/* binding */ _formatMoneyWithDecimals),
/* harmony export */   _formatOutcomeLabel: () => (/* binding */ _formatOutcomeLabel),
/* harmony export */   _formatPercent: () => (/* binding */ _formatPercent),
/* harmony export */   _formatPercentNumber: () => (/* binding */ _formatPercentNumber),
/* harmony export */   _formatPercentShort: () => (/* binding */ _formatPercentShort),
/* harmony export */   _formatWithCommas: () => (/* binding */ _formatWithCommas),
/* harmony export */   _getMoneyNumber: () => (/* binding */ _getMoneyNumber),
/* harmony export */   _manaToUSD: () => (/* binding */ _manaToUSD),
/* harmony export */   _shortFormatNumber: () => (/* binding */ _shortFormatNumber),
/* harmony export */   _toCamelCase: () => (/* binding */ _toCamelCase),
/* harmony export */   formatLargeNumber: () => (/* binding */ formatLargeNumber),
/* harmony export */   formatMoney: () => (/* binding */ formatMoney),
/* harmony export */   formatMoneyNumber: () => (/* binding */ formatMoneyNumber),
/* harmony export */   formatMoneyToDecimal: () => (/* binding */ formatMoneyToDecimal),
/* harmony export */   formatMoneyUSD: () => (/* binding */ formatMoneyUSD),
/* harmony export */   formatMoneyWithDecimals: () => (/* binding */ formatMoneyWithDecimals),
/* harmony export */   formatOutcomeLabel: () => (/* binding */ formatOutcomeLabel),
/* harmony export */   formatPercent: () => (/* binding */ formatPercent),
/* harmony export */   formatPercentNumber: () => (/* binding */ formatPercentNumber),
/* harmony export */   formatPercentShort: () => (/* binding */ formatPercentShort),
/* harmony export */   formatWithCommas: () => (/* binding */ formatWithCommas),
/* harmony export */   getMoneyNumber: () => (/* binding */ getMoneyNumber),
/* harmony export */   manaToUSD: () => (/* binding */ manaToUSD),
/* harmony export */   shortFormatNumber: () => (/* binding */ shortFormatNumber),
/* harmony export */   toCamelCase: () => (/* binding */ toCamelCase)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _stonk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stonk */ "./src/ts/lib/manifold/common/src/stonk.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/util/format.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/util/format.ts';

const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    maximumFractionDigits: 0,
    minimumFractionDigits: 0,
});
/*WRAPPED*/ function _formatMoney(amount) {
    const newAmount = getMoneyNumber(amount);
    return formatter.format(newAmount).replace('$', 'M');
}
/*LOG2   */ const formatMoney = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatMoney()', github_file_url, 17), _formatMoney);
/*WRAPPED*/ function _formatMoneyUSD(amount) {
    const newAmount = getMoneyNumber(amount);
    return formatter.format(newAmount);
}
/*LOG2   */ const formatMoneyUSD = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatMoneyUSD()', github_file_url, 22), _formatMoneyUSD);
/*WRAPPED*/ function _formatMoneyNumber(amount) {
    const newAmount = getMoneyNumber(amount);
    return formatter.format(newAmount).replace('$', '');
}
/*LOG2   */ const formatMoneyNumber = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatMoneyNumber()', github_file_url, 27), _formatMoneyNumber);
/*WRAPPED*/ function _getMoneyNumber(amount) {
    // Handle 499.9999999999999 case
    const plusEpsilon = (amount > 0 ? Math.floor : Math.ceil)(amount + 0.00000000001 * Math.sign(amount));
    return Math.round(plusEpsilon) === 0 ? 0 : plusEpsilon;
}
/*LOG2   */ const getMoneyNumber = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getMoneyNumber()', github_file_url, 32), _getMoneyNumber);
/*WRAPPED*/ function _formatMoneyWithDecimals(amount) {
    return 'M' + amount.toFixed(2);
}
/*LOG2   */ const formatMoneyWithDecimals = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatMoneyWithDecimals()', github_file_url, 40), _formatMoneyWithDecimals);
/*WRAPPED*/ function _formatMoneyToDecimal(amount) {
    const amountString = Math.abs(amount - Math.round(amount)) < 0.0001
        ? Math.round(amount).toFixed(0)
        : amount.toFixed(1);
    return 'M' + amountString;
}
/*LOG2   */ const formatMoneyToDecimal = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatMoneyToDecimal()', github_file_url, 44), _formatMoneyToDecimal);
/*WRAPPED*/ function _formatWithCommas(amount) {
    return formatter.format(Math.floor(amount)).replace('$', '');
}
/*LOG2   */ const formatWithCommas = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatWithCommas()', github_file_url, 52), _formatWithCommas);
/*WRAPPED*/ function _manaToUSD(mana) {
    return (mana / 100).toLocaleString('en-US', {
        style: 'currency',
        currency: 'USD',
    });
}
/*LOG2   */ const manaToUSD = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('manaToUSD()', github_file_url, 56), _manaToUSD);
/*WRAPPED*/ function _formatPercentShort(zeroToOne) {
    return Math.min(zeroToOne * 100, 99).toFixed(0) + '%';
}
/*LOG2   */ const formatPercentShort = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatPercentShort()', github_file_url, 63), _formatPercentShort);
/*WRAPPED*/ function _getPercentDecimalPlaces(zeroToOne) {
    return zeroToOne < 0.02 || zeroToOne > 0.98 ? 1 : 0;
}
/*LOG2   */ const getPercentDecimalPlaces = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('getPercentDecimalPlaces()', github_file_url, 67), _getPercentDecimalPlaces);
/*WRAPPED*/ function _formatPercent(zeroToOne) {
    // Show 1 decimal place if <2% or >98%, giving more resolution on the tails
    const decimalPlaces = getPercentDecimalPlaces(zeroToOne);
    const percent = zeroToOne * 100;
    return percent.toFixed(decimalPlaces) + '%';
}
/*LOG2   */ const formatPercent = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatPercent()', github_file_url, 71), _formatPercent);
/*WRAPPED*/ function _formatPercentNumber(zeroToOne) {
    // Show 1 decimal place if <2% or >98%, giving more resolution on the tails
    const decimalPlaces = getPercentDecimalPlaces(zeroToOne);
    return Number((zeroToOne * 100).toFixed(decimalPlaces));
}
/*LOG2   */ const formatPercentNumber = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatPercentNumber()', github_file_url, 78), _formatPercentNumber);
/*WRAPPED*/ const _showPrecision = (x, sigfigs) => 
// convert back to number for weird formatting reason
`${Number(x.toPrecision(sigfigs))}`;
// Eg 1234567.89 => 1.23M; 5678 => 5.68K
/*WRAPPED*/ function _formatLargeNumber(num, sigfigs = 2) {
    const absNum = Math.abs(num);
    if (absNum < 0.1)
        return showPrecision(num, 1);
    if (absNum < 1)
        return showPrecision(num, sigfigs);
    if (absNum < 100)
        return showPrecision(num, 2);
    if (absNum < 1000)
        return showPrecision(num, 3);
    if (absNum < 10000)
        return showPrecision(num, 4);
    const suffix = ['', 'K', 'M', 'B', 'T', 'Q'];
    const i = Math.floor(Math.log10(absNum) / 3);
    const numStr = showPrecision(num / Math.pow(10, 3 * i), sigfigs);
    return `${numStr}${suffix[i] ?? ''}`;
}
/*LOG2   */ const formatLargeNumber = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatLargeNumber()', github_file_url, 89), _formatLargeNumber);
/*LOG2   */ const showPrecision = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('showPrecision()', github_file_url, 84), _showPrecision);
/*WRAPPED*/ function _shortFormatNumber(num) {
    if (num < 1000 && num > -1000)
        return showPrecision(num, 3);
    const suffix = ['', 'K', 'M', 'B', 'T', 'Q'];
    const i = Math.floor(Math.log10(Math.abs(num)) / 3);
    const numStr = showPrecision(num / Math.pow(10, 3 * i), 2);
    return `${numStr}${suffix[i] ?? ''}`;
}
/*LOG2   */ const shortFormatNumber = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('shortFormatNumber()', github_file_url, 105), _shortFormatNumber);
/*WRAPPED*/ function _toCamelCase(words) {
    const camelCase = words
        .split(' ')
        .map((word) => word.trim())
        .filter((word) => word)
        .map((word, index) => index === 0 ? word : word[0].toLocaleUpperCase() + word.substring(1))
        .join('');
    // Remove non-alpha-numeric-underscore chars.
    const regex = /(?:^|\s)(?:[a-z0-9_]+)/gi;
    return (camelCase.match(regex) || [])[0] ?? '';
}
/*LOG2   */ const toCamelCase = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('toCamelCase()', github_file_url, 115), _toCamelCase);
/*WRAPPED*/ const _formatOutcomeLabel = (contract, outcomeLabel) => {
    if (contract.outcomeType === 'BINARY' ||
        contract.mechanism === 'cpmm-multi-1') {
        return outcomeLabel;
    }
    if (contract.outcomeType === 'STONK') {
        return outcomeLabel === 'YES' ? _stonk__WEBPACK_IMPORTED_MODULE_1__.STONK_YES : _stonk__WEBPACK_IMPORTED_MODULE_1__.STONK_NO;
    }
    return outcomeLabel === 'YES' ? 'HIGHER' : 'LOWER';
};
/*LOG2   */ const formatOutcomeLabel = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('formatOutcomeLabel()', github_file_url, 130), _formatOutcomeLabel);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/util/math.ts":
/*!*****************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/util/math.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EPSILON: () => (/* binding */ EPSILON),
/* harmony export */   _average: () => (/* binding */ _average),
/* harmony export */   _floatingEqual: () => (/* binding */ _floatingEqual),
/* harmony export */   _floatingGreaterEqual: () => (/* binding */ _floatingGreaterEqual),
/* harmony export */   _floatingLesserEqual: () => (/* binding */ _floatingLesserEqual),
/* harmony export */   _logInterpolation: () => (/* binding */ _logInterpolation),
/* harmony export */   _logit: () => (/* binding */ _logit),
/* harmony export */   _median: () => (/* binding */ _median),
/* harmony export */   average: () => (/* binding */ average),
/* harmony export */   floatingEqual: () => (/* binding */ floatingEqual),
/* harmony export */   floatingGreaterEqual: () => (/* binding */ floatingGreaterEqual),
/* harmony export */   floatingLesserEqual: () => (/* binding */ floatingLesserEqual),
/* harmony export */   logInterpolation: () => (/* binding */ logInterpolation),
/* harmony export */   logit: () => (/* binding */ logit),
/* harmony export */   median: () => (/* binding */ median)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/util/math.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/util/math.ts';

/*WRAPPED*/ const _logInterpolation = (min, max, value) => {
    if (value <= min)
        return 0;
    if (value >= max)
        return 1;
    return Math.log(value - min + 1) / Math.log(max - min + 1);
};
/*LOG2   */ const logInterpolation = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('logInterpolation()', github_file_url, 3), _logInterpolation);
/*WRAPPED*/ const _logit = (x) => Math.log(x / (1 - x));
/*WRAPPED*/ function _median(xs) {
    if (xs.length === 0)
        return NaN;
    const sorted = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sortBy)(xs, (x) => x);
    const mid = Math.floor(sorted.length / 2);
    if (sorted.length % 2 === 0) {
        return (sorted[mid - 1] + sorted[mid]) / 2;
    }
    return sorted[mid];
}
/*LOG2   */ const median = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('median()', github_file_url, 12), _median);
/*LOG2   */ const logit = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('logit()', github_file_url, 10), _logit);
/*WRAPPED*/ function _average(xs) {
    return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.sum)(xs) / xs.length;
}
/*LOG2   */ const average = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('average()', github_file_url, 23), _average);
const EPSILON = 0.00000001;
/*WRAPPED*/ function _floatingEqual(a, b, epsilon = EPSILON) {
    return Math.abs(a - b) < epsilon;
}
/*LOG2   */ const floatingEqual = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('floatingEqual()', github_file_url, 29), _floatingEqual);
/*WRAPPED*/ function _floatingGreaterEqual(a, b, epsilon = EPSILON) {
    return a + epsilon >= b;
}
/*LOG2   */ const floatingGreaterEqual = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('floatingGreaterEqual()', github_file_url, 33), _floatingGreaterEqual);
/*WRAPPED*/ function _floatingLesserEqual(a, b, epsilon = EPSILON) {
    return a - epsilon <= b;
}
/*LOG2   */ const floatingLesserEqual = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('floatingLesserEqual()', github_file_url, 37), _floatingLesserEqual);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/util/object.ts":
/*!*******************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/util/object.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _addObjects: () => (/* binding */ _addObjects),
/* harmony export */   _hasChanges: () => (/* binding */ _hasChanges),
/* harmony export */   _removeNullOrUndefinedProps: () => (/* binding */ _removeNullOrUndefinedProps),
/* harmony export */   _removeUndefinedProps: () => (/* binding */ _removeUndefinedProps),
/* harmony export */   _subtractObjects: () => (/* binding */ _subtractObjects),
/* harmony export */   addObjects: () => (/* binding */ addObjects),
/* harmony export */   hasChanges: () => (/* binding */ hasChanges),
/* harmony export */   removeNullOrUndefinedProps: () => (/* binding */ removeNullOrUndefinedProps),
/* harmony export */   removeUndefinedProps: () => (/* binding */ removeUndefinedProps),
/* harmony export */   subtractObjects: () => (/* binding */ subtractObjects)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/util/object.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/util/object.ts';

/*WRAPPED*/ const _removeUndefinedProps = (obj) => {
    const newObj = {};
    for (const key of Object.keys(obj)) {
        if (obj[key] !== undefined)
            newObj[key] = obj[key];
    }
    return newObj;
};
/*LOG2   */ const removeUndefinedProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('removeUndefinedProps()', github_file_url, 3), _removeUndefinedProps);
/*WRAPPED*/ const _removeNullOrUndefinedProps = (obj) => {
    const newObj = {};
    for (const key of Object.keys(obj)) {
        if (obj[key] !== undefined && obj[key] !== null)
            newObj[key] = obj[key];
    }
    return newObj;
};
/*LOG2   */ const removeNullOrUndefinedProps = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('removeNullOrUndefinedProps()', github_file_url, 12), _removeNullOrUndefinedProps);
/*WRAPPED*/ const _addObjects = (obj1, obj2) => {
    const keys = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.union)(Object.keys(obj1), Object.keys(obj2));
    const newObj = {};
    for (const key of keys) {
        newObj[key] = (obj1[key] ?? 0) + (obj2[key] ?? 0);
    }
    return newObj;
};
/*LOG2   */ const addObjects = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('addObjects()', github_file_url, 23), _addObjects);
/*WRAPPED*/ const _subtractObjects = (obj1, obj2) => {
    const keys = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.union)(Object.keys(obj1), Object.keys(obj2));
    const newObj = {};
    for (const key of keys) {
        newObj[key] = (obj1[key] ?? 0) - (obj2[key] ?? 0);
    }
    return newObj;
};
/*LOG2   */ const subtractObjects = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('subtractObjects()', github_file_url, 37), _subtractObjects);
/*WRAPPED*/ const _hasChanges = (obj, partial) => {
    const currValues = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.mapValues)(partial, (_, key) => obj[key]);
    return !(0,lodash__WEBPACK_IMPORTED_MODULE_1__.isEqual)(currValues, partial);
};
/*LOG2   */ const hasChanges = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('hasChanges()', github_file_url, 51), _hasChanges);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/util/random.ts":
/*!*******************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/util/random.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _createRNG: () => (/* binding */ _createRNG),
/* harmony export */   _genHash: () => (/* binding */ _genHash),
/* harmony export */   _randomString: () => (/* binding */ _randomString),
/* harmony export */   _shuffle: () => (/* binding */ _shuffle),
/* harmony export */   createRNG: () => (/* binding */ createRNG),
/* harmony export */   genHash: () => (/* binding */ genHash),
/* harmony export */   randomString: () => (/* binding */ randomString),
/* harmony export */   shuffle: () => (/* binding */ shuffle)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/util/random.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/util/random.ts';
/*WRAPPED*/ const _randomString = (length = 12) => Math.random()
    .toString(16)
    .substring(2, length + 2);
/*WRAPPED*/ function _genHash(str) {
    // xmur3
    // Route around compiler bug by using object?
    const o = { h: 1779033703 ^ str.length };
    for (let i = 0; i < str.length; i++) {
        let h = o.h;
        h = Math.imul(h ^ str.charCodeAt(i), 3432918353);
        h = (h << 13) | (h >>> 19);
        o.h = h;
    }
    return function () {
        let h = o.h;
        h = Math.imul(h ^ (h >>> 16), 2246822507);
        h = Math.imul(h ^ (h >>> 13), 3266489909);
        return (h ^= h >>> 16) >>> 0;
    };
}
/*LOG2   */ const genHash = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('genHash()', github_file_url, 6), _genHash);
/*LOG2   */ const randomString = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('randomString()', github_file_url, 1), _randomString);
/*WRAPPED*/ function _createRNG(seed) {
    // https://stackoverflow.com/a/47593316/1592933
    const gen = genHash(seed);
    let [a, b, c, d] = [gen(), gen(), gen(), gen()];
    // sfc32
    return function () {
        a >>>= 0;
        b >>>= 0;
        c >>>= 0;
        d >>>= 0;
        let t = (a + b) | 0;
        a = b ^ (b >>> 9);
        b = (c + (c << 3)) | 0;
        c = (c << 21) | (c >>> 11);
        d = (d + 1) | 0;
        t = (t + d) | 0;
        c = (c + t) | 0;
        return (t >>> 0) / 4294967296;
    };
}
/*LOG2   */ const createRNG = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('createRNG()', github_file_url, 26), _createRNG);
/*WRAPPED*/ const _shuffle = (array, rand) => {
    for (let i = 0; i < array.length; i++) {
        const swapIndex = i + Math.floor(rand() * (array.length - i));
        [array[i], array[swapIndex]] = [array[swapIndex], array[i]];
    }
};
/*LOG2   */ const shuffle = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('shuffle()', github_file_url, 49), _shuffle);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/util/slugify.ts":
/*!********************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/util/slugify.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _slugify: () => (/* binding */ _slugify),
/* harmony export */   slugify: () => (/* binding */ slugify)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/util/slugify.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/util/slugify.ts';
/*WRAPPED*/ const _slugify = (text, separator = '-', maxLength = 35) => {
    return text
        .toString()
        .normalize('NFD') // split an accented letter in the base letter and the acent
        .replace(/[\u0300-\u036f]/g, '') // remove all previously split accents
        .toLowerCase()
        .trim()
        .replace(/[^a-z0-9 ]/g, '') // remove all chars not letters, numbers and spaces (to be replaced)
        .replace(/\s+/g, separator)
        .substring(0, maxLength)
        .replace(new RegExp(separator + '+$', 'g'), ''); // remove terminal separators
};
/*LOG2   */ const slugify = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('slugify()', github_file_url, 1), _slugify);


/***/ }),

/***/ "./src/ts/lib/manifold/common/src/util/time.ts":
/*!*****************************************************!*\
  !*** ./src/ts/lib/manifold/common/src/util/time.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DAY_MS: () => (/* binding */ DAY_MS),
/* harmony export */   HOUR_MS: () => (/* binding */ HOUR_MS),
/* harmony export */   MINUTE_MS: () => (/* binding */ MINUTE_MS),
/* harmony export */   MONTH_MS: () => (/* binding */ MONTH_MS),
/* harmony export */   WEEK_MS: () => (/* binding */ WEEK_MS),
/* harmony export */   YEAR_MS: () => (/* binding */ YEAR_MS),
/* harmony export */   _sleep: () => (/* binding */ _sleep),
/* harmony export */   sleep: () => (/* binding */ sleep)
/* harmony export */ });
/* harmony import */ var _playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");

const raw_github_file_url = 'https://raw.githubusercontent.com/manifoldmarkets/manifold/74ab5cae/common/src/util/time.ts';
const github_file_url = 'https://github.com/manifoldmarkets/manifold/blob/74ab5cae/common/src/util/time.ts';
const MINUTE_MS = 60 * 1000;
const HOUR_MS = 60 * MINUTE_MS;
const DAY_MS = 24 * HOUR_MS;
const WEEK_MS = 7 * DAY_MS;
const MONTH_MS = 30 * DAY_MS;
const YEAR_MS = 365 * DAY_MS;
/*WRAPPED*/ const _sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
/*LOG2   */ const sleep = (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.logCall)('Entering ' + (0,_playground_nested_logger__WEBPACK_IMPORTED_MODULE_0__.codeUrl)('sleep()', github_file_url, 8), _sleep);


/***/ }),

/***/ "./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BRAND: () => (/* binding */ BRAND),
/* harmony export */   DIRTY: () => (/* binding */ DIRTY),
/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),
/* harmony export */   INVALID: () => (/* binding */ INVALID),
/* harmony export */   NEVER: () => (/* binding */ NEVER),
/* harmony export */   OK: () => (/* binding */ OK),
/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),
/* harmony export */   Schema: () => (/* binding */ ZodType),
/* harmony export */   ZodAny: () => (/* binding */ ZodAny),
/* harmony export */   ZodArray: () => (/* binding */ ZodArray),
/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),
/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),
/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),
/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),
/* harmony export */   ZodDate: () => (/* binding */ ZodDate),
/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),
/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),
/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),
/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),
/* harmony export */   ZodError: () => (/* binding */ ZodError),
/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),
/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),
/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),
/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),
/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),
/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),
/* harmony export */   ZodMap: () => (/* binding */ ZodMap),
/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),
/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),
/* harmony export */   ZodNever: () => (/* binding */ ZodNever),
/* harmony export */   ZodNull: () => (/* binding */ ZodNull),
/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),
/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),
/* harmony export */   ZodObject: () => (/* binding */ ZodObject),
/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),
/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),
/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),
/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),
/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),
/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),
/* harmony export */   ZodSchema: () => (/* binding */ ZodType),
/* harmony export */   ZodSet: () => (/* binding */ ZodSet),
/* harmony export */   ZodString: () => (/* binding */ ZodString),
/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),
/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),
/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),
/* harmony export */   ZodType: () => (/* binding */ ZodType),
/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),
/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),
/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),
/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),
/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),
/* harmony export */   any: () => (/* binding */ anyType),
/* harmony export */   array: () => (/* binding */ arrayType),
/* harmony export */   bigint: () => (/* binding */ bigIntType),
/* harmony export */   boolean: () => (/* binding */ booleanType),
/* harmony export */   coerce: () => (/* binding */ coerce),
/* harmony export */   custom: () => (/* binding */ custom),
/* harmony export */   date: () => (/* binding */ dateType),
/* harmony export */   "default": () => (/* binding */ z),
/* harmony export */   defaultErrorMap: () => (/* binding */ errorMap),
/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),
/* harmony export */   effect: () => (/* binding */ effectsType),
/* harmony export */   "enum": () => (/* binding */ enumType),
/* harmony export */   "function": () => (/* binding */ functionType),
/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),
/* harmony export */   getParsedType: () => (/* binding */ getParsedType),
/* harmony export */   "instanceof": () => (/* binding */ instanceOfType),
/* harmony export */   intersection: () => (/* binding */ intersectionType),
/* harmony export */   isAborted: () => (/* binding */ isAborted),
/* harmony export */   isAsync: () => (/* binding */ isAsync),
/* harmony export */   isDirty: () => (/* binding */ isDirty),
/* harmony export */   isValid: () => (/* binding */ isValid),
/* harmony export */   late: () => (/* binding */ late),
/* harmony export */   lazy: () => (/* binding */ lazyType),
/* harmony export */   literal: () => (/* binding */ literalType),
/* harmony export */   makeIssue: () => (/* binding */ makeIssue),
/* harmony export */   map: () => (/* binding */ mapType),
/* harmony export */   nan: () => (/* binding */ nanType),
/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),
/* harmony export */   never: () => (/* binding */ neverType),
/* harmony export */   "null": () => (/* binding */ nullType),
/* harmony export */   nullable: () => (/* binding */ nullableType),
/* harmony export */   number: () => (/* binding */ numberType),
/* harmony export */   object: () => (/* binding */ objectType),
/* harmony export */   objectUtil: () => (/* binding */ objectUtil),
/* harmony export */   oboolean: () => (/* binding */ oboolean),
/* harmony export */   onumber: () => (/* binding */ onumber),
/* harmony export */   optional: () => (/* binding */ optionalType),
/* harmony export */   ostring: () => (/* binding */ ostring),
/* harmony export */   pipeline: () => (/* binding */ pipelineType),
/* harmony export */   preprocess: () => (/* binding */ preprocessType),
/* harmony export */   promise: () => (/* binding */ promiseType),
/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson),
/* harmony export */   record: () => (/* binding */ recordType),
/* harmony export */   set: () => (/* binding */ setType),
/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap),
/* harmony export */   strictObject: () => (/* binding */ strictObjectType),
/* harmony export */   string: () => (/* binding */ stringType),
/* harmony export */   symbol: () => (/* binding */ symbolType),
/* harmony export */   transformer: () => (/* binding */ effectsType),
/* harmony export */   tuple: () => (/* binding */ tupleType),
/* harmony export */   undefined: () => (/* binding */ undefinedType),
/* harmony export */   union: () => (/* binding */ unionType),
/* harmony export */   unknown: () => (/* binding */ unknownType),
/* harmony export */   util: () => (/* binding */ util),
/* harmony export */   "void": () => (/* binding */ voidType),
/* harmony export */   z: () => (/* binding */ z)
/* harmony export */ });
var util;
(function (util) {
    util.assertEqual = (val) => val;
    function assertIs(_arg) { }
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second, // second overwrites first
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};

const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};

const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                }
                else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                }
                else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                }
                else {
                    util.assertNever(issue.validation);
                }
            }
            else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            }
            else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
                message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return { message };
};

let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}

const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage,
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap, // then global default map
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            syncPairs.push({
                key: await pair.key,
                value: await pair.value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return INVALID;
            if (value.status === "aborted")
                return INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (key.value !== "__proto__" &&
                (typeof value.value !== "undefined" || pair.alwaysSet)) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
const INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
                this._cachedPath.push(...this._path, ...this._key);
            }
            else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result) => {
    if (isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error() {
                if (this._error)
                    return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            },
        };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
        }
        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this, this._def);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def),
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch,
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
// const uuidRegex =
//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
// const emailRegex =
//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// const emailRegex =
//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
// const emailRegex =
//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
// const emailRegex =
//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
// Adapted from https://stackoverflow.com/a/3143231
const datetimeRegex = (args) => {
    if (args.precision) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
        }
    }
    else if (args.precision === 0) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
        }
    }
    else {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
        }
    }
};
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            }
            //
            );
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    else if (tooSmall) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "emoji") {
                if (!emojiRegex) {
                    emojiRegex = new RegExp(_emojiRegex, "u");
                }
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { includes: check.value, position: check.position },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            }
            else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            }
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { startsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { endsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message),
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
        var _a;
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                message: options,
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message),
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message),
        });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */
    nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }],
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }],
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params) => {
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message),
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message),
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message),
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" ||
            (ch.kind === "multipleOf" && util.isInteger(ch.value)));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "finite" ||
                ch.kind === "int" ||
                ch.kind === "multipleOf") {
                return true;
            }
            else if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
            else if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime()),
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params) => {
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params) => {
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType,
        });
        return INVALID;
    }
}
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: (tooSmall ? def.exactLength.value : undefined),
                    maximum: (tooBig ? def.exactLength.value : undefined),
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message,
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return ParseStatus.mergeArray(status, result);
            });
        }
        const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil.toString(message) },
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element),
        });
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever &&
            this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: () => ({
                ...this._def.shape(),
                ...augmentation,
            }),
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
                ...this._def.shape(),
                ...merging._def.shape(),
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    /**
     * @deprecated
     */
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            }
            else {
                newShape[key] = fieldSchema.optional();
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            }
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while (newField instanceof ZodOptional) {
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    }
    else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    }
    else if (type instanceof ZodLiteral) {
        return [type.value];
    }
    else if (type instanceof ZodEnum) {
        return type.options;
    }
    else if (type instanceof ZodNativeEnum) {
        // eslint-disable-next-line ban/ban
        return Object.keys(type.enum);
    }
    else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    }
    else if (type instanceof ZodUndefined) {
        return [undefined];
    }
    else if (type instanceof ZodNull) {
        return [null];
    }
    else {
        return null;
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [discriminator],
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params),
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types,
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            status.dirty();
        }
        const items = [...ctx.data]
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(async function (...args) {
                const error = new ZodError([]);
                const parsedArgs = await me._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(function (...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = Reflect.apply(fn, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: (args
                ? args
                : ZodTuple.create([]).rest(ZodUnknown.create())),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params),
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values) {
        return ZodEnum.create(values);
    }
    exclude(values) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string &&
            ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise &&
            ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
            ? this._def.schema.sourceType()
            : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg) => {
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.issues.length) {
                return {
                    status: "dirty",
                    value: ctx.data,
                };
            }
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed) => {
                    return this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                });
            }
            else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc
            // effect: RefinementEffect<any>
            ) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (!isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!isValid(base))
                        return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params) => {
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function"
            ? params.default
            : () => params.default,
        ...processCreateParams(params),
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: [],
            },
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx,
            },
        });
        if (isAsync(result)) {
            return result.then((result) => {
                return {
                    status: "valid",
                    value: result.status === "valid"
                        ? result.value
                        : this._def.catchValue({
                            get error() {
                                return new ZodError(newCtx.common.issues);
                            },
                            input: newCtx.data,
                        }),
                };
            });
        }
        else {
            return {
                status: "valid",
                value: result.status === "valid"
                    ? result.value
                    : this._def.catchValue({
                        get error() {
                            return new ZodError(newCtx.common.issues);
                        },
                        input: newCtx.data,
                    }),
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params) => {
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async () => {
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inResult.status === "aborted")
                    return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                }
                else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            };
            return handleAsync();
        }
        else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
            if (inResult.status === "aborted")
                return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value,
                };
            }
            else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline,
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        if (isValid(result)) {
            result.value = Object.freeze(result.value);
        }
        return result;
    }
}
ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params),
    });
};
const custom = (check, params = {}, 
/**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */
fatal) => {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            var _a, _b;
            if (!check(data)) {
                const p = typeof params === "function"
                    ? params(data)
                    : typeof params === "string"
                        ? { message: params }
                        : params;
                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
            }
        });
    return ZodAny.create();
};
const late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (
// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
    string: ((arg) => ZodString.create({ ...arg, coerce: true })),
    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
    boolean: ((arg) => ZodBoolean.create({
        ...arg,
        coerce: true,
    })),
    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
};
const NEVER = INVALID;

var z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () { return util; },
    get objectUtil () { return objectUtil; },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    ZodReadonly: ZodReadonly,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!************************!*\
  !*** ./src/ts/main.ts ***!
  \************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pgrabovets/json-view */ "./node_modules/@pgrabovets/json-view/dist/jsonview.js");
/* harmony import */ var _pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lib_manifold_common_src_playground_nested_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/manifold/common/src/playground/nested-logger */ "./src/ts/lib/manifold/common/src/playground/nested-logger.ts");
/* harmony import */ var _lib_manifold_common_src_playground_playground_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/manifold/common/src/playground/playground-state */ "./src/ts/lib/manifold/common/src/playground/playground-state.ts");
/* harmony import */ var _create_card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./create-card */ "./src/ts/create-card.ts");




let collapseWideTrees = function (tree, width = 4) {
    for (let i = 0; i < tree.children.length; i++) {
        const child = tree.children[i];
        if (child.children.length >= width) {
            _pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0___default().collapse(child);
        }
        else {
            collapseWideTrees(child, width);
        }
    }
    // Now iterate through all children and expand-in-data the thin ones
    _pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0___default().traverse(tree, (node) => {
        if (node.children.length < width /*&& (!node.parent || node.parent.children.length < width+5)*/) {
            node.isExpanded = true;
        }
    });
};
let runBox = function (box) {
    const command = box.find('.command-input').val();
    if (command === '')
        return;
    const output = executeCommand(tokenize(command));
    window.jsonlog = _pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0___default().create(JSON.stringify(window.logger.getLog()));
    _pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0___default().render(window.jsonlog, box.find('.output-container')[0]);
    _pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0___default().expand(window.jsonlog);
    collapseWideTrees(window.jsonlog);
    // Hide the useless root element
    // box.find('.output-container').children('.json-container').children().first().addClass('hidden');
};
let submitFunction = function (event) {
    if (event.keyCode === 13) {
        if (!$(this).parent().is(':last-child')) {
            totalReset();
            // For each of the .repl-containers in order, run the command
            $(this).parent().parent().children('.repl-container').each(function () {
                runBox($(this));
            });
        }
        else {
            runBox($(this).parent());
            // Create a new repl-container below, but only if we are the last repl-container
            const newReplContainer = $('<div>').addClass('repl-container').html(`
                <input type="text" class="command-input">
                <div class="output-container"></div>
            `);
            $(this).parent().parent().append(newReplContainer);
            // Focus on the new command input
            const newCommandInput = newReplContainer.find('.command-input');
            newCommandInput.focus();
            // Add the submitFunction event listener to the new command input
            newCommandInput.on('keyup', submitFunction);
        }
        $('.cards').empty();
        // Add user cards to the left side
        window.pState.getUsers().forEach((user) => {
            $('.cards').append((0,_create_card__WEBPACK_IMPORTED_MODULE_3__.userToCard)(user));
        });
        window.pState.getContracts().forEach((c) => {
            $('.cards').append((0,_create_card__WEBPACK_IMPORTED_MODULE_3__.contractToCard)(c));
        });
    }
};
function totalReset() {
    // Clear the state
    window.pState = new _lib_manifold_common_src_playground_playground_state__WEBPACK_IMPORTED_MODULE_2__.PlaygroundState();
    // Clear the log
    window.logger = new _lib_manifold_common_src_playground_nested_logger__WEBPACK_IMPORTED_MODULE_1__.NestedLogger();
    // Delete every .json-container elements
    $('.json-container').remove();
    // Don't recall a recently used userId
    recentUserId = undefined;
}
// When a input.command-input is submitted, execute the command
// and display the output in div.output-container
$('.command-input').on('keyup', submitFunction);
window.jsonview = (_pgrabovets_json_view__WEBPACK_IMPORTED_MODULE_0___default());
const commandsRequiringUser = [
    'CREATE',
    'BUY'
];
function tokensToObject(tokens) {
    console.log(`Tokens: ${tokens}`);
    const obj = {};
    const isKey = true;
    let key = '';
    tokens.forEach((token) => {
        if (key === '') {
            // Interpret the next token as a key
            if (token.includes(':'))
                throw new Error(`Bad colon placement`);
            key = token;
        }
        else {
            // Interpret the next token as a value
            if (token.includes(':'))
                return;
            obj[key] = token;
            key = '';
        }
    });
    if (key !== '')
        throw new Error(`Missing value for key ${key}`);
    return obj;
}
let recentUserId = undefined;
function getRecentUserId() {
    if (!recentUserId) {
        recentUserId = window.pState.getFirstUser().id;
    }
    return recentUserId;
}
function tokenize(command) {
    // Tokens are separated by spaces, commas, or colons (counts as a token)
    // If there are double or single quotes, then the quotes are removed and the contents are a single token
    // Remove all non-quoted whitespace, and all other characters that aren't quotes, spaces, commas, colons, or alphanumeric
    let tokens = [];
    let currentToken = '';
    let inQuotes = false;
    let inDoubleQuotes = false;
    let pushToken = function () {
        if (currentToken.length > 0) {
            tokens.push(currentToken);
            currentToken = '';
        }
    };
    for (let i = 0; i < command.length; i++) {
        const char = command[i];
        if (char === ' ' || char === ',' || char === ':') {
            if (!inQuotes && !inDoubleQuotes) {
                pushToken();
                if (char === ':') {
                    tokens.push(':');
                }
                continue;
            }
        }
        if (char === '"') {
            if (inDoubleQuotes) {
                pushToken();
                inDoubleQuotes = false;
                continue;
            }
            else if (!inQuotes) {
                pushToken();
                inDoubleQuotes = true;
                continue;
            }
        }
        if (char === '\'') {
            if (inQuotes) {
                pushToken();
                inQuotes = false;
                continue;
            }
            else if (!inDoubleQuotes) {
                pushToken();
                inQuotes = true;
                continue;
            }
        }
        currentToken += char;
    }
    if (currentToken.length > 0) {
        tokens.push(currentToken);
    }
    return tokens;
}
function executeCommand(tokens, userId) {
    // New sets of logs to generate (Should we be saving past ones?)
    window.logger = new _lib_manifold_common_src_playground_nested_logger__WEBPACK_IMPORTED_MODULE_1__.NestedLogger();
    // Split into tokens
    if (tokens.length === 0) {
        return;
    }
    const commandName = tokens[0].toUpperCase();
    // Check if commandName in commandsRequiringUser and if userId is specified
    if (commandsRequiringUser.includes(commandName) && !userId) {
        window.logger.pLog("userId unspecified, using a default");
        window.logger.in();
        userId = getRecentUserId();
        window.logger.out(0);
    }
    // The rest of the tokens are the arguments
    const args = tokens.slice(1);
    // CREATE command
    if (commandName === 'CREATE') {
        // Use the defaults for now
        let market;
        try {
            if (!window.pState.getUser(userId))
                window.pState.addUserWithDefaultProps({ id: userId });
            recentUserId = userId;
            // Interpret args after the command
            market = window.pState.addContractWithDefaultProps(userId, tokensToObject(args));
            return market;
        }
        catch (e) {
            console.log("Error creating contract");
            window.logger.pLog(e.message, e.stack.split('\n'));
            return e;
        }
    }
    if (commandName === 'BUY') {
        try {
            if (!window.pState.getUser(userId))
                window.pState.addUserWithDefaultProps({ id: userId });
            recentUserId = userId;
            const bet = window.pState.placeBetWithDefaultProps({}, userId, false);
            return bet;
        }
        catch (e) {
            console.log("Error placing bet");
            window.logger.pLog(e.message, e.stack.split('\n'));
            return e;
        }
    }
    // No commands matched. If we weren't passed a userId, rerun without the first token
    if (!userId) {
        userId = tokens[0];
        window.logger.pLog(`Unknown command, parsing ${userId} as userId`);
        return executeCommand(tokens.slice(1), userId);
    }
    else {
        console.error(`Unknown command ${commandName}`);
        return window.logger.pLog(`Unknown command ${commandName}`);
    }
}
totalReset();
// Focus the command input
$('.command-input').focus();

})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map